[[1189, "str"], [1254, "AbstractResource"], [1900, "Request"], [1333, "AbstractResource"], [1338, "Callable[(], AbstractResource)]"], [1854, "Type[Request]"], [739, "str"], [1568, "_AppSignal"], [759, "int"], [928, "bool"], [609, "Type[Application]"], [1553, "_AppSignal"], [1745, "Server"], [645, "object"], [638, "bool"], [608, "Type[Application]"], [1439, "AbstractResource"], [1087, "bool"], [1833, "RawRequestMessage"], [1828, "Request"], [1447, "Application"], [2224, "Application"], [1841, "RequestHandler"], [1260, "str"], [1479, "Domain"], [639, "bool"], [1204, "Application"], [1834, "RawRequestMessage"], [1253, "AbstractResource"], [1899, "Request"], [1842, "RequestHandler"], [1643, "Server"], [1584, "_AppSignal"], [2118, "str"], [1569, "_AppSignal"], [1144, "bool"], [1850, "asyncio.Task[None]"], [1520, "Iterable[AbstractRouteDef]"], [1827, "Request"], [664, "str"], [716, "Any"], [795, "Optional[asyncio.AbstractEventLoop]"], [1205, "Application"], [1341, "Application"], [1613, "UrlDispatcher"], [1583, "_AppSignal"], [1846, "AbstractStreamWriter"], [1845, "AbstractStreamWriter"], [1445, "str"], [1744, "Server"], [644, "object"], [1849, "asyncio.Task[None]"], [1190, "str"], [657, "Any"], [1614, "UrlDispatcher"], [1628, "_Middlewares"], [714, "str"], [1853, "Type[Request]"], [835, "Optional[asyncio.AbstractEventLoop]"], [1332, "AbstractResource"], [760, "int"], [1180, "Application"], [663, "str"], [1554, "_AppSignal"], [1438, "AbstractResource"], [1179, "Application"], [1263, "Application"], [1259, "str"], [1337, "Callable[(], AbstractResource)]"], [1629, "_Middlewares"], [1536, "_RespPrepareSignal"], [717, "Any"], [1088, "bool"], [2264, "Application"], [929, "bool"], [1642, "Server"], [1143, "bool"], [1537, "_RespPrepareSignal"], [658, "Any"], [2119, "str"], [1478, "Domain"], [1444, "str"], [1519, "Iterable[AbstractRouteDef]"], [1837, "StreamReader"], [1838, "StreamReader"]]
[[1298, "AbstractStreamWriter"], [583, "Optional[str]"], [906, "ByteString"], [385, "Any"], [555, "Optional[int]"], [280, "Type[Payload]"], [582, "Optional[str]"], [708, "int"], [1208, "IO[Any]"], [862, "str"], [1858, "_AsyncIterable"], [889, "AbstractStreamWriter"], [589, "Optional[str]"], [861, "str"], [866, "bool"], [572, "Optional[Union[(_CIMultiDict, Dict[(str, str)])]]"], [1171, "IO[str]"], [1979, "StreamReader"], [1048, "Text"], [1210, "str"], [253, "Any"], [1930, "AbstractStreamWriter"], [254, "Any"], [329, "Type[Payload]"], [556, "Optional[int]"], [571, "Optional[Union[(_CIMultiDict, Dict[(str, str)])]]"], [757, "bytes"], [1752, "JSONEncoder"], [453, "Any"], [284, "Any"], [1739, "Any"], [1847, "Optional[_AsyncIterator]"], [1751, "JSONEncoder"], [1211, "str"], [756, "bytes"], [865, "bool"], [1846, "Optional[_AsyncIterator]"], [547, "str"], [285, "Any"], [1627, "int"], [567, "Any"], [546, "str"], [451, "Type[Payload]"], [1025, "AbstractStreamWriter"], [578, "Optional[str]"], [833, "str"], [1391, "TextIO"], [1532, "AbstractStreamWriter"], [1741, "str"], [312, "Any"], [281, "Type[Payload]"], [1746, "str"], [568, "Any"], [590, "Optional[str]"], [579, "str"], [888, "AbstractStreamWriter"], [740, "_CIMultiDict"]]
[[1701, "Optional[bool]"], [1633, "str"], [1349, "WebSocketWriter"], [1839, "bytes"], [2622, "Optional[float]"], [1562, "bytes"], [2120, "Optional[float]"], [1162, "Optional[bool]"], [1438, "BaseRequest"], [226, "bool"], [1432, "WebSocketReady"], [2620, "JSONDecoder"], [211, "str"], [1771, "Optional[bool]"], [1561, "bytes"], [1490, "bool"], [2119, "Optional[float]"], [714, "BaseRequest"], [1598, "bytes"], [1318, "WebSocketWriter"], [1700, "bytes"], [638, "BaseRequest"], [2515, "Optional[float]"], [1536, "bool"], [227, "bool"], [1772, "JSONEncoder"], [1636, "Optional[bool]"], [2645, "bytes"], [1837, "int"], [1634, "bytes"], [1243, "BaseRequest"], [1770, "Any"], [1491, "bool"], [1345, "BaseRequest"], [1773, "JSONEncoder"], [2567, "Optional[float]"], [2619, "JSONDecoder"], [1347, "str"], [637, "BaseRequest"], [1431, "WebSocketReady"], [1838, "int"]]
[[2432, "int"], [399, "int"], [2376, "Any"], [2713, "str"], [2483, "bool"], [2846, "istr"], [471, "Mapping[(int, Tuple[(str, str)])]"], [611, "Optional[int]"], [674, "Optional[Union[(bool, ContentCoding)]]"], [2549, "CIMultiDict[str]"], [3550, "int"], [573, "int"], [3767, "Response"], [2100, "bytes"], [2377, "Any"], [780, "str"], [2403, "str"], [1177, "Optional[str]"], [414, "bool"], [1356, "Optional[Union[(int, float)]]"], [2210, "bytes"], [559, "int"], [1694, "BaseRequest"], [354, "bool"], [2382, "str"], [2433, "int"], [1046, "Optional[int]"], [1561, "ContentCoding"], [2099, "bytes"], [1622, "BaseRequest"], [1741, "BaseRequest"], [781, "str"], [2489, "object"], [3305, "Optional[Union[bytes, Payload]]"], [1129, "str"], [610, "Optional[int]"], [3551, "int"], [3269, "Optional[int]"], [2844, "bytes"], [776, "str"], [2383, "str"], [3280, "bytes"], [1562, "ContentCoding"], [463, "int"], [1104, "str"], [2286, "str"], [2467, "int"], [756, "SimpleCookie"], [2419, "str"], [2490, "object"], [2702, "bytes"], [443, "str"], [777, "str"], [353, "bool"], [2484, "bool"], [3602, "ContentCoding"], [429, "bool"], [977, "str"], [1105, "str"], [1464, "istr"], [2287, "str"], [757, "SimpleCookie"], [398, "int"], [2852, "istr"], [3768, "Response"], [2405, "Any"], [3772, "Any"], [1621, "BaseRequest"], [2548, "CIMultiDict[str]"], [413, "bool"], [444, "str"], [428, "bool"], [574, "int"], [673, "Optional[Union[(bool, ContentCoding)]]"], [465, "Optional[str]"], [2466, "int"], [1463, "istr"], [2853, "istr"], [3466, "BaseRequest"], [470, "Mapping[(int, Tuple[(str, str)])]"], [3087, "str"], [558, "int"]]
[[110, "int"], [111, "int"], [89, "Optional[asyncio.AbstractEventLoop]"], [308, "int"], [107, "int"], [452, "str"], [306, "str"], [105, "str"], [90, "Optional[asyncio.AbstractEventLoop]"], [307, "int"], [454, "int"], [453, "int"], [104, "str"], [108, "int"], [237, "Optional[asyncio.AbstractEventLoop]"]]
[[1433, "str"], [571, "LooseCookies"], [2138, "URL"], [686, "str"], [481, "int"], [691, "str"], [353, "PathLike"], [1526, "str"], [301, "PathLike"], [1522, "str"], [2123, "URL"], [1519, "bool"], [687, "str"], [2121, "LooseCookies"], [1527, "str"], [1631, "str"], [1435, "str"], [1430, "bool"], [2097, "int"], [683, "float"], [302, "PathLike"], [1523, "str"], [728, "URL"], [682, "float"], [690, "str"], [727, "URL"], [1520, "bool"], [1429, "bool"], [480, "int"], [725, "LooseCookies"], [1146, "URL"], [1147, "URL"], [1632, "str"], [743, "str"]]
[[1739, "Optional[LooseHeaders]"], [2186, "Any"], [3581, "int  "], [5229, "str"], [356, "Optional[str]"], [5580, "Optional[TracebackType]"], [3550, "bytes"], [468, "URL"], [3944, "Any"], [861, "str"], [1893, "Iterable[str]"], [3796, "str"], [514, "bytes"], [587, "bytes"], [1424, "Optional[int]  "], [3838, "RawHeaders"], [606, "asyncio.Transport"], [814, "Optional[URL]"], [2185, "Any"], [839, "Optional[int] "], [5381, "str"], [2651, "bool"], [779, "Optional[int]"], [4461, "Connection"], [2473, "Any"], [1894, "Iterable[str]"], [4353, "MultiDict[Union[str, URL]]"], [3596, "StreamReader  "], [1040, "str"], [1495, "str"], [5576, "Optional[Type[BaseException]]"], [368, "MappingProxyType[str, str]  "], [382, "Optional[str]"], [2794, "bool"], [5446, "Optional[str]"], [4082, "str"], [1540, "RequestInfo"], [4278, "MultiDict[MultiDictProxy[Union[str, URL]]]"], [804, "Union[SSLContext, None, bool, Fingerprint]"], [4774, "bool"], [2001, "Optional[LooseCookies]"], [1402, "ConnectionKey"], [1403, "ConnectionKey"], [856, "str"], [2887, "Connection"], [5578, "Optional[BaseException]"], [3851, "RequestInfo"], [852, "bool"], [3945, "Any"], [3604, "CIMultiDictProxy[str]  "], [3654, "str"], [2652, "bool"], [4887, "Any"], [3611, "RawHeaders  "], [815, "Optional[URL]"], [467, "URL"], [4350, "MultiDict[Union[str, URL]]"], [4352, "MultiDict[Union[str, URL]]"], [1361, "bool"], [3783, "URL"], [1413, "Optional[LooseHeaders]"], [5579, "Optional[TracebackType]"], [3582, "int  "], [3067, "Connection"], [4775, "bool"], [5228, "str"], [838, "Optional[int] "], [5442, "str"], [5447, "Optional[str]"], [860, "str"], [1042, "URL"], [1549, "CIMultiDictProxy[str]"], [412, "URL"], [792, "bool"], [827, "Optional[BasicAuth]"], [1539, "RequestInfo"], [5443, "JSONDecoder"], [355, "Optional[str]"], [766, "str"], [1643, "Union[(http.HttpVersion, str)]"], [2793, "bool"], [2886, "Connection"], [3610, "RawHeaders  "], [4083, "str"], [5380, "str"], [4888, "Any"], [2884, "AbstractStreamWriter"], [3656, "URL"], [451, "URL"], [826, "Optional[BasicAuth]"], [851, "bool"], [5575, "Optional[Type[BaseException]]"], [381, "Optional[str]"], [369, "MappingProxyType[str, str]  "], [3279, "Connection"], [438, "CIMultiDictProxy[str]"], [2885, "AbstractStreamWriter"], [515, "bytes"], [778, "Optional[int]"], [3837, "RawHeaders"], [3551, "bytes"], [4226, "MultiDict[MultiDictProxy[Union[str, URL]]]"], [5277, "Optional[str]"], [3603, "CIMultiDictProxy[str]  "], [3770, "URL"], [2725, "Optional[BasicAuth]"], [1423, "Optional[int]  "], [2000, "Optional[LooseCookies]"], [857, "str"], [991, "Any"], [999, "Optional[BasicAuth]"], [258, "Union[SSLContext, None, bool, Fingerprint]"], [5379, "Optional[str]"], [5444, "JSONDecoder"], [1644, "Union[(http.HttpVersion, str)]"], [3597, "StreamReader  "], [2723, "Optional[URL]"], [605, "asyncio.Transport"], [1582, "URL"], [425, "str"], [2727, "Optional[LooseHeaders]"], [437, "CIMultiDictProxy[str]"], [2402, "Optional[BasicAuth]"], [5577, "Optional[BaseException]"]]
[[954, "bytes"], [382, "Optional[BaseException]"], [99, "asyncio.AbstractEventLoop"], [354, "bool"], [688, "Any"], [174, "bool"], [189, "bool"], [685, "Any"], [686, "Any"], [689, "Any"], [383, "Optional[BaseException]"], [955, "bytes"], [355, "bool"], [173, "bool"], [98, "asyncio.AbstractEventLoop"], [652, "BaseException"], [188, "bool"]]
[[481, "int"], [876, "Iterable[str]"], [1041, "int"], [650, "StrOrURL"], [872, "str"], [1206, "StrOrURL"], [704, "URL"], [944, "str"], [1046, "int"], [1045, "int"], [651, "StrOrURL"], [873, "str"], [482, "int"], [1207, "StrOrURL"], [468, "bool"], [1251, "URL"], [301, "str"], [495, "str"], [467, "bool"], [1040, "int"], [877, "Iterable[str]"]]
[[357, "BaseRunner"], [998, "List[str]"], [163, "BaseRunner"], [360, "str"], [1381, "Server"], [1322, "BaseSite"], [1441, "Application"], [1382, "Server"], [1241, "BaseSite"], [366, "int"], [587, "str"], [999, "List[str]"], [208, "str"], [1488, "Application"], [443, "str"], [733, "socket.socket"], [1440, "Application"], [588, "str"], [1287, "BaseSite"], [209, "str"], [585, "BaseRunner"], [614, "str"], [367, "int"], [164, "BaseRunner"], [734, "socket.socket"], [731, "BaseRunner"], [854, "str"], [1242, "BaseSite"], [359, "str"]]
[[1125, "List[bytes]"], [2310, "Any"], [1252, "bytes"], [1266, "istr"], [2785, "Optional[int]"], [1023, "bool"], [1624, "StreamReader"], [476, "CIMultiDict[str]"], [427, "int"], [1248, "bytes"], [469, "List[bytes]"], [1031, "bool"], [962, "int"], [1132, "Any"], [3811, "StreamReader"], [984, "Optional[int]"], [1251, "bytes"], [948, "Optional[BaseProtocol]"], [3934, "bytes"], [2812, "bool"], [2536, "Any"], [977, "Optional[BaseTimerContext]"], [1259, "bytes"], [2314, "List[bytes]"], [2802, "Optional[int]"], [436, "int"], [1005, "Optional[Type[BaseException]]"], [3815, "Optional[str]"], [956, "Optional[asyncio.AbstractEventLoop]"], [1133, "Any"], [3109, "bytes"], [1006, "Optional[Type[BaseException]]"], [999, "bool"], [949, "Optional[BaseProtocol]"], [2817, "bool"], [1032, "bool"], [978, "Optional[BaseTimerContext]"], [1022, "bool"], [3100, "bytes"], [985, "Optional[int]"], [428, "int"], [443, "int"], [2822, "bool"], [2783, "StreamReader"], [2876, "Union[StreamReader, DeflateBuffer]  "], [3108, "bytes"], [3103, "bytes"], [992, "Optional[str]"], [3361, "int"], [1119, "Any"], [437, "int"], [3812, "StreamReader"], [1249, "bytes"], [2124, "bool"], [1014, "bool"], [1282, "istr"], [3099, "bytes"], [2807, "Optional[str]"], [2108, "Optional[str]"], [955, "Optional[asyncio.AbstractEventLoop]"], [2540, "List[bytes]"], [1120, "Any"], [967, "int"], [991, "Optional[str]"], [2877, "Union[StreamReader, DeflateBuffer]  "], [972, "int"], [475, "CIMultiDict[str]"], [998, "bool"], [2790, "bool"], [1273, "str"], [3915, "BaseException"], [3936, "int"], [2796, "Optional[str]"], [2795, "Optional[str]"], [1258, "bytes"], [1283, "istr"], [1265, "istr"], [1494, "Optional[int]"], [468, "List[bytes]"], [444, "int"], [3375, "BaseException"], [2078, "List[bytes]"], [1274, "str"], [1013, "bool"]]
[[2704, "str"], [1383, "Mapping[(str, Optional[str])]"], [1230, "Any"], [4346, "Payload"], [1225, "ClientResponse"], [4405, "Payload"], [4354, "Optional[MultiMapping[str]]"], [4153, "int"], [4006, "str"], [432, "str"], [2279, "Optional[str]"], [231, "Optional[str]"], [349, "bool"], [2508, "bytes"], [330, "bool"], [2710, "str"], [4437, "Payload"], [4123, "Optional[BaseException]"], [4886, "bool"], [1528, "bool"], [1384, "Optional[MultiMapping[str]]"], [4118, "Optional[Type[BaseException]]"], [243, "str"], [4689, "Payload"], [429, "str"], [4695, "Union[(Sequence[Tuple[(str, str)]], Mapping[(str, str)])]"], [519, "Dict[str, str]"], [1226, "ClientResponse"], [5104, "str"], [4432, "Payload"], [1596, "int"], [3158, "bool"], [5033, "Any"], [747, "Optional[str]"], [4122, "Optional[BaseException]"], [2847, "BodyPartReader"], [1380, "bytes"], [2436, "bool"], [520, "Dict[str, str]"], [4126, "Optional[TracebackType]"], [2612, "bytes"], [3311, "CIMultiDictProxy[str]"], [4885, "Any"], [2607, "bytes"], [265, "bool"], [2234, "Optional[str]"], [334, "str"], [2930, "Any"], [4445, "Optional[str]  "], [2504, "bytes"], [1595, "int"], [4127, "Optional[TracebackType]"], [966, "Mapping[(str, str)]"], [4216, "str"], [301, "str"], [1549, "bytes"], [5231, "bytes"], [350, "bool"], [329, "bool"], [4649, "Optional[MultiMapping[str]]"], [266, "bool"], [4352, "Any"], [4152, "int"], [2870, "Dict[str, str]"], [4347, "Payload"], [3415, "str"], [1279, "bool"], [353, "str"], [3125, "ClientResponse"], [969, "str"], [1379, "bytes"], [4215, "str"], [2606, "bytes"], [4170, "bool"], [4007, "str"], [428, "str"], [4517, "Optional[str]  "], [4641, "Payload"], [433, "str"], [2455, "bytes"], [5062, "str"], [1697, "int"], [2711, "str"], [4433, "Payload"], [1280, "bool"], [4117, "Optional[Type[BaseException]]"], [1387, "StreamReader"], [4326, "str"], [3307, "Any"], [3118, "Any"], [3117, "Any"], [3134, "Any"], [297, "bool"], [1741, "int"], [4887, "bool"], [3027, "Mapping[(str, str)]"], [1619, "bytes"], [1229, "Any"], [4518, "Optional[str]  "], [1388, "StreamReader"], [242, "str"], [4697, "Optional[MultiMapping[str]]"], [237, "bool"], [4642, "Payload"], [3124, "ClientResponse"], [1529, "bool"], [2503, "bytes"], [269, "str"], [230, "Optional[str]"], [4690, "Payload"], [2341, "Optional[str]"], [238, "bool"], [2451, "bytes"], [298, "bool"], [4647, "Any"], [608, "BodyPartReader"], [3029, "StreamReader"], [4169, "bool"], [3306, "Any"], [3414, "str"], [968, "str"], [2703, "str"], [4013, "Optional[str]"], [2929, "Any"]]
[[187, "RequestInfo"], [483, "int"], [564, "Optional[str]"], [415, "ConnectionKey"], [603, "bytes"], [880, "Exception"], [598, "bytes"], [606, "str"], [626, "str"], [563, "Optional[str]"], [703, "Any"], [420, "OSError"], [336, "int"], [866, "Exception"], [191, "Tuple[(ClientResponse, Any)]"], [940, "str"], [515, "str"], [451, "OSError"], [300, "int"], [893, "str"], [414, "ConnectionKey"], [864, "ConnectionKey"], [464, "str"], [720, "str"], [186, "RequestInfo"], [867, "Exception"], [516, "str"], [337, "int"], [52, "bool"], [602, "bytes"], [192, "Tuple[(ClientResponse, Any)]"], [465, "str"], [419, "OSError"], [301, "int"], [608, "int"], [925, "bool"], [686, "Any"], [685, "Any"], [625, "str"], [599, "bytes"]]
[[171, "BaseProtocol"], [621, "str"], [867, "bytes"], [179, "_T_OnChunkSent"], [416, "int"], [873, "CIMultiDict[str]"], [178, "_T_OnChunkSent"], [650, "bytes"], [289, "str"], [411, "bytes"], [624, "CIMultiDict[str]"], [346, "bytes"], [175, "asyncio.AbstractEventLoop"], [256, "BaseProtocol"], [866, "bytes"], [290, "str"], [413, "bool"], [345, "bytes"], [415, "int"], [174, "asyncio.AbstractEventLoop"], [871, "str"], [625, "CIMultiDict[str]"], [620, "str"], [412, "bool"], [170, "BaseProtocol"]]
[[86, "Optional[BaseException]"], [85, "Optional[BaseException]"], [45, "asyncio.AbstractEventLoop"], [46, "asyncio.AbstractEventLoop"]]
[[203, "str"], [206, "str"], [202, "str"], [214, "str"], [207, "str"], [132, "str"], [251, "Union[(bytes, str)]"], [213, "str"], [309, "str"], [252, "Union[(bytes, str)]"], [47, "str"]]
[[1111, "str"], [554, "str"], [832, "bool"], [3017, "int"], [3548, "Optional[int]"], [860, "Optional[int]"], [1125, "bool"], [2972, "asyncio.Transport"], [1287, "bool"], [550, "int"], [1927, "int"], [3546, "bool"], [482, "Any"], [1281, "int"], [3606, "int"], [634, "bytearray"], [1112, "str"], [2968, "BaseProtocol"], [3016, "bytes"], [2209, "bytes"], [1402, "bytes"], [551, "int"], [3018, "Optional[int]"], [3607, "bytes"], [1277, "DataQueue[WSMessage]"], [1457, "bytes"], [3466, "bytes"], [3505, "bytes"], [3545, "bool"], [2208, "bytes"], [2967, "BaseProtocol"], [1282, "int"], [631, "bytes"], [2971, "asyncio.Transport"], [1115, "int"], [1126, "bool"], [555, "bytes"], [3544, "Union[(str, bytes)]"], [632, "bytes"], [828, "str"], [1120, "bool"], [481, "Any"], [635, "bytes"], [1278, "DataQueue[WSMessage]"], [833, "bool"], [829, "str"]]
[[288, "asyncio.BaseTransport"], [59, "asyncio.AbstractEventLoop"], [325, "Optional[BaseException]"], [289, "asyncio.BaseTransport"], [60, "asyncio.AbstractEventLoop"], [324, "Optional[BaseException]"]]
[[1380, "bytes"], [724, "_Signal"], [527, "_Signal"], [1319, "URL"], [649, "_Signal"], [1481, "CIMultiDict[str]"], [1654, "str"], [560, "_Signal"], [678, "_Signal"], [221, "Type[SimpleNamespace]"], [820, "bytes"], [330, "SimpleNamespace"], [785, "CIMultiDict[str]"], [1446, "CIMultiDict[str]"], [325, "SimpleNamespace"], [543, "_Signal"], [1410, "URL"], [1318, "str"], [635, "_Signal"], [694, "_Signal"], [985, "BaseException"], [1712, "str"], [759, "str"], [1411, "CIMultiDict[str]"], [589, "_Signal"], [559, "_Signal"], [1409, "str"], [1351, "bytes"], [324, "SimpleNamespace"], [664, "_Signal"], [1445, "URL"], [605, "_Signal"], [575, "_Signal"], [1302, "TraceConfig"], [918, "ClientResponse"], [329, "SimpleNamespace"], [621, "_Signal"], [1320, "CIMultiDict[str]"], [1299, "ClientSession"], [634, "_Signal"], [604, "_Signal"], [1298, "ClientSession"], [663, "_Signal"], [1479, "str"], [1303, "TraceConfig"], [1447, "BaseException"], [1480, "URL"], [512, "_Signal"], [1482, "ClientResponse"], [650, "_Signal"], [620, "_Signal"], [709, "_Signal"], [679, "_Signal"], [574, "_Signal"], [1683, "str"], [528, "_Signal"], [1183, "str"], [1741, "str"], [1444, "str"], [725, "_Signal"], [695, "_Signal"], [772, "URL"], [1305, "SimpleNamespace"], [708, "_Signal"], [1412, "ClientResponse"], [590, "_Signal"], [511, "_Signal"], [544, "_Signal"], [220, "Type[SimpleNamespace]"]]
[[310, "RequestHandler"], [309, "RequestHandler"], [168, "asyncio.Transport"], [229, "RequestHandler"], [186, "Optional[BaseException]"], [237, "asyncio.Task[None]"], [183, "RequestHandler"], [214, "BaseRequest"], [94, "_RequestHandler"], [232, "AbstractStreamWriter"], [224, "StreamReader"], [221, "RawRequestMessage"], [165, "RequestHandler"], [213, "BaseRequest"], [255, "Optional[float]"], [233, "AbstractStreamWriter"], [185, "Optional[BaseException]"], [220, "RawRequestMessage"], [95, "RequestHandler"], [256, "Optional[float]"], [225, "StreamReader"], [228, "RequestHandler"], [167, "asyncio.Transport"], [236, "asyncio.Task[None]"]]
[[578, "str"], [675, "float"], [192, "bool"], [606, "CIMultiDict[str]"], [653, "StreamResponse"], [654, "StreamResponse"], [505, "URL"], [391, "int"], [631, "str"], [480, "LooseCookies"], [353, "Request"], [504, "URL"], [538, "Optional[int]"], [182, "Application"], [651, "BaseRequest"], [607, "CIMultiDict[str]"], [545, "bytes"], [387, "str"], [482, "URL"], [483, "URL"], [553, "bytes"], [657, "float"], [627, "logging.Logger"], [632, "str"], [393, "int"], [544, "bytes"], [388, "str"], [223, "Request"], [344, "Request"], [656, "float"], [602, "str"], [222, "Request"], [672, "BaseRequest"], [577, "str"], [479, "LooseCookies"], [603, "str"], [314, "Application"], [193, "bool"], [673, "StreamResponse"], [181, "Application"], [628, "logging.Logger"], [390, "int"], [674, "float"], [394, "int"], [537, "Optional[int]"]]
[[4179, "Any"], [410, "ResponseHandler"], [4538, "List[Trace]"], [4537, "ClientRequest"], [712, "Callable[(], None)]"], [5028, "Union[(object, float)]"], [1346, "Optional[BaseException]"], [3043, "object"], [892, "bool"], [2156, "List[Trace]"], [4137, "ClientRequest"], [3935, "bool"], [3423, "bool"], [3175, "Tuple[(str, int)]"], [1404, "int"], [2995, "ClientRequest"], [4269, "ClientRequest"], [3452, "Optional[int]"], [3103, "Tuple[(str, int)]"], [1013, "Union[(object, float)]"], [3206, "bool"], [2011, "ConnectionKey"], [5020, "str"], [4182, "ClientRequest"], [1405, "int"], [5087, "List[Trace]"], [3532, "str"], [465, "str"], [4270, "List[Trace]"], [1641, "ConnectionKey"], [491, "Any"], [5088, "ClientTimeout"], [323, "Any"], [1342, "Optional[Type[BaseException]]"], [1990, "bool"], [3533, "int"], [5086, "ClientRequest"], [3013, "Optional[float]"], [405, "ConnectionKey"], [406, "ConnectionKey"], [3534, "Optional[List[Trace]]"], [3037, "bool"], [3066, "List[Dict[(str, Any)]]"], [3044, "object"], [5031, "int"], [4180, "Any"], [1644, "ResponseHandler"], [5036, "int"], [4539, "ClientTimeout"], [3883, "List[Trace]"], [4542, "Dict[str, str]"], [3422, "bool"], [3404, "int"], [3446, "Optional[str]"], [4543, "Dict[str, str]"], [1348, "Optional[TracebackType]"], [4271, "ClientTimeout"], [490, "Any"], [5041, "Optional[asyncio.AbstractEventLoop]"], [3882, "ClientRequest"], [2152, "ClientRequest"], [3065, "List[Dict[(str, Any)]]"], [3405, "int"], [4184, "Type[Exception]"], [4362, "Optional[Exception]"], [1153, "Any"], [308, "Awaitable[Any]"], [2996, "List[Trace]"], [324, "Any"], [5019, "str"], [4361, "Optional[Exception]"], [409, "ResponseHandler"], [2997, "ClientTimeout"], [514, "Any"], [464, "str"], [5072, "str"], [4007, "ClientRequest"], [402, "BaseConnector"], [1387, "int"], [3212, "Tuple[(str, int)]"], [3038, "bool"], [1386, "int"], [2779, "ResponseHandler"], [2516, "ConnectionKey"], [4272, "Type[Exception]"], [1368, "bool"], [1345, "Optional[BaseException]"], [2005, "int"], [5023, "bool"], [1465, "ClientTimeout"], [3012, "Optional[float]"], [3884, "ClientTimeout"], [4185, "Type[Exception]"], [2777, "ConnectionKey"], [3451, "Optional[int]"], [2826, "ResponseHandler"], [4188, "Any"], [893, "bool"], [2155, "List[Trace]"], [2158, "ClientTimeout"], [3207, "bool"], [3931, "SSLContext"], [3063, "Tuple[(str, int)]"], [401, "BaseConnector"], [309, "Awaitable[Any]"], [1369, "bool"], [2824, "ConnectionKey"], [413, "asyncio.AbstractEventLoop"], [2282, "ResponseHandler"], [2153, "ClientRequest"], [414, "asyncio.AbstractEventLoop"], [2006, "int"], [3936, "bool"], [1643, "ResponseHandler"], [3932, "SSLContext"], [713, "Callable[(], None)]"], [1341, "Optional[Type[BaseException]]"], [1349, "Optional[TracebackType]"], [4183, "ClientTimeout"]]
[[665, "str"], [4183, "str"], [2011, "Optional[str]"], [1720, "str"], [1714, "MimeType"], [4106, "Dict[str, Any]"], [2351, "Any"], [349, "Any"], [744, "str"], [2356, "Any"], [4143, "object"], [380, "bool"], [4016, "str"], [4010, "Any"], [1542, "Optional[asyncio.AbstractEventLoop]"], [3339, "Optional[TracebackType]"], [3725, "str"], [658, "str"], [2325, "Callable[(Any, Any)]"], [2899, "Optional[float]"], [946, "str"], [4070, "int"], [3455, "Optional[TracebackType]"], [1596, "Any"], [1719, "str"], [1013, "URL"], [2355, "Any"], [3332, "Optional[Type[BaseException]]"], [4137, "bool"], [3315, "BaseTimerContext"], [2085, "str"], [2090, "str"], [2008, "Any"], [2541, "bool"], [3683, "str"], [610, "Any"], [2548, "Pattern[str]"], [4011, "Any"], [2346, "Any"], [2352, "Any"], [3657, "Optional[str]"], [882, "URL"], [359, "bool"], [1595, "Any"], [2409, "Any"], [280, "Optional[asyncio.AbstractEventLoop]"], [2542, "bool"], [4138, "bool"], [379, "bool"], [3885, "asyncio.Future[_T]"], [2093, "bool"], [4069, "int"], [3664, "Optional[Dict[str, str]]"], [4049, "Any"], [2324, "Callable[(Any, Any)]"], [654, "str"], [2411, "Any"], [3920, "BaseException"], [659, "str"], [3338, "Optional[TracebackType]"], [4166, "bool"], [2660, "Optional[Union[(str, bytes)]]"], [2547, "Pattern[str]"], [2094, "bool"], [2695, "str"], [1691, "MultiDictProxy[str]"], [3724, "str"], [3888, "_T"], [666, "str"], [611, "Any"], [2347, "Any"], [3336, "Optional[BaseException]"], [883, "URL"], [1504, "Optional[asyncio.AbstractEventLoop]"], [745, "str"], [945, "str"], [4017, "str"], [4047, "str"], [4043, "Any"], [607, "Any"], [279, "Optional[asyncio.AbstractEventLoop]"], [3335, "Optional[BaseException]"], [2143, "Any"], [1715, "MimeType"], [2554, "Optional[Union[(str, bytes)]]"], [4167, "bool"], [2657, "bool"], [3314, "BaseTimerContext"], [608, "Any"], [358, "bool"], [1591, "bool"], [2084, "str"], [3451, "Optional[Type[BaseException]]"], [2089, "str"], [4107, "Dict[str, Any]"], [3889, "_T"], [3071, "Callable[(Any, None)]"], [3048, "Optional[float]"], [1592, "bool"], [3331, "Optional[Type[BaseException]]"], [3921, "BaseException"], [749, "str"], [3973, "Iterable[Mapping[(str, Any)]]"], [3658, "Optional[str]"], [350, "Any"], [3046, "asyncio.AbstractEventLoop"], [2553, "Optional[Union[(str, bytes)]]"], [2551, "Pattern[bytes]"], [1774, "MultiDict[str]"], [2658, "bool"], [4184, "str"], [3684, "str"], [3918, "asyncio.Future[_T]"], [3972, "Iterable[Mapping[(str, Any)]]"], [1773, "MultiDict[str]"], [2010, "Optional[str]"], [3379, "BaseTimerContext"], [4042, "Any"], [3360, "asyncio.AbstractEventLoop"], [1692, "MultiDictProxy[str]"], [3453, "Optional[BaseException]"], [3884, "asyncio.Future[_T]"], [3072, "Callable[(Any, None)]"], [2550, "Pattern[bytes]"], [3665, "Optional[Dict[str, str]]"], [655, "str"], [2694, "str"]]
[[550, "Application"], [169, "_Func"], [230, "_Middleware"], [172, "_Func"], [554, "Request"], [256, "Request"], [231, "_Middleware"], [544, "_Middleware"], [257, "_Handler"], [91, "Request"], [173, "_Func"], [551, "Application"], [94, "str"], [545, "_Middleware"], [258, "_Handler"], [555, "_Handler"], [90, "Request"], [168, "_Func"], [93, "str"]]
[[2455, "bool"], [1114, "URL"], [1183, "Any"], [1650, "str"], [614, "AbstractStreamWriter"], [613, "AbstractStreamWriter"], [3232, "str"], [3625, "StreamResponse"], [3297, "object"], [1784, "str"], [602, "RawRequestMessage"], [1072, "AbstractStreamWriter"], [2394, "StreamReader"], [618, "asyncio.Task[None]"], [1181, "str"], [812, "Dict[str, Any]"], [3549, "ChainMapProxy"], [2483, "bool"], [811, "Dict[str, Any]"], [1904, "RawHeaders"], [1804, "str"], [316, "CIMultiDictProxy[str]"], [606, "StreamReader"], [605, "StreamReader"], [1783, "str"], [2412, "bool"], [2454, "bool"], [1905, "RawHeaders"], [2190, "slice"], [1585, "str"], [1160, "str"], [1154, "Any"], [1825, "str"], [2690, "JSONDecoder"], [3382, "str"], [2395, "StreamReader"], [1929, "str"], [2484, "bool"], [1868, "str"], [2191, "slice"], [1341, "Dict[str, str]"], [3231, "str"], [315, "CIMultiDictProxy[str]"], [1613, "str"], [3291, "bool"], [1073, "AbstractStreamWriter"], [1649, "str"], [1334, "Dict[str, str]"], [2097, "bool"], [1213, "int"], [1744, "URL"], [1184, "Any"], [1199, "str"], [2689, "JSONDecoder"], [3296, "object"], [621, "asyncio.AbstractEventLoop"], [622, "asyncio.AbstractEventLoop"], [1155, "Any"], [260, "str"], [1342, "Dict[str, str]"], [2098, "bool"], [2411, "bool"], [3315, "StreamResponse"], [1248, "bool"], [3314, "StreamResponse"], [1745, "URL"], [3385, "Any"], [3290, "bool"], [1614, "str"], [1247, "bool"], [617, "asyncio.Task[None]"], [1805, "str"], [1113, "URL"], [1867, "str"], [3550, "ChainMapProxy"], [609, "RequestHandler"], [1086, "RawRequestMessage"], [1586, "str"], [1161, "str"], [2816, "MultiDict[Union[str, bytes, FileField]]"], [1826, "str"], [1930, "str"], [1212, "int"], [3384, "Any"], [610, "RequestHandler"], [601, "RawRequestMessage"], [2815, "MultiDict[Union[str, bytes, FileField]]"]]
[[793, "Union[(Application, Awaitable[Application])]"], [1248, "asyncio.AbstractEventLoop"], [832, "bool"], [1549, "List[str]"], [805, "Optional[socket.socket]"], [840, "Optional[bool]"], [797, "Optional[str]"], [816, "Optional[Callable[(Any, None)]]"], [794, "Union[(Application, Awaitable[Application])]"], [800, "Optional[int]"], [820, "int"], [1368, "Union[(Application, Awaitable[Application])]"], [796, "Optional[str]"], [912, "List[BaseSite]"], [823, "Type[AbstractAccessLogger]"], [802, "Optional[str]"], [913, "List[BaseSite]"], [822, "Type[AbstractAccessLogger]"], [830, "Optional[logging.Logger]"], [827, "str"], [812, "Optional[SSLContext]"], [841, "Optional[bool]"], [1548, "List[str]"], [837, "Optional[bool]"], [809, "float"], [828, "str"], [813, "Optional[SSLContext]"], [803, "Optional[str]"], [1249, "asyncio.AbstractEventLoop"], [799, "Optional[int]"], [831, "Optional[logging.Logger]"], [833, "bool"], [817, "Optional[Callable[(Any, None)]]"], [819, "int"], [806, "Optional[socket.socket]"], [836, "Optional[bool]"], [808, "float"]]
[[471, "str"], [2677, "int"], [368, "BaseProtocol"], [869, "bool"], [635, "BaseException"], [2536, "bytes"], [332, "ChunkTupleAsyncStreamIterator"], [2090, "int"], [2359, "bytes"], [2478, "Callable[(], None)]"], [2587, "int"], [853, "bool"], [288, "int"], [2162, "int"], [2705, "bool"], [2787, "_T"], [2360, "bytes"], [1046, "int"], [1045, "int"], [1557, "int"], [2085, "bytes"], [369, "BaseProtocol"], [946, "bytes"], [147, "Callable[(], Awaitable[_T])]"], [852, "bool"], [2516, "bool"], [716, "Callable[(], None)]"], [2552, "int"], [3049, "_T"], [203, "StreamReader"], [2084, "bytes"], [331, "ChunkTupleAsyncStreamIterator"], [1998, "List[bytes]"], [945, "bytes"], [1043, "bytes"], [1313, "str"], [1978, "int"], [2467, "BaseException"], [2604, "bytes"], [3051, "int"], [715, "Callable[(], None)]"], [398, "asyncio.AbstractEventLoop"], [634, "BaseException"], [2789, "int"], [2505, "bool"], [2538, "int"], [2744, "BaseException"], [870, "bool"], [1314, "str"], [146, "Callable[(], Awaitable[_T])]"], [2676, "int"], [3019, "BaseProtocol"], [2158, "bytes"], [470, "str"], [2364, "int"], [2693, "bool"], [204, "StreamReader"], [287, "int"], [2157, "bytes"], [1665, "List[bytes]"], [2639, "asyncio.AbstractEventLoop"]]
[[338, "AbstractAccessLogger"], [2934, "int"], [2678, "BaseRequest"], [1514, "bool"], [1642, "float"], [1174, "Any"], [1173, "Any"], [2671, "StreamResponse"], [361, "StreamResponse"], [339, "AbstractAccessLogger"], [1234, "bytes"], [2588, "float"], [2693, "Optional[str]"], [358, "BaseRequest"], [2936, "Optional[str]"], [1882, "StreamResponse"], [1001, "Optional[BaseException]"], [2672, "StreamResponse"], [359, "BaseRequest"], [1233, "bytes"], [2587, "float"], [362, "StreamResponse"], [918, "asyncio.BaseTransport"], [658, "str"], [2692, "Optional[str]"], [2680, "int"], [2935, "Optional[BaseException]"], [487, "Server"], [917, "asyncio.BaseTransport"], [2933, "AbstractStreamWriter"], [365, "float"], [1002, "Optional[BaseException]"], [2585, "BaseRequest"], [2687, "Optional[BaseException]"], [1981, "AbstractStreamWriter"], [701, "float"], [2586, "StreamResponse"], [1640, "BaseRequest"], [1515, "bool"], [2681, "int"], [715, "Optional[float]"], [364, "float"], [702, "float"], [488, "Server"], [659, "str"], [716, "Optional[float]"], [1641, "StreamResponse"]]
[[745, "BaseRequest"], [692, "Optional[str]"], [215, "int"], [309, "asyncio.Future[None]"], [218, "_T_OnChunkSent"], [206, "asyncio.AbstractEventLoop"], [699, "Optional[LooseHeaders]"], [853, "IO[Any]"], [746, "BaseRequest"], [313, "int"], [691, "Optional[str]"], [749, "int"], [310, "asyncio.Future[None]"], [354, "bool"], [698, "Optional[LooseHeaders]"], [748, "IO[Any]"], [219, "_T_OnChunkSent"], [210, "IO[Any]"], [684, "int"], [279, "bytes"], [852, "BaseRequest"], [673, "int"], [670, "Union[(str, pathlib.Path)]"], [457, "asyncio.Future[None]"], [993, "BaseRequest"], [314, "int"], [353, "bool"], [278, "bytes"], [455, "int"], [211, "IO[Any]"], [649, "bytes"], [202, "BaseProtocol"], [685, "int"], [214, "int"], [854, "int"], [203, "BaseProtocol"], [674, "int"], [669, "Union[(str, pathlib.Path)]"], [359, "int"], [207, "asyncio.AbstractEventLoop"]]
[[1000, "int"], [711, "RouteDef"], [1220, "str"], [688, "RouteDef"], [1174, "str"], [767, "_HandlerType"], [652, "_HandlerType"], [715, "str"], [1016, "bool"], [712, "RouteDef"], [393, "UrlDispatcher"], [785, "RouteDef"], [1053, "_HandlerType"], [644, "RouteDef"], [669, "str"], [739, "RouteDef"], [1245, "PathLike"], [1243, "str"], [1044, "str"], [537, "str"], [665, "RouteDef"], [1128, "str"], [811, "str"], [1147, "_Deco"], [744, "_HandlerType"], [957, "slice"], [1042, "str"], [689, "RouteDef"], [179, "UrlDispatcher"], [1082, "str"], [648, "str"], [813, "_HandlerType"], [1022, "object"], [1050, "_HandlerType"], [1151, "str"], [301, "str"], [671, "_HandlerType"], [1049, "_HandlerType"], [694, "_HandlerType"], [650, "str"], [853, "StaticDef"], [645, "RouteDef"], [834, "str"], [912, "str"], [854, "StaticDef"], [1124, "_Deco"], [692, "str"], [1216, "_Deco"], [1101, "_Deco"], [666, "RouteDef"], [1193, "_Deco"], [761, "RouteDef"], [1038, "_Deco"], [830, "RouteDef"], [790, "_HandlerType"], [1197, "str"], [742, "str"], [244, "str"], [836, "AbstractView"], [999, "int"], [497, "str"], [942, "int"], [788, "str"], [302, "str"], [936, "AbstractRouteDef"], [738, "RouteDef"], [1078, "_Deco"], [1170, "_Deco"], [180, "UrlDispatcher"], [269, "_HandlerType"], [937, "AbstractRouteDef"], [943, "int"], [257, "str"], [1017, "bool"], [807, "RouteDef"], [859, "PathLike"], [784, "RouteDef"], [765, "str"], [509, "PathLike"], [857, "str"], [762, "RouteDef"], [1023, "object"], [831, "RouteDef"], [1105, "str"], [717, "_HandlerType"], [808, "RouteDef"], [620, "UrlDispatcher"], [270, "_HandlerType"]]
[[215, "Any"], [85, "Iterable[Any]"], [86, "Iterable[Any]"], [876, "Payload"], [189, "bool"], [211, "str"], [93, "bool"], [94, "bool"], [875, "Payload"], [216, "Any"], [190, "bool"], [101, "Optional[str]"], [100, "Optional[str]"], [212, "str"]]
[[4118, "Request"], [509, "bool"], [1116, "str"], [4219, "str"], [6014, "_WebHandler"], [4582, "AbstractRuleMatching"], [6042, "str"], [6074, "_WebHandler"], [3503, "str"], [808, "Request"], [2428, "str"], [3819, "Application"], [5545, "RoutesView"], [6012, "str"], [3044, "str"], [5263, "List[AbstractResource]"], [1196, "str"], [5896, "str"], [4994, "str"], [2928, "Path"], [1155, "HTTPException"], [516, "str"], [5729, "Resource"], [6315, "Iterable[AbstractRouteDef]"], [5201, "int"], [558, "_ExpectHandler"], [3509, "Path"], [6186, "AbstractRoute"], [469, "str"], [5227, "bool"], [6068, "AbstractRoute"], [6044, "_WebHandler"], [5898, "str"], [6124, "AbstractRoute"], [6038, "AbstractRoute"], [542, "_WebHandler"], [3334, "Request"], [4419, "str"], [1556, "str"], [6132, "_WebHandler"], [537, "str"], [5391, "Request"], [6125, "AbstractRoute"], [4086, "str"], [3940, "Request"], [6130, "str"], [6225, "_WebHandler"], [6187, "AbstractRoute"], [796, "URL"], [3048, "bytes"], [3861, "str"], [6007, "AbstractRoute"], [1809, "str"], [670, "Request"], [2578, "str"], [6155, "AbstractRoute"], [1436, "Request"], [4739, "str"], [4775, "AbstractResource"], [6223, "str"], [446, "Request"], [4180, "str"], [4206, "str"], [5733, "str"], [2332, "str"], [6254, "str"], [4385, "str"], [4967, "Request"], [1330, "str"], [5928, "AbstractResource"], [5478, "int"], [419, "str"], [2371, "URL"], [1410, "ResourceRoute"], [5936, "PathLike"], [2653, "PathLike"], [4586, "Application"], [5530, "ResourcesView"], [1786, "URL"], [5584, "AbstractResource"], [1115, "str"], [1750, "bool"], [5497, "object"], [4218, "str"], [5493, "bool"], [4649, "Request"], [400, "str"], [2652, "PathLike"], [3502, "str"], [3299, "int"], [2488, "str"], [6072, "str"], [4224, "str"], [1326, "AbstractRoute"], [4381, "Request"], [2188, "str"], [1563, "int"], [2328, "bool"], [2172, "str"], [723, "str"], [5191, "List[AbstractResource]"], [5517, "str"], [972, "Application"], [3817, "str"], [5512, "AbstractResource"], [4533, "str"], [5728, "Resource"], [5233, "object"], [5401, "Set[str]"], [6218, "AbstractRoute"], [4477, "str"], [468, "str"], [765, "AbstractResource"], [3045, "str"], [971, "Application"], [4415, "bool"], [6156, "AbstractRoute"], [4795, "str"], [736, "_WebHandler"], [3134, "_WebHandler"], [1754, "str"], [2257, "str"], [6248, "AbstractRoute"], [418, "str"], [517, "str"], [1332, "Union[(AbstractView, _WebHandler)]"], [435, "URL"], [4842, "URL"], [4896, "HTTPException"], [1725, "str"], [834, "AbstractRoute"], [5318, "bool"], [6249, "AbstractRoute"], [5934, "str"], [886, "AbstractRoute"], [3172, "Request"], [5892, "AbstractRoute"], [1050, "Application"], [5546, "RoutesView"], [538, "str"], [6161, "str"], [5511, "AbstractResource"], [2814, "URL"], [829, "Dict[(str, str)]"], [6217, "AbstractRoute"], [6192, "str"], [6037, "AbstractRoute"], [3899, "URL"], [1605, "str"], [4179, "str"], [916, "HTTPException"], [5228, "bool"], [6194, "_WebHandler"], [1641, "str"], [447, "Request"], [5929, "AbstractResource"], [1439, "Set[str]"], [4038, "int"], [5322, "object"], [510, "bool"], [4583, "AbstractRuleMatching"], [4995, "str"], [5900, "Union[(_WebHandler, AbstractView)]"], [870, "_WebHandler"], [5292, "int"], [2562, "str"], [4610, "str"], [4773, "Union[(_WebHandler, AbstractView)]"], [1224, "Request"], [4548, "bool"], [6163, "_WebHandler"], [5192, "List[AbstractResource]"], [6067, "AbstractRoute"], [1564, "int"], [6008, "AbstractRoute"], [4146, "str"], [4976, "int"], [2624, "str"], [4921, "URL"], [830, "Dict[(str, str)]"], [4771, "str"], [2650, "str"], [3752, "str"], [1440, "Set[str]"], [2620, "bool"], [6256, "AbstractView"], [833, "AbstractRoute"], [541, "Union[(_WebHandler, AbstractView)]"], [899, "_ExpectHandler"], [5011, "str"], [434, "URL"], [4977, "int"], [4414, "bool"], [1184, "HTTPException"], [1905, "str"], [4552, "str"], [1679, "str"], [3049, "bytes"]]
[[1067, "Optional[float]"], [651, "bytes"], [131, "asyncio.AbstractEventLoop"], [119, "Optional[float]"], [532, "Optional[int]"], [686, "str"], [784, "Any"], [1427, "Optional[float]"], [127, "bool"], [111, "Optional[str]"], [734, "Optional[int]"], [688, "Optional[int]"], [785, "Optional[int]"], [115, "ClientResponse"], [110, "Optional[str]"], [806, "int"], [547, "bool"], [787, "JSONEncoder"], [786, "JSONEncoder"], [569, "str"], [669, "bytes"], [487, "bool"], [1479, "Optional[float]"], [1531, "JSONDecoder"], [126, "bool"], [570, "str"], [807, "int"], [107, "WebSocketWriter"], [561, "Any"], [114, "ClientResponse"], [103, "FlowControlDataQueue[WSMessage]"], [118, "float"], [123, "bool"], [685, "str"], [488, "bool"], [1534, "Optional[float]"], [102, "FlowControlDataQueue[WSMessage]"], [531, "int"], [808, "bytes"], [733, "bytes"], [546, "bool"], [1532, "JSONDecoder"], [652, "bytes"], [106, "WebSocketWriter"], [562, "Any"], [130, "asyncio.AbstractEventLoop"], [574, "Any"], [573, "Any"], [122, "bool"]]
[[96, "asyncio.Transport"], [146, "asyncio.Transport"], [97, "asyncio.Transport"], [244, "asyncio.Transport"], [52, "Optional[int]"], [159, "bool"], [160, "bool"], [157, "asyncio.Transport"], [246, "bool"], [51, "Optional[int]"]]
[[547, "float"], [537, "str"], [571, "BaseRequest"], [834, "str"], [814, "str"], [704, "float"], [215, "logging.Logger"], [904, "StreamResponse"], [696, "str"], [568, "str"], [492, "str"], [197, "Dict[str, Tuple[str, List[KeyMethod]]]"], [700, "BaseRequest"], [538, "str"], [616, "str"], [488, "str"], [674, "BaseRequest"], [797, "StreamResponse"], [795, "BaseRequest"], [761, "float"], [821, "float"], [864, "BaseRequest"], [819, "StreamResponse"], [697, "str"], [754, "int"], [773, "int"], [839, "StreamResponse"], [868, "float"], [198, "Dict[str, Tuple[str, List[KeyMethod]]]"], [543, "BaseRequest"], [617, "str"], [503, "float"], [678, "float"], [776, "BaseRequest"], [702, "StreamResponse"], [573, "StreamResponse"], [780, "float"], [757, "BaseRequest"], [676, "StreamResponse"], [791, "str"], [841, "float"], [778, "StreamResponse"], [502, "float"], [575, "float"], [813, "str"], [494, "BaseRequest"], [286, "str"], [670, "str"], [772, "int"], [214, "logging.Logger"], [218, "str"], [759, "StreamResponse"], [541, "str"], [495, "BaseRequest"], [491, "str"], [866, "StreamResponse"], [567, "str"], [499, "StreamResponse"], [620, "BaseRequest"], [833, "str"], [792, "str"], [671, "str"], [799, "float"], [622, "StreamResponse"], [906, "float"], [219, "str"], [498, "StreamResponse"], [487, "str"], [545, "StreamResponse"], [624, "float"], [753, "int"], [817, "BaseRequest"], [837, "BaseRequest"], [902, "BaseRequest"]]
[[3739, "StrOrURL"], [4073, "Optional[Type[BaseException]]"], [1168, "str"], [2687, "Optional[StrOrURL]"], [1194, "str"], [4060, "Optional[TracebackType]"], [1172, "StrOrURL"], [1226, "Optional[str]"], [3673, "StrOrURL"], [1229, "Optional[bool]"], [3930, "bool"], [4061, "Optional[TracebackType]"], [4258, "Optional[TracebackType]"], [2683, "Optional[str]"], [1245, "Optional[StrOrURL]"], [1057, "Any"], [4256, "Optional[BaseException]"], [1200, "Optional[Mapping[(str, str)]]"], [4319, "Coroutine[(asyncio.Future[Any], None)]"], [1205, "Any"], [3848, "bool"], [1217, "Optional[BasicAuth]"], [2667, "Iterable[str]"], [1248, "Optional[BasicAuth]"], [4351, "Optional[BaseException]"], [3898, "AbstractCookieJar"], [4259, "Optional[TracebackType]"], [1227, "Optional[str]"], [1256, "Optional[LooseHeaders]"], [1233, "bool"], [2689, "Union[(SSLContext, bool)]"], [2670, "Optional[float]"], [2666, "Iterable[str]"], [1021, "Type[ClientSession]"], [1250, "Union[(ClientTimeout, object)]"], [2680, "Optional[float]"], [1258, "Optional[SimpleNamespace]"], [1202, "Any"], [4388, "str"], [4280, "Optional[Type[BaseException]]"], [2693, "int"], [3378, "FlowControlDataQueue[WSMessage]  "], [1020, "Type[ClientSession]"], [4386, "_SessionRequestContextManager"], [2664, "StrOrURL"], [2674, "bool"], [2676, "bool"], [1257, "Optional[SimpleNamespace]"], [3640, "StrOrURL"], [3849, "bool"], [4053, "Optional[Type[BaseException]]"], [4120, "Coroutine[(asyncio.Future[Any], None)]"], [3471, "Optional[LooseHeaders]"], [2677, "bool"], [3517, "Set[str]"], [1255, "Optional[LooseHeaders]"], [4058, "Optional[BaseException]"], [1208, "Optional[LooseCookies]"], [1220, "bool"], [4257, "Optional[BaseException]"], [933, "Optional[LooseHeaders]"], [4282, "Optional[TracebackType]"], [4390, "StrOrURL"], [4255, "Optional[Type[BaseException]]"], [1223, "int"], [3574, "StrOrURL"], [1240, "bool"], [1537, "ClientTimeout"], [1212, "Optional[Iterable[str]]"], [2688, "Optional[BasicAuth]"], [1203, "Any"], [4321, "ClientSession"], [4281, "Optional[BaseException]"], [2690, "Optional[LooseHeaders]"], [3957, "bool"], [1235, "Optional[bool]"], [1230, "Optional[bool]"], [4057, "Optional[BaseException]"], [1195, "StrOrURL"], [1199, "Optional[Mapping[(str, str)]]"], [2684, "Optional[str]"], [2682, "Optional[BasicAuth]"], [2686, "Optional[LooseHeaders]"], [4322, "ClientSession"], [4052, "Optional[Type[BaseException]]"], [2673, "bool"], [1252, "Optional[Union[(SSLContext, bool)]]"], [2669, "float"], [1244, "Optional[StrOrURL]"], [1241, "bool"], [1249, "Union[(ClientTimeout, object)]"], [1247, "Optional[BasicAuth]"], [2692, "int"], [3607, "StrOrURL"], [1253, "Optional[Union[(SSLContext, bool)]]"], [3931, "bool"], [2750, "CIMultiDict[str]"], [1219, "bool"], [3772, "StrOrURL"], [1171, "StrOrURL"], [1538, "ClientTimeout"], [2671, "Optional[float]"], [4159, "BaseException"], [1162, "_SessionRequestContextManager"], [2679, "Optional[float]"], [1213, "Optional[Iterable[str]]"], [3706, "StrOrURL"], [1211, "LooseHeaders"], [2749, "CIMultiDict[str]"], [3516, "Set[str]"], [3956, "bool"], [1056, "Any"], [757, "AbstractCookieJar"], [2614, "StrOrURL"], [2691, "int"], [1196, "StrOrURL"], [1216, "Optional[BasicAuth]"], [1209, "Optional[LooseCookies]"], [1206, "Any"], [2665, "str"], [4136, "None"], [4350, "Optional[Type[BaseException]]"], [4075, "Optional[TracebackType]"], [4074, "Optional[BaseException]"], [3379, "FlowControlDataQueue[WSMessage]  "], [1224, "int"], [1236, "Optional[bool]"], [4135, "None"], [4119, "Coroutine[(asyncio.Future[Any], None)]"], [1232, "bool"], [1167, "str"], [4352, "Optional[TracebackType]"]]
[[314, "Tuple[str, ...]"], [313, "Tuple[str, ...]"]]
[[1042, "int"], [800, "asyncio.Future[bool]"], [1215, "str"], [1045, "FrameType"], [1082, "FrameType"], [1041, "int"], [1223, "str"], [1216, "str"], [764, "asyncio.Future[bool]"], [1080, "int"], [1224, "str"], [1123, "Any"], [1122, "Any"], [1046, "FrameType"]]
[[184, "str"], [183, "str"], [202, "Mapping[int, Tuple[str, str]]  "], [203, "Mapping[int, Tuple[str, str]]  "]]
[[2090, "_LOOP_FACTORY"], [1525, "_WSRequestContextManager"], [1738, "Application"], [1243, "URL"], [704, "bool"], [2852, "Any"], [889, "Optional[Type[BaseException]]"], [2453, "Any"], [2843, "Any"], [1737, "Application"], [2449, "str"], [2868, "Any"], [349, "Any"], [985, "Any"], [2393, "Optional[SSLContext]"], [277, "int"], [627, "URL"], [1678, "Optional[BaseException]"], [724, "bool"], [1942, "TestServer"], [387, "Any"], [2306, "Any"], [2312, "str"], [983, "bool"], [1262, "str"], [1463, "_RequestContextManager"], [1959, "Any"], [240, "int"], [1964, "Any"], [1462, "_RequestContextManager"], [1431, "_RequestContextManager"], [219, "str"], [857, "Optional[Type[BaseException]]"], [1927, "Application"], [937, "Any"], [1265, "str"], [1551, "str"], [1992, "Any"], [862, "Optional[BaseException]"], [1531, "str"], [384, "Optional[asyncio.AbstractEventLoop]"], [2330, "Any"], [2848, "Any"], [1204, "Application"], [1958, "Any"], [2853, "Any"], [1963, "Any"], [1988, "Any"], [1375, "str"], [1406, "str"], [865, "Optional[TracebackType]"], [1682, "Optional[TracebackType]"], [1702, "Optional[BaseException]"], [891, "Optional[TracebackType]"], [2307, "Any"], [1432, "_RequestContextManager"], [2844, "Any"], [2332, "str"], [513, "BaseTestServer"], [703, "bool"], [1313, "str"], [1401, "_RequestContextManager"], [2445, "Any"], [958, "_RequestHandler"], [1344, "str"], [890, "Optional[BaseException]"], [1191, "BaseTestServer"], [1679, "Optional[BaseException]"], [1308, "_RequestContextManager"], [866, "Optional[TracebackType]"], [1369, "_RequestContextManager"], [1524, "_WSRequestContextManager"], [1701, "Optional[Type[BaseException]]"], [634, "str"], [2220, "asyncio.AbstractEventLoop"], [1552, "Any"], [2418, "str"], [856, "Optional[Type[BaseException]]"], [1159, "str"], [621, "Any"], [1247, "str"], [1266, "Any"], [861, "Optional[BaseException]"], [2049, "_LOOP_FACTORY"], [2444, "Any"], [1494, "_RequestContextManager"], [1989, "Any"], [2313, "str"], [1493, "_RequestContextManager"], [1263, "str"], [1437, "str"], [239, "int"], [739, "Server"], [1468, "str"], [1676, "Optional[Type[BaseException]]"], [1499, "str"], [1036, "BaseTestServer"], [2310, "Any"], [912, "Application"], [1681, "Optional[TracebackType]"], [220, "str"], [2222, "bool"], [2847, "Any"], [2335, "Any"], [237, "str"], [2392, "Optional[SSLContext]"], [2454, "Any"], [2057, "bool"], [725, "bool"], [1227, "ClientSession"], [278, "int"], [626, "URL"], [2869, "Any"], [911, "Application"], [1226, "ClientSession"], [2050, "_LOOP_FACTORY"], [1309, "_RequestContextManager"], [1370, "_RequestContextManager"], [2334, "Any"], [1339, "_RequestContextManager"], [1400, "_RequestContextManager"], [633, "str"], [2451, "str"], [388, "Any"], [2058, "bool"], [982, "bool"], [1338, "_RequestContextManager"], [1703, "Optional[TracebackType]"], [740, "Server"], [385, "Optional[asyncio.AbstractEventLoop]"]]
[[43, "str"], [57, "Predictor"], [58, "Predictor"], [39, "str"], [44, "str"], [38, "str"]]
[[537, "Model"], [430, "str"], [421, "str"], [426, "str"], [438, "bool"], [142, "argparse._SubParsersAction"], [431, "str"], [422, "str"], [462, "str"], [453, "str"], [360, "argparse.Namespace"], [411, "Model"], [539, "Model"], [416, "str"], [544, "str"], [542, "Params"], [556, "str"], [463, "str"], [454, "str"], [486, "Params"], [437, "bool"], [445, "bool"], [412, "Model"], [540, "Model"], [417, "str"], [137, "str"], [561, "Dict[(str, str)]"], [546, "bool"], [138, "str"], [536, "Model"], [499, "Dict[(str, str)]"], [498, "Dict[(str, str)]"], [551, "bool"], [425, "str"], [446, "bool"], [141, "argparse._SubParsersAction"], [359, "argparse.Namespace"]]
[[505, "Dict[(str, str)]"], [98, "argparse._SubParsersAction"], [504, "Dict[(str, str)]"], [326, "argparse.Namespace"], [94, "str"], [97, "argparse._SubParsersAction"], [325, "argparse.Namespace"], [93, "str"]]
[[651, "str"], [410, "Optional[str]"], [417, "bool"], [647, "str"], [405, "str"], [567, "List[Instance]"], [422, "bool"], [643, "int"], [340, "argparse.Namespace"], [416, "bool"], [406, "str"], [490, "List[JsonDict]"], [89, "argparse._SubParsersAction"], [84, "str"], [336, "Predictor"], [411, "Optional[str]"], [181, "int"], [402, "Predictor"], [341, "argparse.Namespace"], [414, "int"], [403, "Predictor"], [642, "int"], [85, "str"], [489, "List[JsonDict]"], [88, "argparse._SubParsersAction"], [1039, "argparse.Namespace"], [650, "str"], [423, "bool"], [335, "Predictor"], [646, "str"]]
[[1373, "List[float]"], [1110, "List[float]"], [1016, "float"], [442, "Params"], [382, "Params"], [1460, "str"], [994, "Trainer"], [1001, "float"], [996, "float"], [458, "float"], [464, "int"], [1374, "List[float]"], [146, "argparse._SubParsersAction"], [1461, "str"], [1378, "float"], [489, "bool"], [893, "Trainer"], [1006, "int"], [1456, "List[float]"], [1011, "bool"], [457, "float"], [372, "argparse.Namespace"], [473, "bool"], [961, "List[float]"], [1377, "float"], [481, "float"], [488, "bool"], [465, "int"], [450, "float"], [472, "bool"], [147, "argparse._SubParsersAction"], [142, "str"], [480, "float"], [444, "str"], [373, "argparse.Namespace"], [1458, "List[float]"], [449, "float"], [143, "str"], [445, "str"]]
[[936, "Iterable[List[str]]"], [595, "List[List[str]]"], [939, "int"], [997, "bool"], [512, "str"], [938, "int"], [176, "str"], [991, "bool"], [935, "Iterable[List[str]]"], [181, "argparse._SubParsersAction"], [177, "str"], [980, "str"], [758, "List[str]"], [757, "List[str]"], [976, "str"], [973, "IO"], [787, "List[List[str]]"], [511, "str"], [180, "argparse._SubParsersAction"], [981, "str"], [990, "bool"], [977, "str"], [596, "List[List[str]]"], [987, "int"], [972, "IO"], [998, "bool"], [517, "str"], [523, "int"], [522, "int"], [518, "str"]]
[[172, "argparse.Namespace"], [60, "str"], [171, "argparse.Namespace"], [65, "argparse._SubParsersAction"], [64, "argparse._SubParsersAction"], [61, "str"]]
[[29, "argparse._SubParsersAction"], [25, "str"], [24, "str"], [28, "argparse._SubParsersAction"]]
[[101, "argparse._SubParsersAction"], [98, "str"], [102, "argparse._SubParsersAction"], [270, "str"], [229, "str"], [210, "argparse.Namespace"], [97, "str"], [248, "Params"], [209, "argparse.Namespace"], [268, "Params"]]
[[140, "argparse.Namespace"], [51, "argparse._SubParsersAction"], [141, "argparse.Namespace"], [46, "str"], [50, "argparse._SubParsersAction"], [47, "str"]]
[[395, "str"], [409, "bool"], [118, "str"], [485, "bool"], [384, "str"], [417, "bool"], [431, "str"], [445, "Params"], [401, "bool"], [471, "Params"], [432, "str"], [380, "Model"], [416, "bool"], [385, "str"], [122, "argparse._SubParsersAction"], [423, "str"], [381, "Model"], [468, "Model"], [473, "str"], [490, "str"], [336, "argparse.Namespace"], [469, "Model"], [424, "str"], [495, "str"], [121, "argparse._SubParsersAction"], [410, "bool"], [389, "str"], [394, "str"], [480, "bool"], [475, "bool"], [337, "argparse.Namespace"], [402, "bool"], [117, "str"], [390, "str"]]
[[56, "argparse._SubParsersAction"], [176, "argparse.Namespace"], [177, "argparse.Namespace"], [53, "str"], [57, "argparse._SubParsersAction"], [52, "str"]]
[[315, "Dict[(str, Subcommand)]"], [316, "Dict[(str, Subcommand)]"], [309, "str"], [308, "str"]]
[[83, "argparse._SubParsersAction"], [78, "str"], [229, "Params"], [249, "Params"], [190, "argparse.Namespace"], [251, "str"], [219, "str"], [82, "argparse._SubParsersAction"], [191, "argparse.Namespace"], [79, "str"]]
[[544, "int"], [545, "int"], [70, "World"], [542, "List[str]"], [541, "List[str]"], [71, "World"], [470, "str"], [75, "int"], [469, "str"], [74, "int"], [795, "int"]]
[[15, "str"], [73, "List"], [9, "List"], [16, "str"], [26, "List"], [25, "List"], [74, "List"], [8, "List"], [34, "List"], [35, "List"]]
[[144, "bool"], [550, "bool"], [152, "bool"], [137, "Cursor"], [558, "str"], [160, "bool"], [153, "bool"], [269, "Dict[(str, Dict[(str, str)])]"], [557, "str"], [549, "bool"], [268, "Dict[(str, Dict[(str, str)])]"], [132, "str"], [261, "List[str]"], [161, "bool"], [262, "List[str]"], [459, "Dict[(str, List[str])]"], [458, "Dict[(str, List[str])]"], [131, "str"], [143, "bool"], [136, "Cursor"]]
[[1270, "int"], [245, "int"], [246, "int"], [857, "List"], [227, "str"], [341, "bool"], [226, "str"], [75, "KnowledgeGraph"], [334, "str"], [1276, "str"], [339, "str"], [853, "List"], [856, "List"], [1271, "int"], [84, "List[Dict[(str, int)]]"], [845, "bool"], [79, "str"], [220, "bool"], [852, "List"], [1277, "str"], [80, "str"], [83, "List[Dict[(str, int)]]"], [74, "KnowledgeGraph"], [846, "bool"], [219, "bool"], [333, "str"], [342, "bool"], [338, "str"]]
[[1782, "Dict[(str, List[int])]"], [412, "Tokenizer"], [1771, "List[Token]"], [1781, "Dict[(str, List[int])]"], [1362, "Dict[(str, Tuple[(str, str)])]"], [1773, "str"], [2285, "str"], [1363, "Dict[(str, Tuple[(str, str)])]"], [1951, "Dict[(str, Dict[(str, Tuple[(str, str)])])]"], [1246, "str"], [1297, "str"], [1950, "Dict[(str, Dict[(str, Tuple[(str, str)])])]"], [408, "List[str]"], [110, "List[Token]"], [1965, "Dict[(str, Tuple[(str, str)])]"], [1247, "str"], [2097, "Dict[(str, List[int])]"], [1124, "str"], [119, "Dict[(str, List[int])]"], [109, "List[Token]"], [1294, "List[Expression]"], [1765, "Dict[(str, Tuple[(str, str)])]"], [1298, "str"], [409, "List[str]"], [1284, "Sequence"], [1239, "Grammar"], [1828, "List[str]"], [120, "Dict[(str, List[int])]"], [1761, "Set[str]"], [1768, "Callable[([str, List[Token]], Dict[(str, List[int])])]"], [1188, "Grammar"], [2533, "str"], [1125, "str"], [1240, "Grammar"], [1366, "List[Token]"], [1285, "Sequence"], [1767, "Callable[([str, List[Token]], Dict[(str, List[int])])]"], [544, "Grammar"], [1829, "List[str]"], [1762, "Set[str]"], [1242, "str"], [2098, "Dict[(str, List[int])]"], [1295, "List[Expression]"], [1186, "str"], [413, "Tokenizer"], [1243, "str"], [1958, "Dict[(str, Tuple[(str, str)])]"], [2284, "str"], [1365, "List[Token]"]]
[[642, "str"], [727, "str"], [307, "bool"], [644, "Callable[([str], bool)]"], [385, "Dict[(str, List[str])]"], [645, "Callable[([str], bool)]"], [641, "str"], [736, "bool"], [728, "str"], [639, "Dict[(str, List[str])]"], [112, "TableQuestionKnowledgeGraph"], [111, "TableQuestionKnowledgeGraph"], [315, "str"], [737, "bool"], [734, "str"], [308, "bool"], [314, "str"], [733, "str"]]
[[1305, "str"], [1083, "List[str]"], [2253, "Type"], [481, "int"], [488, "int"], [471, "int"], [1310, "List[str]"], [526, "List[Tuple[(str, List[str])]]"], [2254, "Type"], [119, "Dict[(str, Type)]"], [126, "Dict[(str, str)]"], [525, "List[Tuple[(str, List[str])]]"], [1448, "bool"], [1313, "bool"], [1274, "Expression"], [1133, "bool"], [472, "int"], [135, "int"], [1830, "str"], [2219, "str"], [1326, "List[List[str]]"], [1968, "str"], [110, "Dict[(str, BasicType)]"], [467, "str"], [2250, "str"], [1309, "List[str]"], [1312, "bool"], [1442, "Tree"], [489, "int"], [109, "Dict[(str, BasicType)]"], [1132, "bool"], [118, "Dict[(str, Type)]"], [1129, "str"], [1084, "List[str]"], [333, "bool"], [2220, "str"], [1446, "List[List[str]]"], [2225, "str"], [1231, "str"], [1969, "str"], [340, "str"], [468, "str"], [2229, "bool"], [2283, "Expression"], [2251, "str"], [1130, "str"], [1443, "Tree"], [1822, "int"], [2226, "str"], [1275, "Expression"], [2228, "bool"], [341, "str"], [1121, "Expression"], [2285, "List[str]"], [480, "int"], [334, "bool"], [1304, "str"], [127, "Dict[(str, str)]"], [1821, "int"], [1122, "Expression"], [134, "int"], [2286, "List[str]"], [2248, "str"]]
[[109, "int"], [238, "str"], [122, "List[str]"], [389, "str"], [232, "int"], [233, "int"], [118, "str"], [241, "List[str]"], [388, "str"], [71, "str"], [121, "List[str]"], [117, "str"], [72, "str"], [239, "str"], [110, "int"]]
[[187, "bool"], [196, "str"], [199, "str"], [149, "str"], [195, "str"], [198, "str"], [188, "bool"], [148, "str"]]
[[873, "Type"], [786, "Type"], [121, "Type"], [785, "Type"], [85, "Type"], [398, "BasicType"], [237, "Type"], [869, "Type"], [443, "Type"], [120, "Type"], [729, "Set[BasicType]"], [245, "Type"], [84, "Type"], [809, "Type"], [394, "BasicType"], [236, "Type"], [714, "Type"], [272, "Set[BasicType]"], [81, "Type"], [244, "Type"], [813, "Type"], [271, "Set[BasicType]"], [885, "Set[BasicType]"], [393, "BasicType"], [710, "Type"], [115, "Type"], [80, "Type"], [397, "BasicType"]]
[[29, "str"], [28, "str"]]
[[1129, "Type"], [2212, "List[Tuple[(Type, str)]]"], [2614, "bool"], [2273, "Dict[(Type, List[Type])]"], [1298, "Expression"], [877, "Set[BasicType]"], [944, "Set[BasicType]"], [1988, "Type"], [477, "List[BasicType]"], [2085, "Dict[(Type, List[Type])]"], [2286, "int"], [2271, "Set[Type]"], [2278, "Set[Type]"], [1987, "Type"], [1555, "Dict[(str, BasicType)]"], [741, "str"], [1953, "str"], [270, "Type"], [91, "Type"], [2019, "Set[BasicType]"], [734, "Set[BasicType]"], [865, "Type"], [1863, "Type"], [576, "Type"], [603, "bool"], [575, "Type"], [568, "Type"], [1299, "Expression"], [983, "Type"], [2059, "str"], [2082, "ComplexType"], [195, "Set[BasicType]"], [2300, "Dict[(str, Set[str])]"], [626, "bool"], [861, "Type"], [733, "Set[BasicType]"], [1145, "Set[BasicType]"], [2285, "int"], [1861, "str"], [1788, "str"], [591, "Set[BasicType]"], [1866, "str"], [1125, "Type"], [544, "str"], [2083, "ComplexType"], [2266, "Dict[(str, str)]"], [2067, "Union[(List[Type], Type)]"], [2064, "Type"], [2063, "Type"], [2086, "Dict[(Type, List[Type])]"], [1306, "Set[str]"], [502, "bool"], [569, "Type"], [90, "Type"], [1556, "Dict[(str, BasicType)]"], [2620, "str"], [558, "Type"], [274, "Type"], [1957, "str"], [1303, "Expression"], [476, "List[BasicType]"], [2267, "Dict[(str, str)]"], [1780, "bool"], [273, "Type"], [1563, "Dict[(str, Type)]"], [602, "bool"], [1655, "str"], [740, "str"], [1952, "str"], [949, "str"], [1305, "Set[str]"], [295, "Type"], [196, "Set[BasicType]"], [508, "Type"], [2615, "bool"], [543, "str"], [1241, "Type"], [1410, "Type"], [266, "int"], [2269, "Dict[(str, Type)]"], [1548, "bool"], [1865, "str"], [730, "BasicType"], [2060, "str"], [1212, "Type"], [941, "BasicType"], [2211, "List[Tuple[(Type, str)]]"], [2279, "Set[Type]"], [1789, "str"], [729, "BasicType"], [269, "Type"], [1779, "bool"], [1302, "Expression"], [265, "int"], [2068, "Union[(List[Type], Type)]"], [2619, "str"], [2299, "Dict[(str, Set[str])]"], [2017, "Type"], [1564, "Dict[(str, Type)]"], [1213, "Type"], [1549, "bool"], [1992, "str"]]
[[787, "QuaRelType"], [116, "QuaRelType"], [48, "int"], [557, "QuaRelType"], [86, "Direction"], [601, "QuaRelType"], [89, "World"], [550, "QuaRelType"], [780, "QuaRelType"], [32, "str"], [49, "int"], [591, "bool"], [554, "QuaRelType"], [549, "QuaRelType"], [110, "str"], [81, "Property"], [784, "QuaRelType"], [779, "QuaRelType"], [120, "Direction"], [553, "QuaRelType"], [90, "World"], [111, "str"], [85, "Direction"], [65, "int"], [599, "QuaRelType"], [558, "QuaRelType"], [80, "Property"], [788, "QuaRelType"], [31, "str"], [783, "QuaRelType"], [117, "QuaRelType"], [774, "int"], [773, "int"], [592, "bool"], [122, "World"]]
[[1548, "Set[Box]"], [4836, "Dict[(str, Set[Object])]"], [4574, "Object"], [3379, "bool"], [3318, "int"], [3625, "Set[Box]"], [2713, "bool"], [2666, "bool"], [1996, "Set[Object]"], [4220, "Set[Box]"], [3520, "Set[Object]"], [3522, "int"], [1519, "bool"], [2719, "Set[Box]"], [3209, "bool"], [4255, "Set[Box]"], [3413, "bool"], [3662, "int"], [3488, "int"], [4082, "int"], [448, "Set[Box]"], [3870, "Set[Box]"], [4549, "Set[Object]"], [4577, "Object"], [2976, "bool"], [3214, "Set[Object]"], [2838, "bool"], [658, "str"], [1524, "Set[Object]"], [4777, "Dict[(Box, List[Object])]"], [4395, "Set[Box]"], [285, "List[JsonDict]"], [3418, "Set[Object]"], [3452, "Set[Object]"], [3102, "Set[Object]"], [2764, "Set[Box]"], [2982, "Shape"], [3031, "bool"], [4567, "bool"], [3284, "int"], [2808, "Set[Object]"], [1272, "str"], [1497, "bool"], [434, "str"], [3380, "bool"], [2782, "bool"], [4185, "Set[Box]"], [3312, "bool"], [284, "List[JsonDict]"], [3036, "Set[Object]"], [3482, "bool"], [3250, "int"], [3060, "int"], [1502, "Set[Box]"], [435, "Shape"], [1555, "Set[Object]"], [3278, "bool"], [2743, "int"], [3767, "int"], [3802, "int"], [3210, "bool"], [2843, "Set[Object]"], [426, "Color"], [4010, "Set[Box]"], [3009, "bool"], [3282, "Set[Object]"], [4430, "Set[Box]"], [3082, "int"], [2872, "bool"], [2338, "Set[Object]"], [4222, "Color"], [3420, "int"], [3627, "int"], [3053, "bool"], [4835, "Dict[(str, Set[Object])]"], [3120, "bool"], [2845, "Color"], [3243, "bool"], [4045, "Set[Box]"], [2878, "Set[Object]"], [3447, "bool"], [3872, "int"], [2946, "Set[Object]"], [2980, "Set[Object]"], [2880, "Color"], [4292, "Shape"], [3555, "Set[Box]"], [4538, "Callable[([Set[Object]], Set[Object])]"], [2788, "int"], [3075, "bool"], [1686, "Set[Object]"], [3277, "bool"], [447, "Set[Box]"], [2665, "bool"], [4012, "int"], [3182, "int"], [2810, "Color"], [4578, "Object"], [4047, "int"], [3975, "Set[Box]"], [289, "int"], [2914, "Shape"], [3054, "bool"], [2247, "Set[Object]"], [2410, "Set[Object]"], [1817, "Set[Object]"], [3386, "int"], [3590, "Set[Box]"], [3837, "int"], [1920, "Set[Object]"], [4327, "Shape"], [4769, "Set[Object]"], [3942, "int"], [3557, "int"], [1525, "Set[Object]"], [3098, "bool"], [2320, "Set[Object]"], [2741, "Set[Box]"], [3765, "Set[Box]"], [3907, "int"], [4826, "Callable[([Object], str)]"], [3016, "int"], [55, "JsonDict"], [3146, "Set[Object]"], [1785, "Set[Object]"], [60, "str"], [659, "str"], [2638, "Set[Object]"], [4257, "Color"], [2912, "Set[Object]"], [3216, "int"], [2873, "bool"], [3697, "int"], [3244, "bool"], [3346, "bool"], [4152, "int"], [4466, "Set[Box]"], [56, "JsonDict"], [3142, "bool"], [3905, "Set[Box]"], [3076, "bool"], [2786, "Set[Box]"], [3481, "bool"], [2696, "Set[Box]"], [3515, "bool"], [4362, "Shape"], [3038, "int"], [2804, "bool"], [3940, "Set[Box]"], [3311, "bool"], [2736, "bool"], [3730, "Set[Box]"], [4150, "Set[Box]"], [1887, "Set[Object]"], [2050, "Set[Object]"], [2155, "Dict[(Box, List[Object])]"], [3014, "Set[Object]"], [4117, "int"], [1849, "Set[Object]"], [3454, "int"], [4080, "Set[Box]"], [3316, "Set[Object]"], [2675, "int"], [3350, "Set[Object]"], [2691, "bool"], [2942, "bool"], [1719, "Set[Object]"], [4539, "Callable[([Set[Object]], Set[Object])]"], [4573, "Object"], [2721, "int"], [1587, "Set[Object]"], [3977, "int"], [2572, "Set[Object]"], [2491, "Set[Object]"], [3176, "bool"], [1653, "Set[Object]"], [3119, "bool"], [3352, "int"], [1520, "bool"], [2714, "bool"], [1549, "Set[Box]"], [3516, "bool"], [2045, "Set[Object]"], [2975, "bool"], [4290, "Set[Box]"], [2907, "bool"], [3180, "Set[Object]"], [3414, "bool"], [3124, "Set[Object]"], [3800, "Set[Box]"], [2758, "bool"], [2737, "bool"], [2690, "bool"], [3732, "int"], [2941, "bool"], [3384, "Set[Object]"], [4187, "Color"], [3097, "bool"], [3695, "Set[Box]"], [4360, "Set[Box]"], [2229, "Set[Object]"], [2766, "int"], [3104, "int"], [4827, "Callable[([Object], str)]"], [2674, "int"], [3345, "bool"], [2781, "bool"], [3835, "Set[Box]"], [3592, "int"], [3141, "bool"], [3175, "bool"], [1554, "Set[Object]"], [2672, "Set[Box]"], [2908, "bool"], [3486, "Set[Object]"], [3660, "Set[Box]"], [3248, "Set[Object]"], [3448, "bool"], [2146, "Set[Object]"], [3010, "bool"], [2803, "bool"], [4501, "Set[Box]"], [3126, "int"], [1991, "Set[Object]"], [59, "str"], [2605, "Set[Object]"], [2759, "bool"], [3058, "Set[Object]"], [1953, "Set[Object]"], [1620, "Set[Object]"], [3080, "Set[Object]"], [3148, "int"], [2837, "bool"], [1496, "bool"], [3032, "bool"], [4568, "bool"], [2948, "Shape"], [1752, "Set[Object]"], [4824, "Set[Object]"], [425, "str"], [4325, "Set[Box]"], [2698, "int"], [4115, "Set[Box]"]]
[[2402, "NumberColumn"], [3921, "List[Row]"], [4142, "StringColumn"], [3852, "Date"], [4842, "Number"], [2206, "List[str]"], [1917, "List[str]"], [3378, "Number"], [2476, "DateColumn"], [4482, "Date"], [2931, "Number"], [4067, "List[Row]"], [3020, "Number"], [3777, "DateColumn"], [4794, "NumberColumn"], [3180, "List[Row]"], [3650, "NumberColumn"], [5106, "int"], [4069, "DateColumn"], [3182, "ComparableColumn"], [3857, "List[Tuple[(Date, Row)]]"], [2648, "Number"], [3597, "Number"], [5110, "Row"], [2203, "str"], [4488, "List[Row]"], [4743, "NumberColumn"], [4586, "List[Row]"], [3998, "Date"], [2641, "Number"], [4855, "NumberColumn"], [4843, "Number"], [161, "TableQuestionContext"], [4490, "DateColumn"], [5111, "Row"], [4144, "List[str]"], [2565, "List[Row]"], [2348, "List[Row]"], [3384, "List[Tuple[(Date, Row)]]"], [3485, "List[Row]"], [1779, "Dict[(str, str)]"], [4663, "List[Row]"], [5170, "List[Row]"], [3375, "NumberColumn"], [4582, "Number"], [3434, "Number"], [4848, "List[Row]"], [3282, "ComparableColumn"], [3489, "Number"], [4736, "Number"], [4588, "NumberColumn"], [4383, "Date"], [2396, "Number"], [2195, "bool"], [106, "Dict[(str, CellValueType)]"], [1926, "List[str]"], [3848, "List[Row]"], [4852, "List[Row]"], [2843, "List[Row]"], [5178, "Dict[(CellValueType, int)]"], [2955, "StringColumn"], [4382, "Date"], [2411, "List[float]"], [3706, "Date"], [3923, "DateColumn"], [2059, "Set[str]"], [2718, "List[Row]"], [4996, "str"], [754, "Column"], [4076, "List[Tuple[(Date, Row)]]"], [4792, "List[Row]"], [2640, "Number"], [2410, "List[float]"], [2768, "List[Row]"], [3280, "List[Row]"], [4145, "List[str]"], [2635, "Date"], [117, "str"], [2196, "bool"], [2400, "List[Row]"], [3996, "DateColumn"], [3539, "List[Row]"], [4665, "NumberColumn"], [2350, "StringColumn"], [3775, "List[Row]"], [4658, "Number"], [2672, "List[Row]"], [3087, "Date"], [3026, "NumberColumn"], [757, "NumberColumn"], [926, "bool"], [162, "TableQuestionContext"], [4334, "List[Row]"], [4851, "List[Row]"], [3377, "Number"], [4849, "List[Row]"], [2936, "List[Row]"], [3019, "Number"], [3779, "Date"], [1925, "List[str]"], [2484, "List[Date]"], [2645, "Number"], [3541, "NumberColumn"], [4210, "List[Row]"], [2469, "Date"], [2636, "Date"], [2204, "str"], [3652, "Number"], [3593, "List[Row]"], [4659, "Number"], [5194, "List[CellValueType]"], [3784, "List[Tuple[(Date, Row)]]"], [3092, "List[Row]"], [3094, "DateColumn"], [3648, "List[Row]"], [2468, "Date"], [4140, "List[Row]"], [2060, "Set[str]"], [925, "bool"], [4388, "List[Row]"], [3704, "DateColumn"], [3925, "Date"], [4390, "DateColumn"], [1778, "Dict[(str, str)]"], [3994, "List[Row]"], [1916, "List[str]"], [5105, "int"], [4003, "List[Tuple[(Date, Row)]]"], [2474, "List[Row]"], [3711, "List[Tuple[(Date, Row)]]"], [3430, "List[Row]"], [2649, "Number"], [3930, "List[Tuple[(Date, Row)]]"], [4786, "Number"], [3487, "NumberColumn"], [5172, "Column"], [3702, "List[Row]"], [4269, "List[str]"], [2485, "List[Date]"], [2567, "Column"], [107, "Dict[(str, CellValueType)]"], [4211, "List[Row]"], [4267, "StringColumn"], [5177, "Dict[(CellValueType, int)]"], [4071, "Date"], [2964, "List[CellValueType]"], [2395, "Number"], [4995, "str"], [2207, "List[str]"], [3432, "NumberColumn"], [4581, "Number"], [2347, "List[Row]"], [2930, "Number"], [2953, "List[Row]"], [3850, "DateColumn"], [4735, "Number"], [4787, "Number"], [756, "Column"], [2644, "Number"], [4741, "List[Row]"], [116, "str"], [3595, "NumberColumn"], [4992, "Date"], [3543, "Number"], [4265, "List[Row]"], [3024, "List[Row]"], [4483, "Date"], [3088, "Date"], [3373, "List[Row]"], [4991, "Date"]]
[[1675, "str"], [340, "PredicateType"], [790, "Tree"], [743, "Callable"], [888, "Set[Type]"], [1552, "str"], [526, "List[PredicateType]"], [398, "List[PredicateType]"], [742, "Callable"], [1819, "Type"], [721, "Callable"], [2453, "Any"], [747, "List[str]"], [2456, "PredicateType"], [1813, "str"], [397, "List[PredicateType]"], [718, "Callable"], [758, "Callable"], [880, "Dict[(str, Any)]"], [85, "bool"], [145, "bool"], [197, "str"], [1072, "Any"], [1872, "bool"], [2145, "List[Dict]"], [781, "str"], [881, "Dict[(str, Any)]"], [1027, "str"], [1871, "bool"], [1677, "Callable"], [198, "str"], [1876, "str"], [1815, "Any"], [1565, "List[List[str]]"], [1752, "List[PredicateType]"], [1220, "Dict[(str, Set[str])]"], [748, "List[str]"], [757, "Callable"], [1101, "List[Dict]"], [1679, "List[str]"], [202, "Type"], [1556, "List[str]"], [91, "Type"], [1028, "str"], [2719, "Union[(str, List)]"], [1816, "Any"], [287, "Type"], [1877, "str"], [761, "Callable"], [401, "PredicateType"], [90, "Type"], [1908, "Any"], [149, "Type"], [1221, "Dict[(str, Set[str])]"], [372, "str"], [1751, "List[PredicateType]"], [889, "Set[Type]"], [2955, "List[List[str]]"], [439, "str"], [782, "str"], [2721, "PredicateType"], [2952, "Tree"], [1551, "str"], [86, "bool"], [310, "List[PredicateType]"], [146, "bool"], [1098, "List[str]"], [1099, "List[str]"], [789, "Tree"], [2143, "List[str]"], [2951, "Tree"], [722, "Callable"], [2455, "PredicateType"], [528, "PredicateType"], [717, "Callable"], [1469, "str"]]
[[558, "str"], [20, "int"], [221, "bool"], [23, "int"], [28, "int"], [44, "bool"], [423, "bool"], [424, "bool"], [19, "int"], [222, "bool"], [24, "int"], [559, "str"], [43, "bool"], [27, "int"]]
[[523, "str"], [729, "List[None]"], [167, "Grammar"], [100, "Dict[(str, List[str])]"], [94, "str"], [372, "bool"], [365, "bool"], [355, "str"], [168, "Grammar"], [524, "str"], [93, "str"], [354, "str"], [728, "List[None]"], [351, "str"], [364, "bool"], [528, "List[str]"], [185, "Dict[(str, Set[str])]"], [371, "bool"], [378, "List[str]"], [529, "List[str]"], [724, "Node"], [687, "Grammar"], [171, "List[str]"], [170, "List[str]"], [358, "str"], [725, "Node"], [774, "Node"], [689, "List[str]"], [186, "Dict[(str, Set[str])]"], [352, "str"], [359, "str"], [99, "Dict[(str, List[str])]"]]
[[944, "List[Token]"], [940, "Set[str]"], [987, "Dict[(str, List[str])]"], [3123, "str"], [1477, "List[List[str]]"], [1847, "Set[str]"], [927, "List[Dict[(str, CellValueType)]]"], [1696, "Dict[(str, str)]"], [2335, "List[Token]"], [928, "List[Dict[(str, CellValueType)]]"], [2336, "List[Token]"], [1096, "KnowledgeGraph"], [1137, "Dict[(str, str)]"], [2738, "List[str]"], [1120, "Set[str]"], [1129, "Dict[(str, List[str])]"], [932, "Dict[(str, Set[str])]"], [1692, "Dict[(str, str)]"], [1848, "Set[str]"], [933, "Dict[(str, Set[str])]"], [2739, "List[str]"], [943, "List[Token]"], [986, "Dict[(str, List[str])]"], [3126, "str"], [3122, "str"], [1480, "List[Token]"], [1478, "List[List[str]]"], [2728, "str"], [2045, "List[Token]"], [1513, "List[Dict[(str, Dict[(str, str)])]]"], [2041, "str"], [1838, "List[Dict[(str, CellValueType)]]"], [3127, "str"], [939, "Set[str]"], [1594, "Dict[(str, Set[str])]"], [1138, "Dict[(str, str)]"], [1697, "Dict[(str, str)]"], [1837, "List[Dict[(str, CellValueType)]]"], [2729, "str"], [1119, "Set[str]"], [2042, "str"], [1128, "Dict[(str, List[str])]"], [1097, "KnowledgeGraph"]]
[[348, "Set[int]"], [512, "int"], [2073, "str"], [1772, "Dict[(str, List[int])]"], [508, "List[Token]"], [5863, "Dict[(str, List[str])]"], [1203, "str"], [2078, "Dict[(int, int)]"], [2259, "Dict[(str, List[str])]"], [1555, "List[Token]"], [1380, "List[Token]"], [1602, "Dict[(str, List[int])]"], [2258, "Dict[(str, List[str])]"], [891, "str"], [1239, "Dict[(str, List[int])]"], [1664, "str"], [2091, "Dict[(str, List[int])]"], [347, "Set[int]"], [2248, "List[List[str]]"], [2074, "str"], [1553, "str"], [145, "str"], [2252, "List[Dict[(str, List[str])]]"], [1010, "Dict[(str, List[int])]"], [1666, "List[Token]"], [1240, "Dict[(str, List[int])]"], [1415, "Dict[(str, List[int])]"], [1378, "str"], [2081, "Callable[([str], List[int])]"], [341, "Dict[(int, int)]"], [146, "str"], [453, "Dict[(str, List[int])]"], [507, "List[Token]"], [454, "Dict[(str, List[int])]"], [1942, "List[int]"], [2092, "Dict[(str, List[int])]"], [340, "Dict[(int, int)]"], [2076, "str"], [511, "int"], [1856, "str"], [1771, "Dict[(str, List[int])]"], [1943, "List[int]"], [1205, "List[Token]"], [337, "str"], [2333, "Dict[(str, int)]"], [2334, "Dict[(str, int)]"], [2083, "Set[int]"], [893, "List[Token]"], [270, "str"], [1857, "str"], [1603, "Dict[(str, List[int])]"], [1009, "Dict[(str, List[int])]"], [1414, "Dict[(str, List[int])]"], [338, "str"], [2249, "List[List[str]]"], [2253, "List[Dict[(str, List[str])]]"], [5862, "Dict[(str, List[str])]"], [2080, "Callable[([str], List[int])]"]]
[[719, "Dict[(str, Any)]"], [2195, "Dict[(int, List[str])]"], [462, "List[Token]"], [1177, "str"], [660, "Dict[(str, int)]"], [889, "Dict[(str, str)]"], [458, "Dict[(str, str)]"], [1945, "str"], [728, "Dict[(str, str)]"], [2045, "bool"], [2106, "List[str]"], [1534, "List[Token]"], [453, "Dict[(str, List[str])]"], [1173, "str"], [2194, "Dict[(int, List[str])]"], [2044, "bool"], [449, "Set[str]"], [608, "List[str]"], [2049, "str"], [575, "List[Token]"], [457, "Dict[(str, str)]"], [450, "Set[str]"], [570, "str"], [611, "List[Token]"], [609, "List[str]"], [2012, "bool"], [1561, "Union[(int, float)]"], [901, "List[List[str]]"], [2275, "List[str]"], [571, "str"], [718, "Dict[(str, Any)]"], [574, "List[Token]"], [2105, "List[str]"], [890, "Dict[(str, str)]"], [454, "Dict[(str, List[str])]"], [463, "List[Token]"], [1562, "Union[(int, float)]"], [1533, "List[Token]"], [1176, "str"], [900, "List[List[str]]"], [1944, "str"], [2011, "bool"], [2018, "List[str]"], [735, "DefaultDict[(str, List[str])]"], [2274, "List[str]"], [804, "Dict[(str, int)]"], [1172, "str"]]
[[599, "str"], [718, "Any"], [957, "int"], [2094, "List"], [1893, "List[str]"], [2917, "List[str]"], [2839, "List[str]"], [1898, "List[str]"], [1946, "str"], [948, "str"], [892, "str"], [830, "List[str]"], [1503, "str"], [1686, "str"], [653, "str"], [1508, "str"], [2705, "List[Token]"], [2151, "List[str]"], [829, "List[str]"], [2842, "NltkPorterStemmer"], [2093, "List"], [1952, "List[Tuple[(int, int)]]"], [2232, "List[List[Tuple[(str, int)]]]"], [1689, "List[Dict[(str, int)]]"], [2838, "List[str]"], [773, "str"], [1897, "List[str]"], [725, "JsonDict"], [778, "str"], [2835, "str"], [2925, "NltkPorterStemmer"], [2109, "List"], [1547, "str"], [2843, "NltkPorterStemmer"], [67, "Dict[(str, Dict[(str, List[str])])]"], [953, "JsonDict"], [2100, "Set"], [1835, "str"], [2921, "JsonDict"], [592, "str"], [801, "int"], [827, "str"], [1942, "List[str]"], [654, "str"], [671, "str"], [956, "int"], [961, "QuarelWorld"], [1945, "str"], [947, "str"], [886, "str"], [2706, "List[Token]"], [2231, "List[List[Tuple[(str, int)]]]"], [882, "str"], [1502, "str"], [2154, "List[str]"], [1507, "str"], [676, "List[str]"], [893, "str"], [1687, "str"], [1690, "List[Dict[(str, int)]]"], [777, "str"], [798, "str"], [2922, "JsonDict"], [1941, "List[str]"], [2153, "List[str]"], [1546, "str"], [802, "int"], [952, "JsonDict"], [774, "str"], [675, "List[str]"], [722, "Any"], [606, "List[Tuple[(int, int)]]"], [723, "Any"], [2918, "List[str]"], [678, "JsonDict"], [872, "str"], [600, "str"], [2834, "str"], [1836, "str"], [719, "Any"], [826, "str"], [679, "JsonDict"], [847, "str"], [68, "Dict[(str, Dict[(str, List[str])])]"], [2813, "str"], [852, "str"], [2101, "Set"], [848, "str"], [2089, "List"], [877, "Union[(str, List[str])]"], [670, "str"], [2088, "List"], [593, "str"], [797, "str"], [876, "Union[(str, List[str])]"], [871, "str"], [885, "str"], [881, "str"], [2703, "str"]]
[[489, "Dict[(str, List[str])]"], [505, "str"], [498, "Dict[(str, List[str])]"], [490, "Dict[(str, List[str])]"], [497, "Dict[(str, List[str])]"], [506, "str"]]
[[595, "Dict[(str, List[str])]"], [982, "Dict[(str, List[str])]"], [1204, "Dict[(str, TableColumn)]"], [651, "Dict[(str, List[str])]"], [596, "Dict[(str, List[str])]"], [652, "Dict[(str, List[str])]"], [1202, "Dict[(str, Dict[(str, str)])]"], [769, "Cursor"], [923, "str"], [1200, "Dict[(str, List[str])]"], [764, "Dict[(str, List[str])]"], [768, "Cursor"], [1157, "Dict[(str, Dict[(str, str)])]"], [924, "str"], [766, "Dict[(str, List[TableColumn])]"], [656, "Dict[(str, List[TableColumn])]"], [1073, "Dict[(str, List[str])]"], [1154, "Dict[(str, List[str])]"], [655, "Dict[(str, List[TableColumn])]"], [1156, "Dict[(str, Dict[(str, str)])]"], [921, "Dict[(str, List[str])]"], [1205, "Dict[(str, TableColumn)]"]]
[[36, "Dict[(str, List[str])]"], [31, "Set[str]"], [39, "Dict[(str, str)]"], [40, "Dict[(str, str)]"], [35, "Dict[(str, List[str])]"], [32, "Set[str]"]]
[[973, "JsonDict"], [1611, "str"], [1648, "str"], [1603, "JsonDict"], [1654, "JsonDict"], [1610, "str"], [1649, "str"], [1655, "JsonDict"], [1604, "JsonDict"], [966, "JsonDict"], [967, "JsonDict"], [972, "JsonDict"]]
[[1213, "str"], [1212, "str"]]
[[190, "argparse.Namespace"], [189, "argparse.Namespace"]]
[[130, "bool"], [93, "List[TensorDict]"], [151, "Iterable[Instance]"], [122, "int"], [153, "bool"], [119, "Iterable[Instance]"], [92, "List[TensorDict]"], [131, "bool"], [118, "Iterable[Instance]"], [123, "int"]]
[[170, "str"], [169, "str"], [162, "bool"], [163, "bool"]]
[[2268, "WikiTablesWorld"], [61, "List[str]"], [62, "List[str]"], [2269, "WikiTablesWorld"], [2273, "List[Token]"], [57, "List[str]"], [2274, "List[Token]"], [56, "List[str]"]]
[[252, "List[Token]"], [246, "WikiTablesLanguage"], [205, "WikiTablesLanguage"], [255, "str"], [204, "WikiTablesLanguage"], [254, "str"], [213, "List[Token]"], [212, "List[Token]"], [245, "WikiTablesLanguage"]]
[[225, "int"], [245, "int"], [350, "int"], [400, "Callable[([int, int], int)]"], [1981, "int"], [166, "int"], [165, "int"], [344, "int"], [298, "int"], [170, "int"], [268, "int"], [411, "int"], [206, "int"], [334, "int"], [416, "int"], [160, "int"], [455, "List[str]"], [460, "List[str]"], [308, "int"], [401, "Callable[([int, int], int)]"], [247, "int"], [410, "int"], [380, "int"], [223, "int"], [433, "int"], [243, "int"], [326, "int"], [248, "int"], [345, "int"], [274, "int"], [291, "int"], [1974, "int"], [181, "int"], [296, "int"], [182, "int"], [314, "int"], [309, "int"], [363, "int"], [414, "int"], [1950, "int"], [368, "int"], [381, "int"], [275, "int"], [327, "int"], [362, "int"], [332, "int"], [270, "int"], [187, "List[int]"], [352, "int"], [434, "int"], [1975, "int"], [169, "int"], [316, "int"], [1982, "int"], [272, "int"], [159, "int"], [290, "int"], [454, "List[str]"], [459, "List[str]"], [1954, "int"], [1956, "int"], [188, "List[int]"]]
[[14966, "torch.Tensor"], [14961, "int"], [14962, "int"], [14967, "torch.Tensor"]]
[[322, "str"], [272, "torch.nn.Linear"], [325, "str"], [275, "torch.nn.Linear"], [331, "Optional[Dict[(str, str)]]"], [321, "str"], [314, "InitializerApplicator"], [264, "bool"], [332, "Optional[Dict[(str, str)]]"], [265, "bool"], [271, "torch.nn.Linear"], [326, "str"], [315, "InitializerApplicator"], [276, "torch.nn.Linear"]]
[[194, "Dict[(str, torch.Tensor)]"], [190, "torch.Tensor"], [426, "np.array"], [427, "np.array"], [419, "int"], [442, "BeamSearch"], [449, "Dict[(str, torch.Tensor)]"], [441, "BeamSearch"], [436, "np.array"], [418, "int"], [195, "Dict[(str, torch.Tensor)]"], [189, "torch.Tensor"], [435, "np.array"]]
[[95, "bytes"], [99, "int"], [252, "str"], [251, "str"], [91, "str"], [98, "int"], [90, "str"], [258, "List[Tuple[(str, str)]]"], [94, "bytes"], [259, "List[Tuple[(str, str)]]"]]
[[1186, "Set[BaseClass]"], [1175, "List[BaseClass]"], [2853, "str"], [1013, "int"], [192, "bool"], [1190, "List[BaseClass]"], [94, "int"], [1085, "int"], [882, "str"], [944, "int"], [222, "int"], [1090, "int"], [1960, "Union[(int, List[int])]"], [2372, "int"], [529, "str"], [135, "int"], [1174, "List[BaseClass]"], [180, "str"], [579, "Params"], [877, "int"], [559, "int"], [197, "str"], [100, "bool"], [131, "int"], [136, "int"], [1015, "int"], [2646, "List[A]"], [1107, "Params"], [221, "int"], [530, "str"], [95, "int"], [1179, "Tuple[(BaseClass, BaseClass2)]"], [740, "int"], [181, "str"], [581, "int"], [561, "str"], [198, "str"], [525, "int"], [2884, "Tuple[(A, C)]"], [3054, "str"], [942, "Params"], [883, "str"], [191, "bool"], [1033, "int"], [1183, "Dict[(str, BaseClass)]"], [880, "int"], [1992, "Union[(A, B)]"], [130, "int"], [1031, "Params"], [99, "bool"], [1178, "Tuple[(BaseClass, BaseClass2)]"], [1976, "Union[(A, List[A])]"], [578, "Params"], [3136, "Set[A]"], [526, "int"], [2404, "Dict[(str, A)]"], [1089, "int"], [628, "int"], [2615, "int"], [2822, "int"], [1086, "int"], [1182, "Dict[(str, BaseClass)]"], [1191, "List[BaseClass]"], [2403, "Dict[(str, A)]"], [1187, "Set[BaseClass]"], [876, "int"]]
[[2073, "str"], [1815, "Params"], [2224, "Params"], [1892, "Params"], [2148, "Params"], [1752, "Params"], [88, "Params"], [71, "str"], [1790, "str"], [1735, "str"], [2124, "str"], [1734, "str"], [2086, "Params"]]
[[333, "int"], [909, "DataIterator"], [387, "Set[str]"], [673, "Vocabulary"], [1044, "int"], [537, "bool"], [490, "bool"], [355, "Dict[(str, Iterable[Instance])]"], [533, "Iterable[Instance]"], [910, "DataIterator"], [256, "str"], [1313, "bool"], [720, "torch.Tensor"], [483, "str"], [923, "int"], [1308, "Params"], [536, "bool"], [921, "Dict[(str, Iterable[Instance])]"], [325, "str"], [1312, "bool"], [484, "str"], [532, "Iterable[Instance]"], [297, "Dict[(str, Iterable[Instance])]"], [499, "int"], [1307, "Params"], [721, "torch.Tensor"], [717, "List[str]"], [904, "str"], [917, "torch.optim.Optimizer"], [326, "str"], [1120, "Dict"], [208, "str"], [734, "torch.Tensor"], [931, "int"], [161, "str"], [296, "Dict[(str, Iterable[Instance])]"], [255, "str"], [726, "torch.Tensor"], [547, "Dict[(Any, List[Instance])]"], [900, "Model"], [924, "int"], [905, "str"], [1310, "str"], [1043, "int"], [674, "Vocabulary"], [727, "torch.Tensor"], [718, "List[str]"], [209, "str"], [332, "int"], [491, "bool"], [987, "int"], [162, "str"], [913, "DatasetMingler"], [1121, "Dict"], [500, "int"], [901, "Model"], [201, "Instance"], [918, "torch.optim.Optimizer"], [986, "int"], [546, "Dict[(Any, List[Instance])]"], [932, "int"], [386, "Set[str]"], [914, "DatasetMingler"], [733, "torch.Tensor"], [200, "Instance"]]
[[693, "int"], [698, "int"], [697, "int"], [694, "int"]]
[[1070, "str"], [192, "float"], [199, "float"], [293, "str"], [940, "torch.Tensor"], [395, "Activation"], [1093, "DataIterator"], [1087, "Model"], [1076, "Iterable[Instance]"], [391, "int"], [488, "Model"], [815, "str"], [198, "float"], [1071, "str"], [337, "np.ndarray"], [396, "Activation"], [816, "str"], [1080, "Iterable[Instance]"], [387, "int"], [1075, "Iterable[Instance]"], [1096, "torch.optim.Optimizer"], [392, "int"], [382, "int"], [1686, "bool"], [1104, "int"], [489, "Model"], [942, "torch.Tensor"], [1094, "DataIterator"], [943, "torch.Tensor"], [1097, "torch.optim.Optimizer"], [1681, "Params"], [1103, "int"], [801, "int"], [1089, "DataIterator"], [1079, "Iterable[Instance]"], [1100, "torch.optim.Optimizer"], [191, "float"], [263, "InputSampler"], [1083, "Model"], [484, "torch.Tensor"], [330, "Instance"], [383, "int"], [388, "int"], [304, "np.ndarray"], [1685, "bool"], [803, "Activation"], [1101, "torch.optim.Optimizer"], [1680, "Params"], [329, "Instance"], [609, "torch.Tensor"], [1109, "int"], [1683, "str"], [1084, "Model"], [1110, "int"], [292, "str"], [799, "int"], [485, "torch.Tensor"], [264, "InputSampler"], [1090, "DataIterator"], [610, "torch.Tensor"]]
[[649, "torch.Tensor"], [648, "torch.Tensor"]]
[[962, "List[Tuple[(Dict[(str, Any)], List[Tuple[(int, int)]])]]"], [57, "List[float]"], [270, "float"], [58, "List[float]"], [961, "List[Tuple[(Dict[(str, Any)], List[Tuple[(int, int)]])]]"], [271, "float"]]
[[1135, "torch.optim.Optimizer"], [1140, "Dict[(str, Any)]"], [1138, "Dict[(str, Any)]"], [809, "float"], [1004, "torch.optim.Optimizer"], [810, "float"], [1137, "Dict[(str, Any)]"], [1141, "Dict[(str, Any)]"]]
[[57, "str"], [54, "flask.testing.FlaskClient"], [410, "JsonDict"], [62, "JsonDict"], [61, "JsonDict"], [413, "JsonDict"], [414, "JsonDict"], [58, "str"], [53, "flask.testing.FlaskClient"], [409, "JsonDict"]]
[[457, "List[int]"], [456, "List[int]"], [404, "List[str]"], [492, "Iterable[Batch]"], [403, "List[str]"], [491, "Iterable[Batch]"]]
[[178, "int"], [111, "Vocabulary"], [115, "str"], [92, "Dict[(str, Dict[(str, int)])]"], [217, "Dict[(str, int)]"], [260, "str"], [215, "Dict[(str, List[int])]"], [87, "Token"], [91, "Dict[(str, Dict[(str, int)])]"], [88, "Token"], [108, "List[Token]"], [109, "List[Token]"], [179, "int"], [198, "int"], [112, "Vocabulary"], [222, "Dict[(str, int)]"], [223, "Dict[(str, int)]"], [218, "Dict[(str, int)]"], [116, "str"]]
[[190, "Dict[(str, torch.LongTensor)]"], [189, "Dict[(str, torch.LongTensor)]"], [107, "Vocabulary"], [106, "Vocabulary"]]
[[70, "bool"], [65, "List[Instance]"], [69, "bool"], [103, "str"], [66, "List[Instance]"], [104, "str"]]
[[66, "Instance"], [67, "Instance"]]
[[51, "Instance"], [52, "Instance"], [48, "str"], [47, "str"]]
[[133, "str"], [97, "str"], [132, "str"], [124, "Instance"], [96, "str"], [125, "Instance"]]
[[558, "List[Tuple[(List[str], int)]]"], [325, "List[Tuple[(List[str], int)]]"], [324, "List[Tuple[(List[str], int)]]"]]
[[877, "List[Tuple[(List[str], int)]]"], [481, "List[Tuple[(List[str], int)]]"], [480, "List[Tuple[(List[str], int)]]"]]
[[1728, "List[Token]"], [1729, "List[Token]"]]
[[104, "WordTokenizer"], [105, "WordTokenizer"], [151, "str"], [89, "bool"], [150, "str"], [97, "Dict[(str, TokenIndexer)]"], [96, "Dict[(str, TokenIndexer)]"], [90, "bool"]]
[[332, "Dict[(int, List[SimpleState])]"], [322, "List[Set]"], [114, "bool"], [273, "bool"], [311, "SimpleState"], [323, "List[Set]"], [315, "int"], [73, "List[int]"], [64, "List[List[int]]"], [113, "bool"], [266, "Set[int]"], [69, "List[torch.Tensor]"], [312, "SimpleState"], [74, "List[int]"], [265, "Set[int]"], [65, "List[List[int]]"], [70, "List[torch.Tensor]"], [59, "List[int]"], [333, "Dict[(int, List[SimpleState])]"], [316, "int"], [506, "List[SimpleState]"], [274, "bool"], [60, "List[int]"], [507, "List[SimpleState]"]]
[[34, "str"], [33, "str"], [28, "bool"], [29, "bool"]]
[[24, "str"], [23, "str"], [18, "bool"], [19, "bool"]]
[[568, "int"], [567, "int"], [562, "int"], [563, "int"]]
[[429, "List[List[str]]"], [430, "List[List[str]]"]]
[[600, "str"], [599, "str"]]
[[1312, "str"], [1311, "str"]]
[[148, "torch.Tensor"], [114, "int"], [183, "List[torch.Tensor]"], [99, "int"], [147, "torch.Tensor"], [184, "List[torch.Tensor]"], [191, "List[torch.Tensor]"], [107, "int"], [94, "int"], [93, "int"], [157, "StepFunctionType"], [98, "int"], [156, "StepFunctionType"], [153, "StateType"], [115, "int"], [192, "List[torch.Tensor]"], [152, "StateType"], [106, "int"]]
[[30, "torch.Tensor"], [31, "torch.Tensor"]]
[[2125, "int"], [4685, "int"], [1694, "torch.Tensor"], [3422, "torch.Storage"], [4931, "torch.LongTensor"], [3785, "str"], [2611, "torch.FloatTensor"], [3980, "str"], [2126, "int"], [3787, "List[torch.Tensor]"], [401, "bool"], [1281, "int"], [5546, "Any"], [4606, "str"], [4934, "int"], [3151, "bool"], [1702, "Optional[List[int]]"], [5405, "torch.Tensor"], [1068, "int"], [3458, "str"], [990, "float"], [2610, "torch.FloatTensor"], [1394, "float"], [6197, "int"], [4689, "List[int]"], [3155, "torch.Tensor"], [1471, "float"], [5208, "torch.Tensor"], [3154, "torch.Tensor"], [3789, "torch.nn.Parameter"], [6296, "torch.Size"], [417, "Dict[(str, List[torch.Tensor])]"], [3163, "float"], [3560, "Sequence[T]"], [5542, "torch.Tensor"], [3563, "T"], [6237, "torch.Tensor"], [398, "List[Dict[(str, torch.Tensor)]]"], [416, "Dict[(str, List[torch.Tensor])]"], [5406, "torch.Tensor"], [5959, "float"], [5952, "float"], [1063, "torch.Tensor"], [659, "torch.Tensor"], [5779, "torch.Tensor"], [6294, "torch.Tensor"], [6193, "torch.nn.Module"], [1564, "torch.Tensor"], [5418, "int"], [5076, "Optional[torch.LongTensor]"], [3462, "List[torch.Tensor]"], [5950, "torch.Tensor"], [5547, "Any"], [1697, "torch.Tensor"], [2122, "Dict[(str, torch.Tensor)]"], [1385, "int"], [1388, "bool"], [4804, "torch.Tensor"], [1066, "torch.Tensor"], [4806, "int"], [4815, "bool"], [4687, "str"], [1698, "torch.Tensor"], [3627, "List[torch.Tensor]"], [1460, "torch.Tensor"], [1568, "List[int]"], [5409, "int"], [1383, "torch.Tensor"], [2603, "torch.FloatTensor"], [5075, "Optional[torch.LongTensor]"], [4887, "int"], [1087, "float"], [2607, "torch.LongTensor"], [3159, "torch.Tensor"], [3557, "int"], [3078, "float"], [5960, "float"], [173, "int"], [2615, "str"], [993, "torch.Tensor"], [5417, "int"], [1279, "torch.Tensor"], [3076, "torch.Tensor"], [2606, "torch.LongTensor"], [399, "List[Dict[(str, torch.Tensor)]]"], [1381, "torch.Tensor"], [2339, "torch.Tensor"], [3421, "torch.Storage"], [803, "torch.Tensor"], [1062, "torch.Tensor"], [4603, "int"], [3923, "torch.nn.Parameter"], [5210, "torch.LongTensor"], [1472, "float"], [4602, "int"], [804, "torch.Tensor"], [2340, "torch.Tensor"], [1277, "torch.Tensor"], [584, "torch.Tensor"], [3984, "torch.nn.Parameter"], [3074, "torch.Tensor"], [6194, "torch.nn.Module"], [587, "int"], [3463, "List[torch.Tensor]"], [1565, "torch.Tensor"], [661, "torch.Tensor"], [5781, "torch.Tensor"], [1703, "Optional[List[int]]"], [3158, "torch.Tensor"], [333, "torch.Tensor"], [5070, "torch.Tensor"], [3409, "int"], [2621, "float"], [1387, "bool"], [4930, "torch.Tensor"], [1069, "int"], [1079, "bool"], [2604, "torch.FloatTensor"], [2156, "List[int]"], [5953, "float"], [3625, "str"], [5410, "int"], [402, "bool"], [1464, "int"], [80, "bool"], [809, "bool"], [5544, "torch.Tensor"], [3162, "float"], [1080, "bool"], [5330, "int"], [3982, "List[torch.Tensor]"], [807, "torch.Tensor"], [1088, "float"], [2343, "torch.Tensor"], [1395, "float"], [5551, "Any"], [5326, "int"], [553, "torch.Tensor"], [4886, "int"], [1462, "torch.Tensor"], [3556, "int"], [4933, "int"], [3459, "str"], [989, "float"], [1466, "bool"], [172, "int"], [1693, "torch.Tensor"], [585, "torch.Tensor"], [2123, "Dict[(str, torch.Tensor)]"], [5327, "int"], [6297, "torch.Size"], [3079, "float"], [4890, "torch.Tensor"], [6198, "int"], [3561, "Sequence[T]"], [5069, "torch.Tensor"], [2614, "str"], [810, "bool"], [5329, "int"], [4684, "int"], [588, "int"], [4608, "List[int]"], [81, "bool"], [2622, "float"], [3150, "bool"], [5550, "Any"], [86, "T"], [5073, "torch.LongTensor"], [2342, "torch.Tensor"], [552, "torch.Tensor"], [994, "torch.Tensor"]]
[[462, "List[Set[int]]"], [40, "bool"], [450, "int"], [471, "List[int]"], [37, "int"], [460, "numpy.ndarray"], [456, "Dict[(int, int)]"], [262, "List[bool]"], [1119, "List[bool]"], [1117, "int"], [205, "numpy.ndarray"], [1115, "List[int]"], [458, "numpy.ndarray"], [241, "numpy.ndarray"], [340, "Dict[(int, int)]"], [280, "List[Set[int]]"], [904, "List[Set[int]]"], [32, "numpy.ndarray"], [279, "List[Set[int]]"], [454, "List[bool]"], [452, "numpy.ndarray"], [220, "numpy.ndarray"], [33, "numpy.ndarray"], [905, "List[Set[int]]"], [339, "Dict[(int, int)]"], [36, "int"], [41, "bool"]]
[[1046, "torch.nn.Module"], [495, "Callable[(Any, None)]"], [428, "torch.Tensor"], [531, "torch.Tensor"], [839, "Dict[(str, str)]"], [877, "str"], [583, "Params"], [128, "str"], [984, "List[Tuple[(str, Initializer)]]"], [838, "Dict[(str, str)]"], [125, "torch.Tensor"], [496, "Callable[(Any, None)]"], [991, "List[str]"], [107, "torch.Tensor"], [1045, "torch.nn.Module"], [990, "List[str]"], [108, "torch.Tensor"], [127, "str"], [235, "List[int]"], [832, "str"], [1267, "List[Tuple[(str, Params)]]"], [874, "torch.Tensor"], [584, "Params"], [450, "torch.Tensor"], [233, "torch.Tensor"], [241, "float"], [236, "List[int]"], [833, "str"], [240, "float"], [876, "str"], [983, "List[Tuple[(str, Initializer)]]"]]
[[36, "torch.Tensor"], [37, "torch.Tensor"]]
[[116, "torch.Tensor"], [36, "float"], [56, "torch.Tensor"], [101, "float"], [37, "float"], [55, "torch.Tensor"]]
[[156, "Iterable[Tuple[(str, Params)]]"], [157, "Iterable[Tuple[(str, Params)]]"], [52, "Sequence[Tuple[(str, Regularizer)]]"], [74, "torch.nn.Module"], [51, "Sequence[Tuple[(str, Regularizer)]]"], [75, "torch.nn.Module"]]
[[956, "List[ConfigItem]"], [194, "str"], [784, "str"], [2021, "ConfigItem"], [165, "str"], [2519, "Config"], [2017, "str"], [1945, "bool"], [1857, "type"], [2621, "Config"], [811, "JsonDict"], [961, "type"], [1778, "str"], [1485, "List[ConfigItem]"], [2348, "Dict[(str, str)]"], [794, "Optional[Any]"], [1949, "type"], [198, "Optional[type]"], [810, "JsonDict"], [2024, "str"], [166, "str"], [2143, "Config"], [2018, "str"], [1944, "bool"], [1774, "Config"], [957, "List[ConfigItem]"], [1001, "JsonDict"], [1775, "Config"], [160, "str"], [994, "JsonDict"], [1287, "Dict[(str, str)]"], [1986, "type"], [1858, "type"], [788, "type"], [976, "str"], [793, "Optional[Any]"], [197, "Optional[type]"], [1770, "str"], [467, "Optional[type]"], [2424, "str"], [2340, "type"], [161, "str"], [1983, "bool"], [1861, "type"], [960, "str"], [803, "str"], [1286, "Dict[(str, str)]"], [1058, "type"], [977, "str"], [1002, "JsonDict"], [789, "type"], [802, "str"], [1771, "str"], [2425, "str"], [1356, "Type[T]"], [193, "str"], [2020, "ConfigItem"], [2523, "str"], [2349, "Dict[(str, str)]"], [2622, "Config"], [2144, "Config"], [1982, "bool"], [1777, "str"], [783, "str"], [2520, "Config"]]
[[123, "Type[T]"], [73, "Dict[(Type, Dict[(str, Type)])]"], [96, "Type[T]"], [177, "Type[T]"], [179, "str"], [72, "Dict[(Type, Dict[(str, Type)])]"], [95, "Type[T]"], [100, "str"], [82, "str"], [99, "str"], [124, "Type[T]"], [81, "str"]]
[[461, "int"], [399, "int"], [514, "bool"], [1746, "Dict[(str, Any)]"], [677, "str"], [502, "int"], [185, "Any"], [682, "str"], [1115, "SpacyModelType"], [1121, "str"], [1130, "bool"], [499, "List"], [893, "bool"], [1125, "bool"], [493, "List"], [605, "Dict[(A, float)]"], [1663, "List"], [1642, "bool"], [1747, "Dict[(str, Any)]"], [1135, "bool"], [678, "str"], [892, "bool"], [1749, "bool"], [1116, "SpacyModelType"], [1122, "str"], [887, "str"], [492, "List"], [1105, "Dict[(Tuple[(str, bool)], SpacyModelType)]"], [1426, "float"], [503, "int"], [506, "Callable[(], Any)]"], [1032, "logging.FileHandler"], [1805, "str"], [1307, "str"], [1645, "Iterable[A]"], [1810, "str"], [515, "bool"], [457, "Iterator[A]"], [610, "float"], [1641, "bool"], [1743, "str"], [1104, "Dict[(Tuple[(str, bool)], SpacyModelType)]"], [1425, "float"], [1664, "List"], [1744, "str"], [1308, "str"], [1134, "bool"], [888, "str"], [403, "Any"], [402, "Any"], [456, "Iterator[A]"], [609, "float"], [1618, "Iterable[A]"], [745, "Params"], [460, "int"], [500, "List"], [1131, "bool"], [1126, "bool"], [606, "Dict[(A, float)]"], [188, "Any"], [1672, "torch.nn.Module"], [1806, "str"], [1671, "torch.nn.Module"], [184, "Any"], [986, "logging.FileHandler"], [400, "int"], [681, "str"], [1750, "bool"], [396, "Iterable[A]"], [189, "Any"], [744, "Params"], [395, "List[Any]"]]
[[450, "str"], [293, "str"], [865, "str"], [196, "str"], [964, "str"], [966, "IO"], [457, "str"], [242, "str"], [1455, "str"], [683, "str"], [918, "IO"], [1456, "str"], [206, "str"], [197, "str"], [202, "str"], [800, "str"], [295, "str"], [596, "bool"], [1082, "str"], [1466, "bool"], [601, "Union[(str, Path)]"], [1405, "str"], [203, "str"], [453, "Union[(str, Path)]"], [454, "Union[(str, Path)]"], [783, "Callable"], [1083, "str"], [1088, "str"], [782, "Callable"], [296, "str"], [595, "bool"], [449, "str"], [1465, "bool"], [205, "str"], [919, "IO"], [1086, "str"], [916, "str"]]
[[23, "str"], [110, "bool"], [265, "TextIO"], [22, "str"], [106, "TextIO"], [266, "TextIO"], [103, "str"], [107, "TextIO"], [111, "bool"], [102, "str"]]
[[141, "int"], [146, "int"], [150, "str"], [187, "Union[(str, int)]"], [155, "str"], [312, "Union[(int, list)]"], [311, "Union[(int, list)]"], [406, "bool"], [145, "int"], [149, "str"], [154, "str"], [186, "Union[(str, int)]"], [140, "int"], [405, "bool"]]
[[487, "Type[T]"], [1512, "T"], [411, "Dict[(str, Any)]"], [581, "Type"], [1513, "T"], [294, "type"], [384, "Type[T]"], [490, "Dict[(str, Any)]"], [383, "Type[T]"], [100, "str"], [571, "Any"], [570, "Any"], [92, "bool"], [181, "bool"], [101, "str"], [388, "Params"], [1517, "Params"], [576, "str"], [180, "bool"], [1752, "Dict[(str, Any)]"], [410, "Dict[(str, Any)]"], [387, "Params"], [574, "Type[T]"], [498, "Dict[(str, Any)]"], [587, "Params"], [577, "str"], [91, "bool"], [293, "type"], [583, "Any"], [1515, "Type[T]"], [499, "Dict[(str, Any)]"], [489, "Dict[(str, Any)]"], [584, "Any"]]
[[66, "str"], [1689, "str"], [387, "Dict[(str, Any)]"], [2331, "Dict[(str, Any)]"], [109, "str"], [1920, "str"], [917, "str"], [2275, "str"], [1161, "bool"], [1425, "bool"], [863, "bool"], [1922, "str"], [1252, "Any"], [955, "str"], [1928, "dict"], [158, "Any"], [292, "bool"], [545, "Dict[(str, Any)]"], [1326, "Any"], [1325, "Any"], [297, "str"], [708, "Dict[(str, Any)]"], [2064, "OrderedDict"], [2371, "Any"], [2335, "List[Any]"], [1168, "Any"], [1067, "int"], [1113, "float"], [2065, "OrderedDict"], [2342, "str"], [1250, "str"], [959, "Any"], [856, "str"], [950, "Any"], [376, "Dict[(str, Any)]"], [1333, "List[Any]"], [1334, "List[Any]"], [540, "Dict[(str, Any)]"], [852, "Dict[(str, Any)]"], [707, "Dict[(str, Any)]"], [110, "str"], [106, "str"], [794, "dict"], [873, "Dict[(str, str)]"], [1166, "str"], [1337, "bool"], [1688, "str"], [1074, "Any"], [1121, "Any"], [103, "str"], [2376, "Any"], [916, "str"], [1433, "bool"], [2337, "bool"], [2372, "Any"], [2276, "str"], [949, "Any"], [960, "Any"], [1338, "bool"], [561, "Any"], [2070, "List[List[str]]"], [377, "Dict[(str, Any)]"], [541, "Dict[(str, Any)]"], [853, "Dict[(str, Any)]"], [956, "str"], [558, "Any"], [557, "Any"], [2023, "str"], [62, "str"], [1426, "bool"], [67, "str"], [872, "Dict[(str, str)]"], [783, "str"], [1114, "float"], [784, "str"], [1331, "str"], [2025, "List[List[str]]"], [1066, "int"], [1432, "bool"], [1072, "str"], [554, "Any"], [560, "Any"], [1119, "str"], [1160, "bool"], [388, "Dict[(str, Any)]"], [1923, "str"], [857, "str"], [1919, "str"], [544, "Dict[(str, Any)]"], [293, "bool"], [157, "Any"], [102, "str"], [2333, "str"], [107, "str"], [2329, "Any"], [2026, "List[List[str]]"], [864, "bool"], [553, "Any"], [61, "str"]]
[[35, "float"], [21, "float"], [51, "bool"], [36, "float"], [22, "float"], [52, "bool"]]
[[1070, "Model"], [97, "str"], [815, "str"], [816, "str"], [1074, "Set[str]"], [286, "Set[str]"], [1075, "Set[str]"], [295, "str"], [287, "Set[str]"], [268, "float"], [274, "int"], [1311, "Iterable[str]"], [1312, "Iterable[str]"], [819, "float"], [265, "str"], [275, "int"], [332, "Model"], [267, "float"], [296, "str"], [558, "Dict[(str, Union[(Any, Dict[(str, Any)])])]"], [1072, "Dict[(str, Union[(Any, Dict[(str, Any)])])]"]]
[[410, "Optional[MovingAverage]"], [241, "Iterable[Instance]"], [401, "Optional[int]"], [3264, "Params"], [2157, "Dict[(str, Any)]"], [3254, "DataIterator"], [3260, "Optional[Iterable[Instance]]"], [240, "Iterable[Instance]"], [228, "Model"], [385, "bool"], [305, "int"], [2769, "Union[(int, str)]"], [371, "int"], [259, "str"], [272, "bool"], [684, "List[TensorDict]"], [3261, "Optional[Iterable[Instance]]"], [411, "Optional[MovingAverage]"], [2135, "Dict[(str, float)]"], [3263, "Params"], [3250, "Model"], [3853, "Iterable[Instance]"], [233, "torch.optim.Optimizer"], [3874, "bool"], [2151, "float"], [3881, "str"], [341, "Optional[float]"], [349, "Optional[float]"], [3257, "Iterable[Instance]"], [386, "bool"], [320, "float"], [236, "DataIterator"], [2143, "Dict[(str, float)]"], [314, "Checkpointer"], [3256, "Iterable[Instance]"], [252, "Optional[int]"], [3849, "Iterable[Instance]"], [3870, "Params"], [395, "bool"], [3837, "Model"], [402, "Optional[int]"], [279, "int"], [253, "Optional[int]"], [3890, "str"], [3859, "DataIterator"], [1443, "Dict[(str, Any)]"], [372, "int"], [328, "Union[(int, List)]"], [2011, "Dict[(str, float)]"], [246, "Optional[Iterable[Instance]]"], [3841, "DataIterator"], [266, "DataIterator"], [396, "bool"], [3875, "bool"], [688, "bool"], [825, "int"], [3252, "str"], [237, "DataIterator"], [295, "int"], [229, "Model"], [232, "torch.optim.Optimizer"], [260, "str"], [2946, "int"], [280, "int"], [340, "Optional[float]"], [3863, "Params"], [348, "Optional[float]"], [356, "Optional[LearningRateScheduler]"], [321, "float"], [2150, "float"], [379, "int"], [689, "bool"], [3882, "str"], [378, "int"], [364, "Optional[MomentumScheduler]"], [287, "Optional[str]"], [3845, "Iterable[Instance]"], [273, "bool"], [2945, "int"], [3872, "str"], [288, "str"], [365, "Optional[MomentumScheduler]"], [313, "Checkpointer"], [3889, "str"], [2136, "Dict[(str, float)]"], [267, "DataIterator"], [355, "Optional[LearningRateScheduler]"], [3854, "Iterable[Instance]"], [296, "int"], [245, "Optional[Iterable[Instance]]"], [685, "List[TensorDict]"], [329, "Union[(int, List)]"], [306, "int"], [3266, "DataIterator"], [824, "int"]]
[[92, "Params"], [757, "torch.Tensor"], [225, "Dict[(str, int)]"], [91, "Params"], [86, "List"], [762, "torch.Tensor"], [236, "List[set]"], [758, "torch.Tensor"], [161, "Any"], [761, "torch.Tensor"], [237, "List[set]"], [226, "Dict[(str, int)]"], [160, "Any"], [87, "List"]]
[[282, "float"], [288, "int"], [30, "torch.optim.Optimizer"], [34, "str"], [39, "int"], [353, "int"], [289, "int"], [40, "int"], [33, "str"], [29, "torch.optim.Optimizer"], [354, "int"], [281, "float"], [198, "Dict[(str, Any)]"], [245, "Dict[(str, Any)]"]]
[[509, "Iterable[float]"], [529, "bool"], [38, "Optional[int]"], [321, "Dict[(str, Any)]"], [548, "bool"], [45, "str"], [549, "bool"], [243, "Dict[(str, Any)]"], [530, "bool"], [52, "bool"], [44, "str"], [37, "Optional[int]"], [400, "float"], [510, "Iterable[float]"], [399, "float"], [53, "bool"]]
[[651, "str"], [163, "float"], [528, "Union[(Dict, torch.Tensor)]"], [1966, "str"], [1612, "List"], [1959, "DataIterator"], [1834, "Model"], [1249, "str"], [703, "str"], [1963, "int"], [1203, "Params"], [1917, "Dict[(str, float)]"], [585, "str"], [661, "Any"], [1609, "Model"], [990, "str"], [1836, "Optional[float]"], [995, "str"], [1903, "bool"], [652, "str"], [865, "Dict[(str, Iterable[Instance])]"], [1199, "str"], [1967, "str"], [590, "int"], [1956, "Iterable[Instance]"], [1200, "str"], [1252, "bool"], [1960, "DataIterator"], [586, "str"], [776, "DatasetReader"], [982, "Params"], [1892, "Model"], [1837, "Optional[float]"], [1255, "bool"], [864, "Dict[(str, Iterable[Instance])]"], [2336, "str"], [1955, "Iterable[Instance]"], [710, "str"], [1964, "int"], [700, "Params"], [591, "int"], [775, "DatasetReader"], [985, "Params"], [1953, "Model"], [1608, "Model"], [1899, "int"], [1256, "bool"], [711, "str"], [1251, "bool"], [699, "Params"], [1904, "bool"], [522, "int"], [1898, "int"], [1771, "Model"], [529, "Union[(Dict, torch.Tensor)]"], [1774, "Optional[float]"], [1895, "float"], [1604, "List[TensorDict]"], [984, "Params"], [2335, "str"], [1773, "Optional[float]"], [2338, "Dict[(str, float)]"], [523, "int"], [1613, "List"], [1248, "str"], [702, "str"], [981, "Params"], [1246, "Params"], [162, "float"], [660, "Any"], [1894, "float"], [1605, "List[TensorDict]"]]
[[461, "int"], [751, "torch.optim.Optimizer"], [82, "int"], [260, "bool"], [912, "dict"], [374, "str"], [749, "Model"], [377, "torch.Tensor"], [74, "Optional[str]"], [457, "str"], [929, "bool"], [83, "int"], [459, "float"], [198, "float"], [864, "Set[str]"], [861, "Model"], [913, "dict"], [98, "bool"], [928, "bool"], [525, "float"], [922, "int"], [108, "bool"], [309, "str"], [313, "float"], [520, "Model"], [233, "bool"], [1350, "str"], [315, "int"], [752, "torch.optim.Optimizer"], [197, "Any"], [524, "float"], [1303, "str"], [310, "str"], [67, "Callable[(], int)]"], [232, "bool"], [97, "bool"], [521, "Model"], [75, "Optional[str]"], [107, "bool"], [91, "int"], [915, "dict"], [90, "int"], [376, "torch.Tensor"], [316, "int"], [261, "bool"], [1234, "Model"], [863, "Set[str]"], [916, "dict"], [921, "int"], [68, "Callable[(], int)]"]]
[[258, "bool"], [174, "Model"], [183, "Model"], [89, "Union[(int, List)]"], [182, "Model"], [90, "Union[(int, List)]"], [256, "str"], [259, "bool"], [85, "str"], [254, "Params"], [175, "Model"], [253, "Params"], [84, "str"]]
[[277, "float"], [268, "Iterable[NamedParameter]"], [136, "Optional[int]"], [137, "Optional[int]"], [66, "Iterable[NamedParameter]"], [278, "float"], [317, "Optional[int]"], [284, "float"], [270, "float"], [285, "float"], [271, "float"], [65, "Iterable[NamedParameter]"]]
[[66, "str"], [113, "Params"], [112, "Params"], [115, "str"], [118, "bool"], [71, "Model"], [67, "str"], [72, "Model"], [117, "bool"]]
[[599, "Any"], [148, "Union[(int, str)]"], [160, "bool"], [105, "int"], [155, "Dict[(str, Any)]"], [86, "str"], [94, "int"], [93, "int"], [598, "Any"], [156, "Dict[(str, Any)]"], [161, "bool"], [147, "Union[(int, str)]"], [85, "str"], [152, "Dict[(str, Any)]"], [151, "Dict[(str, Any)]"], [106, "int"]]
[[67, "float"], [75, "float"], [82, "float"], [68, "float"], [59, "torch.optim.Optimizer"], [62, "int"], [74, "float"], [83, "float"], [63, "int"], [88, "int"], [89, "int"], [58, "torch.optim.Optimizer"]]
[[64, "int"], [47, "int"], [114, "int"], [52, "int"], [131, "int"], [42, "torch.optim.Optimizer"], [56, "float"], [106, "float"], [63, "int"], [130, "int"], [113, "int"], [51, "int"], [57, "float"], [107, "float"], [43, "torch.optim.Optimizer"], [46, "int"]]
[[259, "int"], [217, "torch.optim.lr_scheduler._LRScheduler"], [59, "torch.optim.Optimizer"], [115, "Params"], [62, "int"], [336, "int"], [252, "float"], [63, "int"], [307, "Dict[(str, Any)]"], [260, "int"], [113, "torch.optim.Optimizer"], [280, "Dict[(str, Any)]"], [116, "Params"], [331, "float"], [253, "float"], [58, "torch.optim.Optimizer"], [218, "torch.optim.lr_scheduler._LRScheduler"]]
[[527, "int"], [87, "int"], [73, "int"], [106, "bool"], [64, "torch.optim.Optimizer"], [94, "int"], [350, "int"], [114, "bool"], [68, "int"], [80, "float"], [88, "int"], [79, "float"], [65, "torch.optim.Optimizer"], [349, "int"], [95, "int"], [69, "int"], [74, "int"], [105, "bool"], [113, "bool"], [123, "float"], [343, "float"], [526, "int"], [122, "float"], [342, "float"]]
[[37, "torch.optim.Optimizer"], [95, "Params"], [41, "int"], [42, "int"], [94, "Params"], [38, "torch.optim.Optimizer"], [92, "torch.optim.Optimizer"]]
[[45, "int"], [50, "int"], [40, "int"], [37, "torch.optim.Optimizer"], [58, "int"], [41, "int"], [36, "torch.optim.Optimizer"], [51, "int"], [57, "int"], [46, "int"]]
[[73, "torch.Tensor"], [77, "torch.Tensor"], [82, "Optional[torch.Tensor]"], [411, "bool"], [83, "Optional[torch.Tensor]"], [78, "torch.Tensor"], [74, "torch.Tensor"], [412, "bool"]]
[[153, "str"], [644, "bool"], [796, "str"], [147, "str"], [833, "str"], [645, "bool"], [146, "str"], [263, "List[Tree]"], [154, "str"], [258, "List[Tree]"], [264, "List[Tree]"], [259, "List[Tree]"]]
[[117, "torch.Tensor"], [122, "torch.Tensor"], [108, "torch.Tensor"], [118, "torch.Tensor"], [109, "torch.Tensor"], [428, "bool"], [52, "List[int]"], [121, "torch.Tensor"], [114, "torch.Tensor"], [113, "torch.Tensor"], [124, "Optional[torch.Tensor]"], [51, "List[int]"], [427, "bool"], [125, "Optional[torch.Tensor]"]]
[[45, "int"], [78, "bool"], [44, "int"], [77, "bool"]]
[[86, "Optional[torch.Tensor]"], [77, "torch.Tensor"], [396, "bool"], [82, "torch.Tensor"], [93, "int"], [94, "int"], [78, "torch.Tensor"], [81, "torch.Tensor"], [87, "Optional[torch.Tensor]"], [395, "bool"]]
[[153, "bool"], [154, "bool"]]
[[184, "bool"], [83, "List[Dict[(str, Any)]]"], [177, "float"], [178, "float"], [185, "bool"], [111, "Set[Tuple[(int, int)]]"], [77, "torch.Tensor"], [78, "torch.Tensor"], [84, "List[Dict[(str, Any)]]"], [112, "Set[Tuple[(int, int)]]"], [133, "Set[Tuple[(int, int)]]"], [129, "Set[Tuple[(int, int)]]"], [132, "Set[Tuple[(int, int)]]"]]
[[87, "Set[int]"], [172, "torch.LongTensor"], [68, "Iterable[float]"], [326, "torch.LongTensor"], [88, "Set[int]"], [135, "bool"], [176, "int"], [587, "torch.LongTensor"], [67, "Iterable[float]"], [175, "int"], [183, "Dict[(Tuple[(int, Any)], int)]"], [322, "torch.LongTensor"], [591, "torch.LongTensor"], [776, "bool"], [171, "torch.LongTensor"], [586, "torch.LongTensor"], [330, "int"], [533, "torch.LongTensor"], [590, "torch.LongTensor"], [450, "float"], [182, "Dict[(Tuple[(int, Any)], int)]"], [321, "torch.LongTensor"], [451, "float"], [327, "torch.LongTensor"]]
[[42, "float"], [50, "bool"], [51, "bool"], [41, "float"]]
[[76, "Optional[torch.Tensor]"], [71, "torch.Tensor"], [77, "Optional[torch.Tensor]"], [167, "bool"], [68, "torch.Tensor"], [168, "bool"], [67, "torch.Tensor"], [72, "torch.Tensor"]]
[[86, "Optional[torch.Tensor]"], [415, "bool"], [416, "bool"], [77, "torch.Tensor"], [82, "torch.Tensor"], [78, "torch.Tensor"], [81, "torch.Tensor"], [87, "Optional[torch.Tensor]"]]
[[247, "bool"], [248, "bool"], [65, "torch.Tensor"], [69, "Optional[torch.Tensor]"], [70, "Optional[torch.Tensor]"], [66, "torch.Tensor"]]
[[927, "TypedStringSpan"], [283, "torch.Tensor"], [286, "torch.Tensor"], [827, "List[str]"], [826, "List[str]"], [287, "torch.Tensor"], [292, "Optional[torch.Tensor]"], [986, "Set[str]"], [157, "Optional[TAGS_TO_SPANS_FUNCTION_TYPE]"], [1218, "int"], [933, "TypedStringSpan"], [1215, "int"], [142, "List[str]"], [1209, "int"], [130, "Vocabulary"], [973, "bool"], [291, "Optional[torch.Tensor]"], [149, "Optional[str]"], [282, "torch.Tensor"], [807, "List[TypedStringSpan]"], [1210, "int"], [972, "bool"], [817, "Set[TypedStringSpan]"], [158, "Optional[TAGS_TO_SPANS_FUNCTION_TYPE]"], [129, "Vocabulary"], [133, "str"], [816, "Set[TypedStringSpan]"], [808, "List[TypedStringSpan]"], [1219, "int"], [1214, "int"], [298, "Optional[torch.Tensor]"], [299, "Optional[torch.Tensor]"], [985, "Set[str]"], [141, "List[str]"], [932, "TypedStringSpan"], [134, "str"], [150, "Optional[str]"]]
[[76, "Optional[torch.Tensor]"], [71, "torch.Tensor"], [285, "bool"], [77, "Optional[torch.Tensor]"], [68, "torch.Tensor"], [67, "torch.Tensor"], [72, "torch.Tensor"], [284, "bool"]]
[[169, "torch.Tensor"], [605, "bool"], [173, "torch.Tensor"], [178, "Optional[torch.Tensor]"], [68, "str"], [75, "List[int]"], [60, "float"], [61, "float"], [174, "torch.Tensor"], [170, "torch.Tensor"], [67, "str"], [74, "List[int]"], [606, "bool"], [177, "Optional[torch.Tensor]"]]
[[94, "Optional[torch.Tensor]"], [152, "bool"], [85, "torch.Tensor"], [90, "torch.Tensor"], [86, "torch.Tensor"], [153, "bool"], [89, "torch.Tensor"], [95, "Optional[torch.Tensor]"]]
[[162, "str"], [206, "List[List[str]]"], [801, "int"], [217, "List[List[str]]"], [552, "Set[str]"], [200, "List[Optional[int]]"], [553, "Set[str]"], [540, "bool"], [211, "List[List[str]]"], [539, "bool"], [210, "List[List[str]]"], [798, "int"], [797, "int"], [802, "int"], [218, "List[List[str]]"], [163, "str"], [792, "int"], [793, "int"], [201, "List[Optional[int]]"], [207, "List[List[str]]"]]
[[614, "bool"], [140, "Optional[torch.Tensor]"], [135, "torch.Tensor"], [54, "int"], [63, "bool"], [55, "int"], [141, "Optional[torch.Tensor]"], [132, "torch.Tensor"], [615, "bool"], [62, "bool"], [131, "torch.Tensor"], [136, "torch.Tensor"]]
[[54, "Optional[torch.Tensor]"], [45, "torch.Tensor"], [74, "bool"], [50, "torch.Tensor"], [46, "torch.Tensor"], [49, "torch.Tensor"], [55, "Optional[torch.Tensor]"], [73, "bool"]]
[[455, "Dict[(Tuple[(int, int)], int)]"], [416, "torch.Tensor"], [532, "int"], [124, "List[Dict[(str, Any)]]"], [509, "Tuple[(int, int)]"], [420, "torch.Tensor"], [560, "Tuple[(int, int)]"], [511, "Tuple[(int, int)]"], [568, "Tuple[(int, int)]"], [213, "bool"], [212, "bool"], [465, "List[List[Tuple[(int, int)]]]"], [418, "torch.Tensor"], [512, "Tuple[(int, int)]"], [108, "torch.Tensor"], [607, "Dict[(Tuple[(int, int)], Tuple[(Tuple[(int, int)], Any)])]"], [113, "torch.Tensor"], [536, "int"], [123, "List[Dict[(str, Any)]]"], [464, "List[List[Tuple[(int, int)]]]"], [606, "Dict[(Tuple[(int, int)], Tuple[(Tuple[(int, int)], Any)])]"], [118, "torch.Tensor"], [109, "torch.Tensor"], [456, "Dict[(Tuple[(int, int)], int)]"], [114, "torch.Tensor"], [567, "Tuple[(int, int)]"], [119, "torch.Tensor"], [537, "int"]]
[[102, "bool"], [103, "bool"]]
[[96, "List"], [162, "bool"], [97, "List"], [163, "bool"], [92, "Union[(str, List)]"], [93, "Union[(str, List)]"]]
[[435, "bool"], [118, "Optional[torch.Tensor]"], [109, "torch.Tensor"], [114, "torch.Tensor"], [110, "torch.Tensor"], [436, "bool"], [113, "torch.Tensor"], [119, "Optional[torch.Tensor]"]]
[[406, "Response"], [242, "Callable[([JsonDict], JsonDict)]"], [1149, "List[str]"], [223, "Predictor"], [708, "str"], [1147, "str"], [743, "Predictor"], [222, "Predictor"], [612, "Response"], [742, "Predictor"], [218, "Flask"], [369, "ServerError"], [407, "Response"], [613, "Response"], [217, "Flask"], [368, "ServerError"], [480, "Response"], [234, "str"], [1144, "str"], [227, "List[str]"], [243, "Callable[([JsonDict], JsonDict)]"], [481, "Response"], [746, "argparse.Namespace"], [235, "str"], [249, "str"], [1145, "str"], [704, "Response"], [747, "argparse.Namespace"], [703, "Response"], [226, "List[str]"], [363, "Response"], [362, "Response"], [707, "str"], [250, "str"]]
[[115, "ServerError"], [155, "Response"], [154, "Response"], [67, "Flask"], [116, "ServerError"], [72, "Sequence[str]"], [66, "Flask"], [71, "Sequence[str]"], [110, "Response"], [109, "Response"], [179, "Response"], [178, "Response"]]
[[136, "Vocabulary"], [104, "int"], [52, "MutableMapping[(str, Field)]"], [133, "Field"], [374, "str"], [73, "str"], [128, "str"], [309, "Dict[(str, Dict[(str, int)])]"], [51, "MutableMapping[(str, Field)]"], [132, "Field"], [375, "str"], [129, "str"], [105, "int"], [66, "Field"], [171, "Dict[(str, Dict[(str, int)])]"], [207, "Vocabulary"], [135, "Vocabulary"], [172, "Dict[(str, Dict[(str, int)])]"], [308, "Dict[(str, Dict[(str, int)])]"], [67, "Field"], [72, "str"]]
[[543, "Dict[(str, list)]"], [93, "Iterable[Instance]"], [388, "bool"], [476, "Dict[(str, Dict[(str, int)])]"], [544, "Dict[(str, list)]"], [228, "Dict[(str, Dict[(str, int)])]"], [92, "Iterable[Instance]"], [271, "Dict[(str, List[Dict[(str, int)]])]"], [138, "List[Dict[(str, str)]]"], [382, "Dict[(str, Dict[(str, int)])]"], [387, "bool"], [270, "Dict[(str, List[Dict[(str, int)]])]"], [229, "Dict[(str, Dict[(str, int)])]"], [713, "Dict[(str, List)]"], [682, "Vocabulary"], [683, "Vocabulary"], [714, "Dict[(str, List)]"], [237, "List[Dict[(str, Dict[(str, int)])]]"], [475, "Dict[(str, Dict[(str, int)])]"], [139, "List[Dict[(str, str)]]"], [236, "List[Dict[(str, Dict[(str, int)])]]"]]
[[2751, "str"], [2747, "bool"], [401, "str"], [934, "str"], [646, "Union[(int, Dict[(str, int)])]"], [1532, "Iterable[adi.Instance]"], [2992, "str"], [2916, "int"], [1534, "Dict[(str, int)]"], [3081, "str"], [2569, "Iterable[adi.Instance]"], [1582, "Dict[(str, Dict[(str, int)])]"], [1316, "bool"], [165, "Iterable[str]"], [176, "Callable[(], Any)]"], [210, "str"], [1321, "str"], [2784, "str"], [2000, "Dict[(str, int)]"], [1557, "Dict[(str, List[str])]"], [1531, "Iterable[adi.Instance]"], [647, "Union[(int, Dict[(str, int)])]"], [639, "Dict[(str, int)]"], [553, "Params"], [172, "Callable[(], Any)]"], [1562, "Dict[(str, int)]"], [1539, "Union[(int, Dict[(str, int)])]"], [2786, "str"], [2028, "Dict[(str, int)]"], [2921, "str"], [652, "Iterable[str]"], [2005, "Union[(int, Dict[(str, int)])]"], [638, "Dict[(str, int)]"], [166, "Iterable[str]"], [3152, "str"], [2997, "int"], [1547, "Optional[Dict[(str, str)]]"], [301, "str"], [1642, "Iterable[adi.Instance]"], [306, "str"], [426, "List[str]"], [1544, "Iterable[str]"], [2923, "str"], [299, "Set[str]"], [171, "Callable[(], Any)]"], [655, "Optional[Dict[(str, str)]]"], [1640, "Params"], [663, "bool"], [400, "str"], [933, "str"], [2023, "Dict[(str, List[str])]"], [2780, "int"], [1266, "bool"], [632, "Dict[(str, Dict[(str, int)])]"], [2018, "bool"], [425, "List[str]"], [211, "str"], [679, "Dict[(str, int)]"], [2695, "Dict[(str, Dict[(str, int)])]"], [1552, "bool"], [2993, "str"], [3023, "str"], [353, "Set[str]"], [485, "str"], [656, "Optional[Dict[(str, str)]]"], [2013, "Optional[Dict[(str, str)]]"], [175, "Callable[(], Any)]"], [678, "Dict[(str, int)]"], [2917, "int"], [1233, "str"], [2779, "int"], [1995, "Dict[(str, Dict[(str, int)])]"], [2999, "str"], [3082, "str"], [302, "str"], [307, "str"], [2879, "str"], [355, "str"], [1460, "int"], [631, "Dict[(str, Dict[(str, int)])]"], [276, "Set[str]"], [1281, "str"], [3019, "int"], [662, "bool"], [1324, "str"], [3018, "int"], [552, "Params"], [2900, "str"], [672, "Dict[(str, List[str])]"], [357, "str"], [671, "Dict[(str, List[str])]"], [2567, "Params"], [3153, "str"], [1131, "str"], [1314, "str"], [1583, "Dict[(str, Dict[(str, int)])]"], [2010, "Iterable[str]"]]
[[824, "bool"], [817, "bool"], [363, "List[Token]"], [1149, "bool"], [84, "List[str]"], [114, "str"], [329, "str"], [350, "List[spacy.tokens.Token]"], [754, "List[spacy.tokens.Token]"], [803, "bool"], [811, "bool"], [1148, "bool"], [85, "List[str]"], [362, "List[Token]"], [853, "List[spacy.tokens.Token]"], [728, "str"], [795, "str"], [617, "str"], [349, "List[Token]"], [796, "str"], [618, "str"], [810, "bool"], [913, "List[str]"], [818, "bool"], [802, "bool"], [1050, "List[str]"], [1171, "str"], [664, "str"], [825, "bool"], [1106, "str"], [999, "str"], [113, "str"], [957, "str"]]
[[15, "str"], [118, "Token"], [16, "str"], [55, "str"], [48, "str"], [72, "int"], [23, "int"], [56, "str"], [31, "str"], [63, "str"], [73, "int"], [114, "str"], [119, "Token"], [32, "str"], [39, "str"], [64, "str"], [24, "int"], [113, "str"], [40, "str"], [47, "str"]]
[[46, "List[str]"], [45, "List[str]"], [63, "str"], [62, "str"]]
[[128, "List[str]"], [51, "str"], [156, "str"], [67, "List[str]"], [66, "List[str]"], [59, "bool"], [155, "str"], [50, "str"], [75, "List[str]"], [74, "List[str]"], [58, "bool"], [129, "List[str]"]]
[[119, "str"], [55, "str"], [73, "List[str]"], [127, "bool"], [56, "str"], [120, "str"], [228, "str"], [264, "List[str]"], [74, "List[str]"], [126, "bool"]]
[[54, "Token"], [45, "Token"], [124, "Token"], [85, "Token"], [53, "Token"], [81, "Token"], [128, "Token"], [44, "Token"]]
[[213, "List[str]"], [94, "WordStemmer"], [77, "WordSplitter"], [85, "WordFilter"], [86, "WordFilter"], [183, "List[Token]"], [212, "List[str]"], [78, "WordSplitter"], [255, "List[Token]"], [173, "str"], [102, "List[str]"], [101, "List[str]"], [172, "str"], [110, "List[str]"], [109, "List[str]"], [93, "WordStemmer"]]
[[61, "List[Token]"], [157, "List[Token]"], [93, "List[Token]"], [123, "List[str]"], [122, "List[str]"], [222, "List[str]"], [221, "List[str]"], [214, "str"], [62, "List[Token]"], [213, "str"], [838, "List[Token]"]]
[[87, "Iterable[Instance]"], [91, "bool"], [127, "Deque[Instance]"], [86, "Iterable[Instance]"], [124, "Deque[Instance]"], [90, "bool"], [126, "Deque[Instance]"]]
[[178, "Dict[(str, List[Instance])]"], [151, "bool"], [112, "str"], [98, "bool"], [147, "Iterable[Instance]"], [72, "int"], [90, "int"], [73, "int"], [106, "bool"], [150, "bool"], [80, "int"], [148, "Iterable[Instance]"], [81, "int"], [99, "bool"], [177, "Dict[(str, List[Instance])]"], [113, "str"], [105, "bool"], [89, "int"]]
[[343, "int"], [110, "Vocabulary"], [320, "bool"], [329, "int"], [101, "List[Instance]"], [344, "int"], [474, "Deque[Instance]"], [432, "bool"], [314, "float"], [359, "bool"], [336, "int"], [429, "Iterable[Instance]"], [105, "List[Tuple[(str, str)]]"], [335, "int"], [114, "float"], [109, "Vocabulary"], [319, "bool"], [366, "Tuple[(str, int)]"], [360, "bool"], [353, "bool"], [477, "Deque[Instance]"], [431, "bool"], [104, "List[Tuple[(str, str)]]"], [478, "Deque[Instance]"], [113, "float"], [367, "Tuple[(str, int)]"], [328, "int"], [352, "bool"], [312, "List[Tuple[(str, str)]]"], [100, "List[Instance]"]]
[[94, "Queue"], [433, "bool"], [201, "int"], [206, "Optional[int]"], [296, "DataIterator"], [199, "Queue"], [122, "Iterable[Instance]"], [108, "bool"], [385, "bool"], [305, "int"], [202, "int"], [428, "int"], [300, "int"], [297, "DataIterator"], [207, "Optional[int]"], [383, "Iterable[Instance]"], [404, "Vocabulary"], [103, "DataIterator"], [100, "Queue"], [95, "Queue"], [112, "int"], [197, "Iterable[Instance]"], [107, "bool"], [111, "int"], [306, "int"], [104, "DataIterator"], [403, "Vocabulary"], [426, "Iterable[Instance]"], [99, "Queue"]]
[[150, "Batch"], [428, "torch.Tensor"], [201, "int"], [1040, "Iterable[Instance]"], [606, "Optional[int]"], [1144, "Vocabulary"], [297, "Iterable[Instance]"], [449, "List[List[Instance]]"], [216, "int"], [240, "Tuple[(str, int)]"], [143, "Batch"], [226, "bool"], [604, "Iterable[Instance]"], [154, "int"], [805, "Deque[Instance]"], [208, "int"], [607, "Optional[int]"], [351, "Iterable[int]"], [202, "int"], [217, "int"], [300, "int"], [149, "Batch"], [233, "bool"], [309, "bool"], [802, "Iterable[Instance]"], [804, "Deque[Instance]"], [232, "bool"], [225, "bool"], [209, "int"], [308, "bool"], [694, "Iterable[Instance]"], [801, "Iterable[Instance]"], [844, "List[List[Instance]]"], [144, "Batch"], [1143, "Vocabulary"], [1124, "Iterable[Instance]"], [1126, "bool"], [301, "int"], [239, "Tuple[(str, int)]"], [352, "Iterable[int]"], [1035, "int"], [851, "List[Instance]"], [427, "torch.Tensor"], [298, "Iterable[Instance]"], [1034, "int"], [153, "int"], [424, "torch.Tensor"]]
[[52, "int"], [275, "str"], [298, "bool"], [61, "SequenceField"], [60, "SequenceField"], [209, "Dict[(str, int)]"], [51, "int"], [208, "Dict[(str, int)]"], [56, "int"], [57, "int"], [299, "bool"], [276, "str"]]
[[488, "Dict[(str, int)]"], [356, "Dict[(str, Dict[(str, int)])]"], [281, "str"], [570, "str"], [402, "Vocabulary"], [119, "Optional[int]"], [355, "Dict[(str, Dict[(str, int)])]"], [120, "Optional[int]"], [99, "Sequence[Union[(str, int)]]"], [80, "Set[str]"], [81, "Set[str]"], [571, "str"], [103, "str"], [401, "Vocabulary"], [111, "bool"], [112, "bool"], [104, "str"], [489, "Dict[(str, int)]"], [100, "Sequence[Union[(str, int)]]"]]
[[21, "int"], [22, "int"]]
[[128, "int"], [85, "Set[str]"], [107, "SequenceField"], [104, "List[Tuple[(int, int)]]"], [112, "List[str]"], [119, "str"], [525, "Dict[(str, int)]"], [113, "List[str]"], [620, "List[Tuple[(int, int)]]"], [377, "Dict[(str, Dict[(str, int)])]"], [437, "Vocabulary"], [120, "str"], [619, "List[Tuple[(int, int)]]"], [127, "int"], [378, "Dict[(str, Dict[(str, int)])]"], [436, "Vocabulary"], [654, "str"], [108, "SequenceField"], [84, "Set[str]"], [526, "Dict[(str, int)]"], [297, "str"], [103, "List[Tuple[(int, int)]]"], [655, "str"]]
[[163, "Dict[(str, int)]"], [72, "str"], [97, "Vocabulary"], [71, "str"], [164, "Dict[(str, int)]"], [98, "Vocabulary"], [67, "List[Token]"], [66, "List[Token]"]]
[[49, "numpy.ndarray"], [343, "str"], [129, "Dict[(str, int)]"], [54, "int"], [53, "int"], [344, "str"], [61, "numpy.dtype"], [62, "numpy.dtype"], [130, "Dict[(str, int)]"], [50, "numpy.ndarray"]]
[[75, "str"], [69, "Any"], [169, "Dict[(str, int)]"], [74, "str"], [68, "Any"], [209, "List[DataArray]"], [170, "Dict[(str, int)]"], [219, "str"], [59, "Any"], [58, "Any"], [218, "str"], [210, "List[DataArray]"], [163, "DataArray"], [162, "DataArray"]]
[[529, "List[DataArray]"], [348, "int"], [521, "DataArray"], [129, "Field"], [367, "DataArray"], [135, "int"], [550, "str"], [66, "List[Field]"], [150, "int"], [149, "int"], [128, "Field"], [551, "str"], [373, "Dict[(str, int)]"], [176, "Dict[(str, Dict[(str, int)])]"], [522, "DataArray"], [256, "Dict[(str, int)]"], [204, "Vocabulary"], [347, "int"], [366, "DataArray"], [528, "List[DataArray]"], [175, "Dict[(str, Dict[(str, int)])]"], [65, "List[Field]"], [134, "int"], [203, "Vocabulary"]]
[[65, "Optional[str]"], [49, "bool"], [179, "Vocabulary"], [239, "ProductionRule"], [43, "str"], [98, "str"], [64, "Optional[str]"], [144, "Dict[(str, Dict[(str, int)])]"], [100, "bool"], [339, "str"], [329, "List[ProductionRule]"], [44, "str"], [245, "Dict[(str, int)]"], [246, "Dict[(str, int)]"], [110, "str"], [57, "Optional[torch.LongTensor]"], [238, "ProductionRule"], [143, "Dict[(str, Dict[(str, int)])]"], [50, "bool"], [102, "str"], [180, "Vocabulary"], [56, "Optional[torch.LongTensor]"], [338, "str"], [103, "str"], [330, "List[ProductionRule]"]]
[[119, "DataArray"], [75, "Dict[(str, Dict[(str, int)])]"], [177, "bool"], [153, "DataArray"], [74, "Dict[(str, Dict[(str, int)])]"], [152, "DataArray"], [159, "List[DataArray]"], [120, "DataArray"], [160, "List[DataArray]"], [178, "bool"], [127, "Dict[(str, int)]"], [93, "Vocabulary"], [126, "Dict[(str, int)]"], [92, "Vocabulary"]]
[[1797, "List[Token]"], [191, "int"], [550, "Vocabulary"], [1393, "Token"], [1478, "float"], [1390, "List[Token]"], [1528, "List[Token]"], [1430, "float"], [714, "Dict[(str, int)]"], [912, "Dict[(str, int)]"], [1638, "List[Token]"], [1629, "float"], [498, "Dict[(str, Dict[(str, int)])]"], [137, "KnowledgeGraph"], [192, "int"], [1436, "str"], [1889, "float"], [1440, "Token"], [1642, "int"], [147, "Dict[(str, TokenIndexer)]"], [1574, "List[Token]"], [1900, "Token"], [1391, "List[Token]"], [1785, "float"], [1526, "str"], [182, "bool"], [1485, "List[Token]"], [2045, "float"], [1711, "int"], [1898, "List[Token]"], [1568, "float"], [1400, "List[Token]"], [1380, "float"], [2049, "str"], [1707, "List[Token]"], [1630, "float"], [153, "Tokenizer"], [1444, "List[Token]"], [1489, "int"], [2051, "List[Token]"], [1387, "str"], [579, "Dict[(str, List)]"], [1396, "int"], [1705, "str"], [1442, "int"], [1520, "float"], [148, "Dict[(str, TokenIndexer)]"], [1315, "List[Dict[(str, torch.Tensor)]]"], [1698, "float"], [1397, "int"], [1784, "float"], [1534, "List[Token]"], [1580, "List[Token]"], [1431, "float"], [167, "List[List[Token]]"], [1640, "Token"], [1795, "int"], [1709, "Token"], [1530, "Token"], [1477, "float"], [2053, "Token"], [1483, "str"], [142, "List[Token]"], [1399, "List[Token]"], [1491, "List[Token]"], [174, "List[List[List[float]]]"], [1394, "Token"], [1888, "float"], [160, "List[str]"], [1572, "str"], [1791, "List[Token]"], [551, "Vocabulary"], [168, "List[List[Token]]"], [1699, "float"], [1381, "float"], [2055, "int"], [1578, "int"], [1896, "str"], [499, "Dict[(str, Dict[(str, int)])]"], [143, "List[Token]"], [175, "List[List[List[float]]]"], [138, "KnowledgeGraph"], [1532, "int"], [1636, "str"], [1438, "List[Token]"], [2044, "float"], [159, "List[str]"], [1789, "str"], [1902, "int"], [1904, "List[Token]"], [1644, "List[Token]"], [1713, "List[Token]"], [152, "Tokenizer"], [1521, "float"], [1316, "List[Dict[(str, torch.Tensor)]]"], [183, "bool"], [1576, "Token"], [1793, "Token"], [1487, "Token"], [1567, "float"], [2057, "List[Token]"], [1388, "str"], [580, "Dict[(str, List)]"]]
[[102, "bool"], [72, "Set[str]"], [435, "str"], [95, "str"], [377, "Dict[(str, int)]"], [91, "Union[(str, int)]"], [196, "str"], [101, "bool"], [276, "Dict[(str, Dict[(str, int)])]"], [434, "str"], [378, "Dict[(str, int)]"], [277, "Dict[(str, Dict[(str, int)])]"], [94, "str"], [319, "Vocabulary"], [318, "Vocabulary"], [90, "Union[(str, int)]"], [71, "Set[str]"]]
[[355, "int"], [117, "SequenceField"], [113, "Union[(List[str], List[int])]"], [519, "Dict[(str, int)]"], [606, "str"], [395, "Dict[(str, Dict[(str, int)])]"], [370, "int"], [574, "List[str]"], [116, "SequenceField"], [441, "Vocabulary"], [607, "str"], [518, "Dict[(str, int)]"], [354, "int"], [396, "Dict[(str, Dict[(str, int)])]"], [260, "str"], [93, "Set[str]"], [575, "List[str]"], [121, "str"], [94, "Set[str]"], [112, "Union[(List[str], List[int])]"], [369, "int"], [122, "str"], [442, "Vocabulary"]]
[[321, "Dict[(str, List[str])]"], [222, "int"], [333, "Dict[(str, str)]"], [216, "Token"], [706, "int"], [969, "str"], [312, "Dict[(str, TokenList)]"], [237, "int"], [120, "List[Token]"], [954, "List[Dict[(str, torch.Tensor)]]"], [264, "Dict[(str, Dict[(str, int)])]"], [223, "int"], [332, "Dict[(str, str)]"], [263, "Dict[(str, Dict[(str, int)])]"], [123, "Dict[(str, TokenIndexer)]"], [732, "Dict[(str, int)]"], [238, "int"], [953, "List[Dict[(str, torch.Tensor)]]"], [306, "Vocabulary"], [119, "List[Token]"], [968, "str"], [124, "Dict[(str, TokenIndexer)]"], [311, "Dict[(str, TokenList)]"], [567, "Dict[(str, int)]"], [320, "Dict[(str, List[str])]"], [707, "int"], [305, "Vocabulary"], [217, "Token"]]
[[62, "SequenceField"], [185, "str"], [129, "Dict[(str, int)]"], [128, "Dict[(str, int)]"], [184, "str"], [202, "bool"], [58, "int"], [61, "SequenceField"], [57, "int"], [203, "bool"]]
[[246, "int"], [126, "Token"], [245, "int"], [92, "int"], [290, "Dict[(str, int)]"], [183, "Vocabulary"], [291, "Dict[(str, int)]"], [283, "Dict[(str, List[int])]"], [129, "Dict[(str, Dict[(str, int)])]"], [84, "str"], [265, "int"], [130, "Dict[(str, Dict[(str, int)])]"], [187, "str"], [184, "Vocabulary"], [85, "str"], [181, "List[Token]"], [127, "Token"], [285, "Dict[(str, int)]"], [286, "Dict[(str, int)]"], [91, "int"], [188, "str"], [180, "List[Token]"]]
[[107, "Dict[(str, Dict[(str, int)])]"], [207, "Dict[(str, int)]"], [105, "Token"], [135, "str"], [237, "bool"], [200, "Dict[(str, List[TokenType])]"], [108, "Dict[(str, Dict[(str, int)])]"], [167, "TokenType"], [104, "Token"], [148, "TokenType"], [202, "Dict[(str, int)]"], [80, "int"], [177, "int"], [130, "Vocabulary"], [147, "TokenType"], [203, "Dict[(str, int)]"], [131, "Vocabulary"], [238, "bool"], [81, "int"], [178, "int"], [127, "List[Token]"], [128, "List[Token]"], [224, "str"], [208, "Dict[(str, int)]"], [134, "str"]]
[[421, "str"], [635, "Dict[(str, int)]"], [573, "List[int]"], [628, "Dict[(str, List[List[int]])]"], [61, "int"], [432, "int"], [196, "Dict[(str, int)]"], [68, "int"], [427, "Dict[(str, int)]"], [57, "int"], [631, "Dict[(str, int)]"], [470, "Token"], [473, "Dict[(str, Dict[(str, int)])]"], [490, "List[Token]"], [223, "str"], [433, "int"], [474, "Dict[(str, Dict[(str, int)])]"], [630, "Dict[(str, int)]"], [195, "Dict[(str, int)]"], [54, "int"], [53, "int"], [493, "Vocabulary"], [58, "int"], [489, "List[Token]"], [71, "int"], [636, "Dict[(str, int)]"], [496, "str"], [67, "int"], [72, "int"], [492, "Vocabulary"], [420, "str"], [62, "int"], [471, "Token"], [224, "str"], [497, "str"]]
[[328, "Dict[(str, int)]"], [136, "Token"], [87, "str"], [237, "str"], [94, "int"], [288, "int"], [139, "Dict[(str, Dict[(str, int)])]"], [308, "int"], [334, "Dict[(str, int)]"], [88, "str"], [326, "Dict[(str, List[int])]"], [95, "int"], [230, "List[Token]"], [233, "Vocabulary"], [289, "int"], [329, "Dict[(str, int)]"], [232, "Vocabulary"], [135, "Token"], [138, "Dict[(str, Dict[(str, int)])]"], [229, "List[Token]"], [333, "Dict[(str, int)]"], [236, "str"]]
[[338, "List[List[int]]"], [532, "Dict[(str, int)]"], [240, "Dict[(str, Dict[(str, int)])]"], [588, "List[int]"], [98, "CharacterTokenizer"], [92, "str"], [122, "int"], [327, "Vocabulary"], [107, "List[str]"], [339, "List[List[int]]"], [323, "List[Token]"], [479, "List[int]"], [589, "List[int]"], [131, "int"], [330, "str"], [116, "List[str]"], [239, "Dict[(str, Dict[(str, int)])]"], [326, "Vocabulary"], [531, "Dict[(str, int)]"], [331, "str"], [108, "List[str]"], [527, "Dict[(str, int)]"], [132, "int"], [123, "int"], [365, "List[int]"], [364, "List[int]"], [524, "Dict[(str, List[List[int]])]"], [237, "Token"], [526, "Dict[(str, int)]"], [324, "List[Token]"], [91, "str"], [99, "CharacterTokenizer"], [115, "List[str]"], [236, "Token"]]
[[252, "List[Token]"], [73, "str"], [181, "Dict[(str, Dict[(str, int)])]"], [266, "List[int]"], [406, "Dict[(str, List[int])]"], [178, "Token"], [267, "List[int]"], [251, "List[Token]"], [259, "str"], [79, "bool"], [80, "bool"], [258, "str"], [94, "List[str]"], [409, "Dict[(str, int)]"], [87, "List[str]"], [368, "int"], [177, "Token"], [388, "int"], [102, "int"], [101, "int"], [413, "Dict[(str, int)]"], [255, "Vocabulary"], [414, "Dict[(str, int)]"], [88, "List[str]"], [408, "Dict[(str, int)]"], [180, "Dict[(str, Dict[(str, int)])]"], [369, "int"], [95, "List[str]"], [254, "Vocabulary"], [72, "str"]]
[[87, "str"], [256, "Vocabulary"], [254, "List[Token]"], [344, "int"], [385, "Dict[(str, int)]"], [382, "Dict[(str, List[int])]"], [95, "bool"], [88, "str"], [389, "Dict[(str, int)]"], [390, "Dict[(str, int)]"], [150, "Dict[(str, Dict[(str, int)])]"], [345, "int"], [146, "Token"], [384, "Dict[(str, int)]"], [260, "str"], [269, "List[str]"], [147, "Token"], [102, "int"], [94, "bool"], [253, "List[Token]"], [268, "List[str]"], [257, "Vocabulary"], [261, "str"], [149, "Dict[(str, Dict[(str, int)])]"], [103, "int"], [364, "int"]]
[[256, "int"], [272, "str"], [677, "Dict[(str, Dict[(str, int)])]"], [1402, "Dict[(str, List[int])]"], [692, "Token"], [1384, "int"], [694, "bool"], [279, "List[str]"], [263, "str"], [674, "Token"], [1173, "str"], [240, "Dict[(str, int)]"], [288, "int"], [247, "List[Tuple[(str, str)]]"], [1409, "Dict[(str, int)]"], [248, "List[Tuple[(str, str)]]"], [1174, "str"], [1405, "Dict[(str, int)]"], [264, "str"], [1169, "List[Token]"], [673, "Token"], [1364, "int"], [1408, "Dict[(str, int)]"], [1133, "Vocabulary"], [255, "int"], [1404, "Dict[(str, int)]"], [1168, "List[Token]"], [278, "List[str]"], [676, "Dict[(str, Dict[(str, int)])]"], [695, "bool"], [1365, "int"], [1132, "Vocabulary"], [287, "int"], [1171, "Vocabulary"], [241, "Dict[(str, int)]"], [271, "str"]]
[[334, "Dict[(str, Dict[(str, int)])]"], [179, "bool"], [125, "bool"], [109, "Dict[(str, int)]"], [389, "List[Token]"], [1359, "List[int]"], [118, "str"], [335, "Dict[(str, Dict[(str, int)])]"], [189, "int"], [1192, "bool"], [156, "List[str]"], [1062, "int"], [1061, "int"], [1081, "int"], [1202, "List[str]"], [124, "bool"], [332, "Token"], [171, "str"], [1344, "List[int]"], [113, "Callable[([str], List[str])]"], [1342, "List[int]"], [1106, "Dict[(str, int)]"], [142, "bool"], [157, "List[str]"], [1102, "Dict[(str, int)]"], [108, "Dict[(str, int)]"], [388, "List[Token]"], [1099, "Dict[(str, List[int])]"], [172, "str"], [112, "Callable[([str], List[str])]"], [164, "List[str]"], [1345, "List[int]"], [353, "Vocabulary"], [331, "Token"], [391, "Vocabulary"], [980, "List[int]"], [1003, "List[int]"], [393, "str"], [165, "List[str]"], [180, "bool"], [1197, "bool"], [1187, "str"], [691, "List[int]"], [929, "List[int]"], [1212, "bool"], [150, "List[str]"], [149, "List[str]"], [1145, "str"], [134, "int"], [352, "Vocabulary"], [1101, "Dict[(str, int)]"], [1207, "int"], [394, "str"], [188, "int"], [1188, "str"], [1107, "Dict[(str, int)]"], [117, "str"], [141, "bool"], [133, "int"]]
[[409, "str"], [556, "List[str]"], [234, "Sequence[str]"], [539, "Instance"], [109, "str"], [251, "str"], [244, "bool"], [227, "str"], [410, "str"], [557, "List[str]"], [538, "Instance"], [226, "str"], [103, "bool"], [259, "str"], [548, "List[str]"], [563, "List[str]"], [546, "List[Token]"], [258, "str"], [235, "Sequence[str]"], [243, "bool"], [590, "Dict[(str, Field)]"], [589, "Dict[(str, Field)]"], [104, "bool"], [549, "List[str]"], [219, "Dict[(str, TokenIndexer)]"], [564, "List[str]"], [220, "Dict[(str, TokenIndexer)]"], [512, "List[Token]"], [108, "str"], [250, "str"]]
[[115, "Dict[(str, TokenIndexer)]"], [130, "str"], [393, "Instance"], [399, "List[str]"], [403, "str"], [440, "Dict[(str, Field)]"], [138, "bool"], [123, "bool"], [400, "List[str]"], [131, "str"], [114, "Dict[(str, TokenIndexer)]"], [439, "Dict[(str, Field)]"], [137, "bool"], [122, "bool"], [392, "Instance"], [404, "str"]]
[[150, "List[str]"], [119, "Tokenizer"], [125, "Dict[(str, TokenIndexer)]"], [284, "str"], [143, "List[str]"], [126, "Dict[(str, TokenIndexer)]"], [374, "str"], [283, "str"], [275, "Instance"], [151, "List[str]"], [373, "str"], [134, "int"], [133, "int"], [142, "List[str]"], [276, "Instance"], [118, "Tokenizer"]]
[[221, "List[List[str]]"], [401, "List[int]"], [106, "bool"], [385, "Instance"], [220, "List[List[str]]"], [121, "bool"], [397, "str"], [167, "str"], [393, "List[List[str]]"], [395, "List[str]"], [105, "bool"], [113, "Dict[(str, TokenIndexer)]"], [406, "Dict[(str, Field)]"], [114, "Dict[(str, TokenIndexer)]"], [168, "str"], [287, "List[int]"], [268, "List[str]"], [398, "str"], [386, "Instance"], [407, "Dict[(str, Field)]"], [122, "bool"]]
[[138, "Tokenizer"], [481, "str"], [145, "Tokenizer"], [137, "Tokenizer"], [152, "Dict[(str, TokenIndexer)]"], [160, "bool"], [431, "List[int]"], [423, "Dict[(str, int)]"], [484, "str"], [418, "List[Token]"], [485, "str"], [132, "str"], [432, "List[int]"], [424, "Dict[(str, int)]"], [474, "Instance"], [133, "str"], [159, "bool"], [151, "Dict[(str, TokenIndexer)]"], [417, "List[Token]"], [480, "str"], [473, "Instance"], [146, "Tokenizer"]]
[[345, "str"], [162, "bool"], [147, "bool"], [119, "Tokenizer"], [134, "Dict[(str, TokenIndexer)]"], [156, "str"], [142, "Dict[(str, TokenIndexer)]"], [338, "Instance"], [155, "str"], [126, "Tokenizer"], [163, "bool"], [141, "Dict[(str, TokenIndexer)]"], [349, "str"], [148, "bool"], [346, "str"], [350, "str"], [118, "Tokenizer"], [127, "Tokenizer"], [133, "Dict[(str, TokenIndexer)]"], [337, "Instance"]]
[[432, "Union[(str, int)]"], [430, "str"], [130, "Tokenizer"], [153, "bool"], [301, "Union[(str, int)]"], [145, "int"], [163, "bool"], [137, "bool"], [444, "Dict[(str, Field)]"], [459, "List[Field]"], [129, "Tokenizer"], [458, "List[Field]"], [136, "bool"], [425, "Instance"], [121, "Dict[(str, TokenIndexer)]"], [154, "bool"], [424, "Instance"], [290, "str"], [162, "bool"], [443, "Dict[(str, Field)]"], [144, "int"], [122, "Dict[(str, TokenIndexer)]"]]
[[462, "List[Token]"], [487, "Instance"], [531, "Dict[(str, Field)]"], [109, "str"], [201, "str"], [505, "List[str]"], [360, "str"], [184, "Sequence[str]"], [488, "Instance"], [176, "str"], [497, "List[str]"], [103, "bool"], [168, "Dict[(str, TokenIndexer)]"], [532, "Dict[(str, Field)]"], [177, "str"], [185, "Sequence[str]"], [208, "str"], [194, "bool"], [506, "List[str]"], [169, "Dict[(str, TokenIndexer)]"], [104, "bool"], [209, "str"], [498, "List[str]"], [193, "bool"], [359, "str"], [108, "str"], [200, "str"], [495, "List[Token]"]]
[[443, "List[str]"], [442, "List[str]"], [192, "bool"], [184, "str"], [333, "List[Token]"], [470, "Dict[(str, Field)]"], [469, "Dict[(str, Field)]"], [185, "str"], [176, "str"], [375, "str"], [257, "str"], [273, "Ontonotes"], [168, "Dict[(str, TokenIndexer)]"], [177, "str"], [371, "Ontonotes"], [433, "Instance"], [258, "str"], [169, "Dict[(str, TokenIndexer)]"], [432, "Instance"], [107, "str"], [440, "List[Token]"], [193, "bool"], [373, "str"], [108, "str"]]
[[97, "Callable[([str], Instance)]"], [84, "Callable[(], Iterable[Instance])]"], [319, "str"], [708, "str"], [734, "str"], [98, "Callable[([str], Instance)]"], [104, "Callable[([Instance], str)]"], [294, "bool"], [690, "Instance"], [600, "str"], [735, "str"], [653, "str"], [637, "str"], [689, "Instance"], [89, "str"], [601, "str"], [357, "str"], [90, "str"], [358, "str"], [730, "Instance"], [654, "str"], [713, "Instance"], [85, "Callable[(], Iterable[Instance])]"], [295, "bool"], [608, "str"], [318, "str"], [729, "Instance"], [707, "str"], [105, "Callable[([Instance], str)]"], [712, "Instance"]]
[[290, "str"], [304, "Dict[(str, Field)]"], [277, "Instance"], [113, "bool"], [119, "Tokenizer"], [293, "str"], [127, "Dict[(str, TokenIndexer)]"], [289, "str"], [278, "Instance"], [126, "Dict[(str, TokenIndexer)]"], [303, "Dict[(str, Field)]"], [286, "str"], [112, "bool"], [120, "Tokenizer"], [294, "str"], [285, "str"]]
[[304, "Dict[(str, Field)]"], [110, "Tokenizer"], [305, "Dict[(str, Field)]"], [229, "str"], [125, "bool"], [262, "str"], [117, "Dict[(str, TokenIndexer)]"], [292, "str"], [251, "str"], [178, "str"], [284, "Instance"], [296, "str"], [285, "Instance"], [116, "Dict[(str, TokenIndexer)]"], [177, "str"], [109, "Tokenizer"], [294, "str"], [124, "bool"]]
[[907, "str"], [151, "bool"], [138, "Dict[(str, TokenIndexer)]"], [890, "Instance"], [130, "Tokenizer"], [819, "str"], [122, "Tokenizer"], [889, "Instance"], [908, "str"], [529, "str"], [171, "bool"], [820, "str"], [145, "Dict[(str, TokenIndexer)]"], [152, "bool"], [897, "str"], [160, "bool"], [914, "str"], [530, "str"], [146, "Dict[(str, TokenIndexer)]"], [898, "str"], [170, "bool"], [900, "str"], [521, "str"], [813, "TextField"], [901, "str"], [915, "str"], [159, "bool"], [137, "Dict[(str, TokenIndexer)]"], [522, "str"], [131, "Tokenizer"], [123, "Tokenizer"], [812, "TextField"]]
[[151, "bool"], [811, "Tree"], [530, "Dict[(Tuple[(int, int)], str)]"], [817, "Dict[(Tuple[(int, int)], str)]"], [502, "List[Field]"], [805, "int"], [806, "int"], [388, "List[str]"], [175, "str"], [166, "str"], [661, "ListField"], [142, "Dict[(str, TokenIndexer)]"], [176, "str"], [435, "Dict[(str, Field)]"], [160, "bool"], [712, "Tree"], [150, "bool"], [389, "List[str]"], [434, "Dict[(str, Field)]"], [143, "Dict[(str, TokenIndexer)]"], [529, "Dict[(Tuple[(int, int)], str)]"], [167, "str"], [711, "Tree"], [333, "List[str]"], [381, "Instance"], [503, "List[Field]"], [398, "Tree"], [380, "Instance"], [397, "Tree"], [813, "int"], [662, "ListField"], [818, "Dict[(Tuple[(int, int)], str)]"], [159, "bool"], [392, "List[str]"], [814, "int"]]
[[144, "str"], [419, "List[str]"], [168, "bool"], [398, "List[str]"], [145, "str"], [153, "Sequence[str]"], [152, "Sequence[str]"], [425, "List[str]"], [418, "List[str]"], [409, "List[str]"], [390, "Instance"], [161, "str"], [401, "List[str]"], [462, "Dict[(str, Field)]"], [136, "Dict[(str, TokenIndexer)]"], [389, "Instance"], [426, "List[str]"], [162, "str"], [410, "List[str]"], [137, "Dict[(str, TokenIndexer)]"], [463, "Dict[(str, Field)]"], [397, "List[str]"], [169, "bool"], [402, "List[str]"]]
[[334, "List[Token]"], [284, "List[Token]"], [327, "Instance"], [124, "str"], [130, "Dict[(str, TokenIndexer)]"], [138, "bool"], [347, "Dict[(str, Field)]"], [123, "str"], [131, "Dict[(str, TokenIndexer)]"], [117, "str"], [336, "List[str]"], [302, "List[str]"], [137, "bool"], [326, "Instance"], [348, "Dict[(str, Field)]"], [116, "str"]]
[[419, "bool"], [411, "Dict[(str, TokenIndexer)]"], [360, "str"], [580, "List[Tuple[(int, int)]]"], [593, "Dict[(str, Field)]"], [412, "Dict[(str, TokenIndexer)]"], [537, "List[str]"], [131, "str"], [130, "str"], [585, "List[str]"], [573, "List[str]"], [594, "Dict[(str, Field)]"], [567, "Instance"], [150, "List[Tuple[(int, int)]]"], [460, "str"], [575, "List[str]"], [418, "bool"], [160, "List[str]"], [566, "Instance"], [461, "str"], [520, "List[str]"], [359, "str"]]
[[143, "int"], [292, "Instance"], [549, "List[Process]"], [329, "str"], [139, "Queue"], [134, "Queue"], [439, "Manager"], [257, "int"], [78, "str"], [440, "Manager"], [239, "DatasetReader"], [243, "int"], [437, "str"], [248, "int"], [79, "str"], [130, "DatasetReader"], [240, "DatasetReader"], [258, "int"], [346, "str"], [249, "int"], [443, "Queue"], [140, "Queue"], [244, "int"], [131, "DatasetReader"], [135, "Queue"], [159, "str"], [144, "int"], [548, "List[Process]"], [293, "Instance"]]
[[79, "Dict[(str, DatasetReader)]"], [98, "bool"], [423, "Instance"], [92, "str"], [83, "str"], [91, "str"], [78, "Dict[(str, DatasetReader)]"], [82, "str"], [99, "bool"], [286, "str"], [149, "Dict[(str, Iterable[Instance])]"], [150, "Dict[(str, Iterable[Instance])]"], [248, "Dict[(str, Iterable[Instance])]"], [422, "Instance"], [285, "str"]]
[[437, "Instance"], [443, "List[str]"], [256, "str"], [363, "List[str]"], [99, "str"], [436, "Instance"], [98, "str"], [446, "List[str]"], [257, "str"], [202, "bool"], [212, "bool"], [445, "List[str]"], [103, "Tuple[(str, Any)]"], [449, "List[Tuple[(str, int)]]"], [462, "Dict[(str, Field)]"], [193, "Dict[(str, TokenIndexer)]"], [102, "Tuple[(str, Any)]"], [201, "bool"], [211, "bool"], [194, "Dict[(str, TokenIndexer)]"], [450, "List[Tuple[(str, int)]]"]]
[[437, "Instance"], [448, "List[str]"], [179, "str"], [195, "Ontonotes"], [436, "Instance"], [180, "str"], [446, "List[int]"], [460, "Dict[(str, Field)]"], [117, "Dict[(str, TokenIndexer)]"], [126, "str"], [125, "str"], [134, "bool"], [444, "List[Token]"], [388, "str"], [297, "List[int]"], [283, "List[str]"], [386, "Ontonotes"], [133, "bool"], [255, "List[Token]"], [118, "Dict[(str, TokenIndexer)]"], [390, "str"], [459, "Dict[(str, Field)]"]]
[[109, "int"], [501, "Instance"], [132, "bool"], [125, "Dict[(str, TokenIndexer)]"], [243, "str"], [508, "str"], [502, "Instance"], [124, "Dict[(str, TokenIndexer)]"], [507, "str"], [242, "str"], [133, "bool"], [117, "Tokenizer"], [118, "Tokenizer"], [108, "int"]]
[[676, "List[Tuple[(int, int)]]"], [138, "Dict[(str, TokenIndexer)]"], [727, "str"], [431, "List[List[str]]"], [130, "Tokenizer"], [819, "str"], [118, "str"], [123, "str"], [416, "List[Token]"], [835, "List[Token]"], [430, "List[List[str]]"], [145, "bool"], [124, "str"], [830, "List[str]"], [841, "List[Token]"], [821, "str"], [822, "str"], [732, "List[str]"], [425, "List[List[str]]"], [204, "str"], [840, "List[Token]"], [724, "List[List[str]]"], [825, "List[Tuple[(int, int)]]"], [137, "Dict[(str, TokenIndexer)]"], [813, "Instance"], [726, "str"], [205, "str"], [131, "Tokenizer"], [636, "List[str]"], [146, "bool"], [814, "Instance"], [117, "str"], [404, "str"]]
[[2626, "str"], [302, "Tokenizer"], [735, "List[Dict]"], [852, "List[str]"], [340, "List[str]"], [349, "str"], [1671, "Instance"], [1913, "List[Field]"], [2198, "str"], [1689, "Dict[(str, Any)]"], [2049, "List[Field]"], [1681, "List[Token]"], [724, "str"], [729, "str"], [720, "str"], [1809, "List[Field]"], [2437, "Dict[(str, Any)]"], [1442, "List[List[int]]"], [469, "str"], [308, "Dict[(str, TokenIndexer)]"], [301, "Tokenizer"], [339, "List[str]"], [1981, "List[Field]"], [2802, "List[Token]"], [722, "str"], [2111, "List[Field]"], [2186, "Instance"], [776, "List[Token]"], [2345, "List[Field]"], [2518, "List[str]"], [853, "List[str]"], [1670, "Instance"], [559, "List[Token]"], [601, "str"], [3043, "List[int]"], [3051, "int"], [1695, "Dict[(str, Any)]"], [844, "str"], [3050, "int"], [332, "int"], [316, "bool"], [1680, "List[Token]"], [2192, "List[Token]"], [323, "int"], [1443, "List[List[int]]"], [2625, "str"], [1194, "Dict[(str, Any)]"], [309, "Dict[(str, TokenIndexer)]"], [1271, "List[int]"], [2196, "Dict[(str, TokenIndexer)]"], [1683, "List[int]"], [333, "int"], [617, "List[Dict]"], [3253, "List[int]"], [2194, "List[Token]"], [357, "bool"], [1454, "List[int]"], [1694, "Dict[(str, Any)]"], [3047, "List[int]"], [3255, "List[int]"], [1678, "List[Token]"], [2190, "List[Token]"], [1687, "str"], [317, "bool"], [1716, "Dict[(str, Field)]"], [730, "str"], [3044, "List[int]"], [358, "bool"], [1070, "List[Token]"], [470, "str"], [3252, "List[int]"], [548, "str"], [1676, "List[Token]"], [1717, "Dict[(str, Field)]"], [2836, "Dict[(str, List[int])]"], [740, "List[Token]"], [3046, "List[int]"], [1685, "Dict[(str, TokenIndexer)]"], [324, "int"], [350, "str"], [2200, "Dict[(str, Any)]"], [2837, "Dict[(str, List[int])]"], [590, "str"], [2804, "List[str]"], [1455, "List[int]"], [2112, "List[Field]"], [2205, "Dict[(str, Any)]"], [1914, "List[Field]"], [2438, "Dict[(str, Any)]"], [1982, "List[Field]"], [2224, "Dict[(str, Field)]"], [2050, "List[Field]"], [845, "str"], [1810, "List[Field]"], [2187, "Instance"]]
[[1858, "str"], [2027, "List[Token]"], [993, "int"], [1284, "List[Field]"], [714, "List[Token]"], [1144, "List[Field]"], [727, "List[Tuple[(int, int)]]"], [1292, "List[Field]"], [964, "str"], [1134, "List[Field]"], [717, "List[Token]"], [485, "List[str]"], [207, "List[Tuple[(int, int)]]"], [486, "List[str]"], [726, "List[Tuple[(int, int)]]"], [1855, "Token"], [206, "List[Tuple[(int, int)]]"], [973, "List[int]"], [1124, "List[Field]"], [737, "Dict[(str, Any)]"], [723, "str"], [1285, "List[Field]"], [481, "List[Token]"], [763, "Dict[(str, Field)]"], [960, "List[Token]"], [146, "str"], [2029, "List[Token]"], [1135, "List[Field]"], [1293, "List[Field]"], [713, "List[Token]"], [956, "List[List[Token]]"], [967, "List[List[Tuple[(int, int)]]]"], [706, "Instance"], [210, "Tuple[(int, int)]"], [762, "Dict[(str, Field)]"], [1143, "List[Field]"], [724, "str"], [1767, "List[str]"], [707, "Instance"], [151, "str"], [870, "Counter"], [1125, "List[Field]"], [1989, "List[Token]"], [720, "Dict[(str, TokenIndexer)]"], [987, "Dict[(str, Any)]"], [980, "List[int]"], [480, "List[Token]"], [1768, "List[str]"], [732, "List[str]"], [738, "Dict[(str, Any)]"], [644, "Token"], [953, "Instance"], [957, "List[List[Token]]"], [1864, "List[Token]"], [966, "List[List[Tuple[(int, int)]]]"], [871, "Counter"], [211, "Tuple[(int, int)]"], [992, "int"], [1966, "List[Token]"], [981, "List[int]"], [147, "str"], [962, "Dict[(str, TokenIndexer)]"], [1016, "Dict[(str, Field)]"], [1857, "str"], [1988, "List[Token]"], [152, "str"], [952, "Instance"], [1965, "List[Token]"], [719, "Dict[(str, TokenIndexer)]"], [522, "Dict[(str, List[int])]"], [523, "Dict[(str, List[int])]"], [974, "List[int]"]]
[[112, "Tokenizer"], [127, "bool"], [119, "Dict[(str, TokenIndexer)]"], [564, "List[List[int]]"], [570, "List[Token]"], [135, "int"], [647, "List[Tuple[(int, int)]]"], [588, "Dict[(str, Any)]"], [582, "List[int]"], [545, "Instance"], [482, "List[int]"], [648, "List[Tuple[(int, int)]]"], [577, "List[int]"], [120, "Dict[(str, TokenIndexer)]"], [544, "Instance"], [556, "List[List[int]]"], [128, "bool"], [550, "List[str]"], [192, "str"], [552, "str"], [502, "List[int]"], [557, "List[List[int]]"], [193, "str"], [113, "Tokenizer"], [553, "str"], [571, "List[Token]"], [330, "List[str]"], [134, "int"], [563, "List[List[int]]"], [587, "Dict[(str, Any)]"]]
[[151, "bool"], [143, "int"], [215, "str"], [112, "Tokenizer"], [127, "bool"], [119, "Dict[(str, TokenIndexer)]"], [470, "List[Tuple[(int, int)]]"], [135, "int"], [467, "str"], [469, "List[Tuple[(int, int)]]"], [150, "bool"], [586, "List[Tuple[(int, int)]]"], [483, "List[Token]"], [464, "str"], [120, "Dict[(str, TokenIndexer)]"], [128, "bool"], [355, "List[str]"], [585, "List[Tuple[(int, int)]]"], [327, "str"], [477, "List[str]"], [214, "str"], [113, "Tokenizer"], [466, "str"], [144, "int"], [134, "int"], [482, "List[Token]"]]
[[115, "Tokenizer"], [130, "bool"], [314, "List[str]"], [339, "List[List[str]]"], [184, "str"], [321, "List[str]"], [325, "str"], [306, "Instance"], [307, "Instance"], [131, "bool"], [123, "Dict[(str, TokenIndexer)]"], [326, "str"], [322, "List[str]"], [313, "List[str]"], [332, "str"], [340, "List[List[str]]"], [350, "Dict[(str, Field)]"], [349, "Dict[(str, Field)]"], [183, "str"], [116, "Tokenizer"], [333, "str"], [122, "Dict[(str, TokenIndexer)]"], [318, "str"], [317, "str"]]
[[449, "Optional[List[List[Tuple[(int, int)]]]]"], [437, "Instance"], [444, "List[List[str]]"], [268, "bool"], [259, "Dict[(str, TokenIndexer)]"], [705, "Dict[(str, Field)]"], [436, "Instance"], [573, "Optional[List[int]]"], [313, "str"], [483, "Dict[(str, Any)]"], [260, "Dict[(str, TokenIndexer)]"], [254, "int"], [564, "List[Field]"], [314, "str"], [267, "bool"], [706, "Dict[(str, Field)]"], [253, "int"], [129, "List[Set[Tuple[(int, int)]]]"], [482, "Dict[(str, Any)]"], [565, "List[Field]"], [448, "Optional[List[List[Tuple[(int, int)]]]]"], [445, "List[List[str]]"], [121, "DefaultDict[(int, List[Tuple[(int, int)]])]"], [574, "Optional[List[int]]"], [348, "DefaultDict[(int, List[Tuple[(int, int)]])]"], [130, "List[Set[Tuple[(int, int)]]]"], [120, "DefaultDict[(int, List[Tuple[(int, int)]])]"]]
[[194, "str"], [587, "Dict[(str, Any)]"], [782, "Dict[(str, Field)]"], [781, "Dict[(str, Field)]"], [570, "List[Token]"], [234, "DefaultDict[(int, List[Tuple[(int, int)]])]"], [147, "bool"], [235, "DefaultDict[(int, List[Tuple[(int, int)]])]"], [562, "Instance"], [561, "Instance"], [670, "Optional[List[int]]"], [569, "List[Token]"], [139, "Dict[(str, TokenIndexer)]"], [661, "List[Field]"], [586, "Dict[(str, Any)]"], [573, "Optional[List[List[Tuple[(int, int)]]]]"], [660, "List[Field]"], [140, "Dict[(str, TokenIndexer)]"], [193, "str"], [232, "DefaultDict[(int, List[Tuple[(int, int)]])]"], [574, "Optional[List[List[Tuple[(int, int)]]]]"], [148, "bool"], [134, "int"], [133, "int"], [669, "Optional[List[int]]"]]
[[235, "Dict[(str, str)]"], [59, "List[str]"], [58, "List[str]"], [92, "str"], [414, "List[str]"], [106, "bool"], [77, "Dict[(str, Dict[(str, str)])]"], [1125, "bool"], [791, "List[str]"], [230, "List[str]"], [168, "bool"], [329, "str"], [882, "str"], [405, "str"], [1133, "bool"], [1140, "bool"], [45, "List[str]"], [65, "List[str]"], [98, "bool"], [891, "Dict[(str, List[TableColumn])]"], [234, "Dict[(str, str)]"], [1124, "bool"], [171, "TableColumn"], [1146, "Dict[(str, List[TableColumn])]"], [413, "List[str]"], [1161, "Set[str]"], [112, "TableColumn"], [1132, "bool"], [552, "Dict[(str, List[TableColumn])]"], [76, "Dict[(str, Dict[(str, str)])]"], [967, "List[JsonDict]"], [686, "List[str]"], [46, "List[str]"], [51, "List[str]"], [1162, "Set[str]"], [231, "List[str]"], [1139, "bool"], [66, "List[str]"], [549, "List[str]"], [111, "TableColumn"], [99, "bool"], [85, "str"], [72, "Dict[(str, str)]"], [107, "bool"], [551, "Dict[(str, List[TableColumn])]"], [790, "List[str]"], [52, "List[str]"], [86, "str"], [91, "str"], [167, "bool"], [1122, "List[JsonDict]"], [71, "Dict[(str, str)]"], [881, "str"], [328, "str"]]
[[1181, "Set[TypedSpan]"], [1417, "List[str]"], [137, "List[Optional[str]]"], [166, "Set[TypedSpan]"], [576, "List[str]"], [596, "List[str]"], [547, "List[str]"], [500, "OntonotesSentence"], [132, "Optional[Tree]"], [114, "str"], [366, "List[OntonotesSentence]"], [156, "List[str]"], [127, "List[str]"], [531, "List[str]"], [561, "List[float]"], [614, "DefaultDict[(int, List[int])]"], [330, "str"], [119, "int"], [1421, "List[Optional[str]]"], [223, "str"], [157, "List[str]"], [167, "Set[TypedSpan]"], [501, "OntonotesSentence"], [523, "List[str]"], [120, "int"], [147, "List[Optional[float]]"], [568, "List[str]"], [1232, "str"], [123, "List[str]"], [506, "List[str]"], [1236, "int"], [128, "List[str]"], [115, "str"], [586, "List[List[str]]"], [255, "str"], [511, "str"], [365, "List[OntonotesSentence]"], [605, "DefaultDict[(int, List[Tuple[(int, int)]])]"], [554, "List[str]"], [153, "List[Optional[str]]"], [575, "List[str]"], [1242, "DefaultDict[(int, List[int])]"], [1240, "DefaultDict[(int, List[Tuple[(int, int)]])]"], [1233, "str"], [595, "List[str]"], [1180, "Set[TypedSpan]"], [143, "List[Optional[str]]"], [162, "List[Tuple[(str, List[str])]]"], [1419, "List[List[str]]"], [524, "List[str]"], [538, "List[str]"], [604, "DefaultDict[(int, List[Tuple[(int, int)]])]"], [539, "List[str]"], [1237, "int"], [613, "DefaultDict[(int, List[int])]"], [133, "Optional[Tree]"], [152, "List[Optional[str]]"], [1416, "List[str]"], [475, "str"], [138, "List[Optional[str]]"], [148, "List[Optional[float]]"], [124, "List[str]"], [142, "List[Optional[str]]"], [585, "List[List[str]]"], [224, "str"], [161, "List[Tuple[(str, List[str])]]"], [517, "int"], [356, "List[str]"]]
[[1462, "List[str]"], [1205, "List[str]"], [1787, "List[Tuple[(str, List[int])]]"], [189, "List[Tuple[(int, int)]]"], [58, "List[str]"], [190, "Set[Tuple[(str, Tuple[(int, int)])]]"], [648, "Optional[str]"], [598, "List[str]"], [871, "Optional[str]"], [329, "Set[Tuple[(str, Tuple[(int, int)])]]"], [1228, "List[str]"], [1230, "str"], [1794, "Optional[str]"], [1736, "List[str]"], [122, "List[T]"], [126, "int"], [873, "str"], [622, "Set[Tuple[(str, Tuple[(int, int)])]]"], [302, "List[str]"], [947, "List[str]"], [1231, "str"], [141, "int"], [149, "Callable[([List[T]], bool)]"], [121, "List[T]"], [685, "str"], [1795, "Optional[str]"], [125, "int"], [1367, "List[str]"], [865, "bool"], [656, "Optional[str]"], [148, "Callable[([List[T]], bool)]"], [132, "int"], [304, "List[str]"], [600, "List[str]"], [875, "str"], [142, "int"], [674, "str"], [864, "bool"], [945, "List[str]"], [305, "List[str]"], [869, "Optional[str]"], [1738, "List[str]"], [133, "int"]]
[[260, "bool"], [2751, "str"], [3263, "JsonDict"], [714, "Dict[(str, List[str])]"], [1535, "List[str]"], [2268, "List[Field]"], [2843, "JsonDict"], [1445, "Dict[(str, Union[(str, List[str])])]"], [3064, "List[Token]"], [1174, "str"], [236, "bool"], [3057, "List[str]"], [2838, "bool"], [1540, "Dict[(str, Any)]"], [1896, "List[Field]"], [2269, "List[Field]"], [1525, "Instance"], [229, "str"], [3431, "List[Tuple[(str, str)]]"], [292, "Optional[str]"], [3333, "str"], [2748, "str"], [308, "List[str]"], [218, "int"], [261, "bool"], [3590, "str"], [245, "bool"], [3595, "str"], [317, "Tokenizer"], [268, "bool"], [2674, "bool"], [3340, "str"], [284, "Optional[str]"], [210, "bool"], [254, "bool"], [1786, "Dict[(str, Field)]"], [217, "int"], [1533, "str"], [1485, "Dict[(str, Any)]"], [3382, "JsonDict"], [1432, "Dict[(str, Union[(str, List[str])])]"], [1325, "str"], [323, "Dict[(str, TokenIndexer)]"], [1687, "Dict[(str, List[str])]"], [1575, "Dict[(str, str)]"], [1545, "Dict[(str, Union[(str, List[str])])]"], [1556, "List[Token]"], [1567, "List[Dict[(str, int)]]"], [302, "Optional[List[str]]"], [211, "bool"], [276, "Optional[str]"], [1895, "List[Field]"], [3262, "JsonDict"], [269, "bool"], [301, "Optional[List[str]]"], [309, "List[str]"], [253, "bool"], [3062, "JsonDict"], [1555, "List[Token]"], [1785, "Dict[(str, Field)]"], [2304, "List[Field]"], [846, "JsonDict"], [2301, "List[Field]"], [1562, "int"], [228, "str"], [850, "bool"], [2305, "List[Field]"], [1568, "List[Dict[(str, int)]]"], [847, "JsonDict"], [1175, "str"], [2675, "bool"], [3381, "JsonDict"], [2411, "JsonDict"], [2747, "str"], [715, "Dict[(str, List[str])]"], [2799, "Any"], [3430, "List[Tuple[(str, str)]]"], [2795, "Any"], [851, "bool"], [3267, "JsonDict"], [324, "Dict[(str, TokenIndexer)]"], [3594, "str"], [2405, "List[int]"], [3334, "str"], [3591, "str"], [237, "bool"], [1190, "int"], [316, "Tokenizer"], [972, "List[str]"], [1526, "Instance"], [3341, "str"], [293, "Optional[str]"], [1576, "Dict[(str, str)]"], [2680, "JsonDict"], [3387, "JsonDict"], [1550, "Dict[(str, Union[(str, List[str])])]"], [283, "Optional[str]"], [246, "bool"], [3058, "List[str]"], [2404, "List[int]"], [2837, "bool"], [2794, "Any"], [2800, "Any"], [3272, "JsonDict"], [3060, "KnowledgeGraphField"], [1761, "KnowledgeGraphField"], [275, "Optional[str]"]]
[[144, "str"], [462, "Instance"], [222, "Tokenizer"], [630, "List[Field]"], [526, "List[str]"], [237, "int"], [887, "bool"], [469, "List[str]"], [304, "str"], [892, "str"], [221, "Tokenizer"], [228, "str"], [207, "bool"], [305, "str"], [631, "List[Field]"], [893, "str"], [215, "bool"], [752, "List[Field]"], [888, "bool"], [198, "Dict[(str, TokenIndexer)]"], [229, "str"], [463, "Instance"], [527, "List[str]"], [467, "List[str]"], [199, "Dict[(str, TokenIndexer)]"], [406, "List[str]"], [216, "bool"], [753, "List[Field]"], [206, "bool"], [349, "List[str]"], [143, "str"], [236, "int"]]
[[203, "str"], [151, "bool"], [141, "int"], [152, "bool"], [133, "Dict[(str, TokenIndexer)]"], [327, "Instance"], [356, "Dict[(str, Field)]"], [132, "Dict[(str, TokenIndexer)]"], [335, "List[str]"], [123, "bool"], [338, "List[str]"], [347, "str"], [328, "Instance"], [346, "str"], [355, "Dict[(str, Field)]"], [204, "str"], [334, "List[str]"], [339, "List[str]"], [140, "int"], [124, "bool"]]
[[153, "str"], [179, "bool"], [187, "bool"], [161, "bool"], [149, "str"], [154, "str"], [360, "str"], [171, "bool"], [213, "bool"], [541, "Dict[(str, Field)]"], [542, "Dict[(str, Field)]"], [223, "bool"], [203, "int"], [361, "str"], [641, "List[Field]"], [522, "List[str]"], [523, "List[str]"], [202, "int"], [527, "Dict[(str, Dict[(str, str)])]"], [526, "Dict[(str, Dict[(str, str)])]"], [532, "List[str]"], [170, "bool"], [195, "Dict[(str, TokenIndexer)]"], [517, "Instance"], [180, "bool"], [222, "bool"], [188, "bool"], [651, "List[Field]"], [533, "List[str]"], [642, "List[Field]"], [162, "bool"], [194, "Dict[(str, TokenIndexer)]"], [516, "Instance"], [650, "List[Field]"], [214, "bool"], [148, "str"]]
[[177, "bool"], [593, "List[Field]"], [679, "Dict[(str, Any)]"], [162, "Dict[(str, TokenIndexer)]"], [381, "List[str]"], [140, "bool"], [605, "Dict[(str, int)]"], [176, "bool"], [700, "Dict[(str, Field)]"], [147, "Tokenizer"], [680, "Dict[(str, Any)]"], [495, "List[str]"], [269, "str"], [429, "List[List[str]]"], [485, "Instance"], [594, "List[Field]"], [744, "List[Field]"], [153, "Dict[(str, TokenIndexer)]"], [604, "Dict[(str, int)]"], [139, "bool"], [701, "Dict[(str, Field)]"], [169, "Dict[(str, TokenIndexer)]"], [484, "Instance"], [416, "List[List[str]]"], [154, "Dict[(str, TokenIndexer)]"], [428, "List[List[str]]"], [392, "List[List[str]]"], [337, "str"], [745, "List[Field]"], [491, "str"], [170, "Dict[(str, TokenIndexer)]"], [493, "List[List[List[JsonDict]]]"], [505, "str"], [270, "str"], [163, "Dict[(str, TokenIndexer)]"], [347, "str"], [146, "Tokenizer"], [500, "List[List[str]]"]]
[[15, "str"], [8, "Dict"], [9, "Dict"], [14, "str"]]
[[1456, "List[Field]"], [225, "int"], [826, "List[str]"], [240, "Tokenizer"], [1574, "List[Field]"], [281, "bool"], [247, "Dict[(str, TokenIndexer)]"], [1026, "List[str]"], [1081, "Dict[(str, Any)]"], [1453, "List[Field]"], [263, "bool"], [296, "bool"], [1792, "List[Field]"], [201, "str"], [257, "Dict[(str, TokenIndexer)]"], [1185, "List[Field]"], [1032, "List[Token]"], [984, "JsonDict"], [2096, "bool"], [218, "bool"], [1007, "Instance"], [2100, "str"], [1951, "List[Field]"], [1457, "List[Field]"], [1575, "List[Field]"], [208, "int"], [231, "bool"], [264, "bool"], [1006, "Instance"], [565, "str"], [272, "List[str]"], [2101, "str"], [186, "bool"], [1082, "Dict[(str, Any)]"], [200, "str"], [248, "Dict[(str, TokenIndexer)]"], [289, "int"], [1336, "List[Field]"], [417, "str"], [217, "bool"], [273, "List[str]"], [1648, "JsonDict"], [232, "bool"], [192, "str"], [2017, "List[Field]"], [209, "int"], [474, "str"], [2095, "bool"], [1643, "Instance"], [282, "bool"], [224, "int"], [1017, "str"], [418, "str"], [193, "str"], [185, "bool"], [1027, "List[str]"], [241, "Tokenizer"], [1015, "List[str]"], [1184, "List[Field]"], [1642, "Instance"], [1967, "List[Field]"], [290, "int"], [958, "str"], [1013, "str"], [297, "bool"], [1033, "List[Token]"], [1018, "str"], [1335, "List[Field]"], [256, "Dict[(str, TokenIndexer)]"]]
[[270, "torch.IntTensor"], [84, "Vocabulary"], [613, "bool"], [106, "float"], [100, "Seq2SeqEncoder"], [130, "InitializerApplicator"], [107, "float"], [269, "torch.IntTensor"], [114, "int"], [94, "Seq2VecEncoder"], [89, "TextFieldEmbedder"], [95, "Seq2VecEncoder"], [265, "Dict[(str, torch.LongTensor)]"], [88, "TextFieldEmbedder"], [393, "Dict[(str, torch.Tensor)]"], [469, "Dict[(str, torch.Tensor)]"], [614, "bool"], [85, "Vocabulary"], [121, "str"], [129, "InitializerApplicator"], [113, "int"], [122, "str"], [99, "Seq2SeqEncoder"], [266, "Dict[(str, torch.LongTensor)]"]]
[[136, "Vocabulary"], [750, "Params"], [390, "List[Dict[(str, numpy.ndarray)]]"], [116, "Set[str]"], [983, "int"], [758, "str"], [141, "RegularizerApplicator"], [754, "str"], [1121, "Params"], [294, "List[Instance]"], [1039, "Dict[(str, str)]"], [759, "str"], [263, "Instance"], [117, "Set[str]"], [587, "int"], [766, "int"], [140, "RegularizerApplicator"], [551, "Dict[(str, torch.Tensor)]"], [1120, "Params"], [262, "Instance"], [570, "bool"], [1038, "Dict[(str, str)]"], [976, "str"], [749, "Params"], [293, "List[Instance]"], [699, "str"], [391, "List[Dict[(str, numpy.ndarray)]]"], [552, "Dict[(str, torch.Tensor)]"], [137, "Vocabulary"], [588, "int"], [974, "Params"], [323, "int"], [700, "str"], [569, "bool"], [978, "str"], [753, "str"]]
[[1090, "Dict[(str, torch.Tensor)]"], [167, "TextFieldEmbedder"], [579, "torch.LongTensor"], [587, "List[Dict[(str, Any)]]"], [199, "Embedding"], [176, "int"], [208, "float"], [230, "InitializerApplicator"], [207, "float"], [1788, "bool"], [575, "Dict[(str, torch.LongTensor)]"], [239, "Optional[RegularizerApplicator]"], [827, "torch.Tensor"], [1342, "torch.Tensor"], [1344, "torch.Tensor"], [1592, "torch.Tensor"], [193, "FeedForward"], [690, "torch.Tensor"], [166, "TextFieldEmbedder"], [1348, "torch.Tensor"], [814, "torch.Tensor"], [177, "int"], [1596, "torch.Tensor"], [231, "InitializerApplicator"], [221, "float"], [594, "torch.LongTensor"], [576, "Dict[(str, torch.LongTensor)]"], [222, "float"], [182, "int"], [172, "Seq2SeqEncoder"], [1787, "bool"], [187, "FeedForward"], [186, "FeedForward"], [162, "Vocabulary"], [200, "Embedding"], [215, "float"], [926, "Dict[(str, torch.Tensor)]"], [580, "torch.LongTensor"], [586, "List[Dict[(str, Any)]]"], [194, "FeedForward"], [1346, "torch.Tensor"], [163, "Vocabulary"], [1594, "torch.Tensor"], [183, "int"], [214, "float"], [593, "torch.LongTensor"], [173, "Seq2SeqEncoder"], [238, "Optional[RegularizerApplicator]"]]
[[558, "Dict[(str, torch.LongTensor)]"], [184, "bool"], [144, "str"], [561, "torch.LongTensor"], [151, "Optional[FeedForward]"], [139, "Seq2SeqEncoder"], [209, "InitializerApplicator"], [216, "Optional[RegularizerApplicator]"], [176, "bool"], [159, "Optional[str]"], [166, "bool"], [158, "Optional[str]"], [568, "List[Dict[(str, Any)]]"], [140, "Seq2SeqEncoder"], [217, "Optional[RegularizerApplicator]"], [130, "Vocabulary"], [569, "List[Dict[(str, Any)]]"], [193, "Optional[float]"], [938, "bool"], [165, "bool"], [134, "TextFieldEmbedder"], [557, "Dict[(str, torch.LongTensor)]"], [175, "bool"], [201, "bool"], [562, "torch.LongTensor"], [884, "Dict[(str, torch.Tensor)]"], [194, "Optional[float]"], [129, "Vocabulary"], [185, "bool"], [208, "InitializerApplicator"], [200, "bool"], [152, "Optional[FeedForward]"], [885, "Dict[(str, torch.Tensor)]"], [937, "bool"], [143, "str"], [133, "TextFieldEmbedder"]]
[[770, "bool"], [128, "Vocabulary"], [609, "Dict[(str, torch.Tensor)]"], [132, "TextFieldEmbedder"], [173, "InitializerApplicator"], [166, "bool"], [142, "bool"], [358, "List[Dict[(str, Any)]]"], [346, "Dict[(str, torch.LongTensor)]"], [769, "bool"], [181, "Optional[RegularizerApplicator]"], [174, "InitializerApplicator"], [137, "Seq2SeqEncoder"], [351, "torch.LongTensor"], [131, "TextFieldEmbedder"], [165, "bool"], [158, "str"], [127, "Vocabulary"], [138, "Seq2SeqEncoder"], [347, "Dict[(str, torch.LongTensor)]"], [486, "Dict[(str, torch.Tensor)]"], [350, "torch.LongTensor"], [182, "Optional[RegularizerApplicator]"], [159, "str"], [151, "Optional[str]"], [141, "bool"], [357, "List[Dict[(str, Any)]]"], [150, "Optional[str]"]]
[[168, "Elmo"], [179, "bool"], [193, "Optional[RegularizerApplicator]"], [186, "InitializerApplicator"], [762, "Dict[(str, torch.LongTensor)]"], [162, "Union[(FeedForward, Maxout)]"], [171, "bool"], [135, "TextFieldEmbedder"], [160, "float"], [1568, "Vocabulary"], [167, "Elmo"], [141, "float"], [146, "FeedForward"], [194, "Optional[RegularizerApplicator]"], [130, "Vocabulary"], [1570, "Params"], [140, "float"], [155, "Seq2SeqEncoder"], [131, "Vocabulary"], [766, "torch.LongTensor"], [1360, "Dict[(str, torch.Tensor)]"], [1521, "bool"], [152, "Seq2SeqEncoder"], [134, "TextFieldEmbedder"], [151, "Seq2SeqEncoder"], [180, "bool"], [156, "Seq2SeqEncoder"], [1520, "bool"], [185, "InitializerApplicator"], [761, "Dict[(str, torch.LongTensor)]"], [1427, "Dict[(str, torch.Tensor)]"], [163, "Union[(FeedForward, Maxout)]"], [159, "float"], [172, "bool"], [765, "torch.LongTensor"], [145, "FeedForward"], [1571, "Params"]]
[[90, "float"], [97, "int"], [127, "InitializerApplicator"], [81, "Vocabulary"], [85, "Union[(str, BertModel)]"], [121, "bool"], [267, "Dict[(str, torch.LongTensor)]"], [615, "bool"], [105, "str"], [98, "int"], [128, "InitializerApplicator"], [120, "bool"], [106, "str"], [271, "torch.IntTensor"], [268, "Dict[(str, torch.LongTensor)]"], [614, "bool"], [272, "torch.IntTensor"], [112, "str"], [82, "Vocabulary"], [91, "float"], [394, "Dict[(str, torch.Tensor)]"], [86, "Union[(str, BertModel)]"], [470, "Dict[(str, torch.Tensor)]"], [113, "str"]]
[[119, "Module"], [607, "Archive"], [307, "str"], [132, "bool"], [626, "str"], [457, "str"], [804, "Dict[(str, Any)]"], [128, "str"], [300, "Dict[(str, str)]"], [611, "str"], [608, "Archive"], [294, "str"], [308, "str"], [113, "Params"], [1020, "str"], [805, "Dict[(str, Any)]"], [295, "str"], [131, "bool"], [299, "Dict[(str, str)]"], [112, "Params"], [106, "Model"], [289, "str"], [632, "str"], [127, "str"], [320, "str"], [614, "int"], [613, "int"], [107, "Model"], [290, "str"], [625, "str"], [118, "Module"]]
[[1101, "Optional[int]"], [163, "float"], [349, "List[Dict[(str, Any)]]"], [146, "TextFieldEmbedder"], [143, "Vocabulary"], [1103, "List[str]"], [1097, "TextIO"], [1149, "List[str]"], [1105, "List[str]"], [1064, "List[str]"], [147, "TextFieldEmbedder"], [524, "Dict[(str, torch.Tensor)]"], [1151, "List[str]"], [186, "float"], [1050, "TextIO"], [1045, "TextIO"], [1065, "List[str]"], [142, "Vocabulary"], [1058, "List[str]"], [350, "List[Dict[(str, Any)]]"], [333, "Dict[(str, torch.LongTensor)]"], [1291, "List[str]"], [185, "float"], [1099, "TextIO"], [1049, "TextIO"], [343, "torch.LongTensor"], [648, "Dict[(str, torch.Tensor)]"], [338, "torch.LongTensor"], [194, "bool"], [152, "Seq2SeqEncoder"], [156, "int"], [171, "InitializerApplicator"], [1054, "Optional[int]"], [1062, "List[str]"], [1061, "List[str]"], [1116, "List[str]"], [1145, "TextIO"], [342, "torch.LongTensor"], [170, "InitializerApplicator"], [1107, "List[str]"], [1147, "Optional[int]"], [1153, "List[str]"], [841, "bool"], [1046, "TextIO"], [334, "Dict[(str, torch.LongTensor)]"], [1292, "List[str]"], [178, "Optional[RegularizerApplicator]"], [337, "torch.LongTensor"], [1053, "Optional[int]"], [153, "Seq2SeqEncoder"], [840, "bool"], [193, "bool"], [1143, "TextIO"], [157, "int"], [179, "Optional[RegularizerApplicator]"], [162, "float"], [1124, "List[str]"], [1057, "List[str]"]]
[[72, "Vocabulary"], [109, "InitializerApplicator"], [85, "float"], [100, "bool"], [86, "float"], [75, "TextFieldEmbedder"], [92, "int"], [71, "Vocabulary"], [82, "Seq2SeqEncoder"], [93, "int"], [101, "bool"], [81, "Seq2SeqEncoder"], [108, "InitializerApplicator"], [76, "TextFieldEmbedder"]]
[[320, "InitializerApplicator"], [1410, "bool"], [788, "int"], [307, "bool"], [790, "torch.Tensor"], [299, "int"], [530, "torch.Tensor"], [526, "torch.Tensor"], [791, "torch.Tensor"], [689, "torch.Tensor"], [796, "torch.Tensor"], [1036, "Union[(torch.Tensor, List[torch.Tensor])]"], [283, "TextFieldEmbedder"], [527, "torch.Tensor"], [278, "Vocabulary"], [699, "torch.Tensor"], [321, "InitializerApplicator"], [1009, "Dict[(str, torch.LongTensor)]"], [534, "int"], [533, "int"], [182, "torch.Tensor"], [696, "torch.Tensor"], [690, "torch.Tensor"], [793, "torch.Tensor"], [1409, "bool"], [695, "torch.Tensor"], [314, "bool"], [300, "int"], [288, "Seq2SeqEncoder"], [794, "torch.Tensor"], [949, "int"], [950, "int"], [282, "TextFieldEmbedder"], [107, "int"], [185, "torch.Tensor"], [293, "float"], [306, "bool"], [1010, "Dict[(str, torch.LongTensor)]"], [102, "int"], [181, "torch.Tensor"], [693, "torch.Tensor"], [698, "torch.Tensor"], [186, "torch.Tensor"], [289, "Seq2SeqEncoder"], [292, "float"], [313, "bool"], [529, "torch.Tensor"], [1037, "Union[(torch.Tensor, List[torch.Tensor])]"], [103, "int"], [108, "int"], [279, "Vocabulary"]]
[[1478, "bool"], [381, "Dict[(str, torch.LongTensor)]"], [466, "int"], [1551, "int"], [885, "Linear"], [886, "Linear"], [878, "Embedding"], [1227, "torch.LongTensor"], [1294, "torch.Tensor"], [1553, "int"], [160, "Seq2VecEncoder"], [402, "torch.LongTensor"], [1603, "torch.Tensor"], [170, "int"], [1548, "int"], [178, "List[str]"], [1295, "torch.Tensor"], [150, "TextFieldEmbedder"], [526, "Dict[(str, torch.LongTensor)]"], [185, "str"], [373, "torch.Tensor"], [1033, "GRUCell"], [146, "Vocabulary"], [391, "torch.LongTensor"], [155, "float"], [1477, "bool"], [1426, "Dict[(str, torch.Tensor)]"], [471, "Optional[Dict[(str, torch.LongTensor)]]"], [1035, "Linear"], [186, "str"], [385, "UnigramRecall"], [1606, "Dict[(str, torch.Tensor)]"], [993, "torch.LongTensor"], [154, "float"], [192, "int"], [1554, "int"], [873, "torch.LongTensor"], [163, "int"], [875, "Dict[(str, torch.LongTensor)]"], [1031, "Embedding"], [881, "GRUCell"], [149, "TextFieldEmbedder"], [877, "Embedding"], [465, "int"], [145, "Vocabulary"], [576, "Dict[(str, torch.Tensor)]"], [1607, "Dict[(str, torch.Tensor)]"], [384, "UnigramRecall"], [562, "torch.LongTensor"], [1550, "int"], [1602, "torch.Tensor"], [193, "int"], [1225, "torch.LongTensor"], [1223, "torch.LongTensor"], [380, "Dict[(str, torch.LongTensor)]"], [169, "int"], [374, "torch.Tensor"], [177, "List[str]"], [880, "GRUCell"], [285, "int"], [525, "Dict[(str, torch.LongTensor)]"], [164, "int"], [1029, "torch.LongTensor"], [159, "Seq2VecEncoder"]]
[[163, "InitializerApplicator"], [1023, "bool"], [172, "Optional[RegularizerApplicator]"], [124, "TextFieldEmbedder"], [120, "Vocabulary"], [156, "float"], [365, "Dict[(str, torch.LongTensor)]"], [144, "Seq2SeqEncoder"], [131, "Seq2SeqEncoder"], [148, "FeedForward"], [362, "Dict[(str, torch.LongTensor)]"], [139, "FeedForward"], [152, "FeedForward"], [149, "FeedForward"], [164, "InitializerApplicator"], [1022, "bool"], [145, "Seq2SeqEncoder"], [370, "torch.IntTensor"], [366, "Dict[(str, torch.LongTensor)]"], [135, "SimilarityFunction"], [153, "FeedForward"], [140, "FeedForward"], [171, "Optional[RegularizerApplicator]"], [134, "SimilarityFunction"], [130, "Seq2SeqEncoder"], [376, "List[Dict[(str, Any)]]"], [369, "torch.IntTensor"], [121, "Vocabulary"], [361, "Dict[(str, torch.LongTensor)]"], [125, "TextFieldEmbedder"], [157, "float"], [377, "List[Dict[(str, Any)]]"]]
[[117, "Vocabulary"], [118, "Vocabulary"], [161, "InitializerApplicator"], [127, "FeedForward"], [132, "SimilarityFunction"], [827, "bool"], [314, "torch.IntTensor"], [121, "TextFieldEmbedder"], [320, "List[Dict[(str, Any)]]"], [138, "FeedForward"], [142, "FeedForward"], [321, "List[Dict[(str, Any)]]"], [310, "Dict[(str, torch.LongTensor)]"], [154, "Optional[Seq2SeqEncoder]"], [313, "torch.IntTensor"], [307, "Dict[(str, torch.LongTensor)]"], [128, "FeedForward"], [153, "Optional[Seq2SeqEncoder]"], [146, "Optional[Seq2SeqEncoder]"], [828, "bool"], [160, "InitializerApplicator"], [168, "Optional[RegularizerApplicator]"], [311, "Dict[(str, torch.LongTensor)]"], [141, "FeedForward"], [122, "TextFieldEmbedder"], [145, "Optional[Seq2SeqEncoder]"], [133, "SimilarityFunction"], [308, "Dict[(str, torch.LongTensor)]"], [137, "FeedForward"], [169, "Optional[RegularizerApplicator]"]]
[[1908, "torch.Tensor"], [702, "torch.LongTensor"], [255, "Embedding"], [2343, "torch.Tensor"], [1063, "torch.Tensor"], [232, "int"], [1046, "torch.Tensor"], [2609, "torch.LongTensor"], [689, "torch.LongTensor"], [799, "torch.Tensor"], [1403, "Dict[(str, torch.Tensor)]"], [228, "Seq2SeqEncoder"], [263, "bool"], [1483, "torch.Tensor"], [1029, "torch.Tensor"], [2676, "bool"], [221, "TextFieldEmbedder"], [2058, "torch.Tensor"], [1603, "torch.Tensor"], [254, "Embedding"], [241, "FeedForward"], [218, "Vocabulary"], [237, "int"], [2345, "torch.Tensor"], [1332, "Dict[(str, torch.Tensor)]"], [691, "List[Dict[(str, Any)]]"], [1607, "torch.Tensor"], [1914, "torch.Tensor"], [274, "float"], [1599, "torch.Tensor"], [703, "torch.Tensor"], [688, "torch.LongTensor"], [287, "InitializerApplicator"], [684, "Dict[(str, torch.LongTensor)]"], [273, "float"], [262, "bool"], [1609, "torch.Tensor"], [2523, "torch.Tensor"], [238, "int"], [2675, "bool"], [295, "Optional[RegularizerApplicator]"], [1601, "torch.Tensor"], [217, "Vocabulary"], [242, "FeedForward"], [248, "FeedForward"], [685, "Dict[(str, torch.LongTensor)]"], [692, "List[Dict[(str, Any)]]"], [1605, "torch.Tensor"], [695, "torch.LongTensor"], [281, "float"], [2307, "torch.Tensor"], [2054, "torch.Tensor"], [2056, "torch.Tensor"], [227, "Seq2SeqEncoder"], [288, "InitializerApplicator"], [249, "FeedForward"], [296, "Optional[RegularizerApplicator]"], [222, "TextFieldEmbedder"], [2060, "torch.Tensor"], [1910, "torch.Tensor"], [1912, "torch.Tensor"], [280, "float"], [2521, "torch.Tensor"], [696, "torch.LongTensor"], [231, "int"], [2611, "torch.LongTensor"], [2525, "torch.Tensor"]]
[[146, "int"], [133, "str"], [138, "str"], [51, "List[Model]"], [132, "str"], [129, "Params"], [137, "str"], [128, "Params"], [145, "int"], [52, "List[Model]"]]
[[118, "Vocabulary"], [1073, "bool"], [375, "List[Dict[(str, Any)]]"], [157, "Seq2VecEncoder"], [154, "BiMpmMatching"], [365, "Dict[(str, torch.LongTensor)]"], [150, "BiMpmMatching"], [1072, "bool"], [134, "Seq2SeqEncoder"], [173, "InitializerApplicator"], [167, "float"], [979, "Dict[(str, torch.Tensor)]"], [137, "BiMpmMatching"], [141, "BiMpmMatching"], [145, "Seq2SeqEncoder"], [181, "Optional[RegularizerApplicator]"], [128, "BiMpmMatching"], [166, "float"], [123, "TextFieldEmbedder"], [174, "InitializerApplicator"], [138, "BiMpmMatching"], [369, "torch.LongTensor"], [149, "BiMpmMatching"], [161, "FeedForward"], [146, "Seq2SeqEncoder"], [129, "BiMpmMatching"], [133, "Seq2SeqEncoder"], [360, "Dict[(str, torch.LongTensor)]"], [142, "BiMpmMatching"], [532, "List[torch.Tensor]"], [523, "List[torch.Tensor]"], [119, "Vocabulary"], [376, "List[Dict[(str, Any)]]"], [182, "Optional[RegularizerApplicator]"], [122, "TextFieldEmbedder"], [361, "Dict[(str, torch.LongTensor)]"], [368, "torch.LongTensor"], [158, "Seq2VecEncoder"], [533, "List[torch.Tensor]"], [524, "List[torch.Tensor]"], [153, "BiMpmMatching"], [364, "Dict[(str, torch.LongTensor)]"], [911, "Dict[(str, torch.Tensor)]"], [162, "FeedForward"]]
[[226, "Embedding"], [834, "Dict[(str, torch.Tensor)]"], [1712, "Tree"], [1086, "torch.LongTensor"], [158, "float"], [1722, "List[str]"], [1242, "torch.LongTensor"], [1245, "List[List[str]]"], [1561, "List[SpanInformation]"], [508, "List[Dict[(str, Any)]]"], [1151, "List[Tree]"], [216, "Seq2SeqEncoder"], [235, "InitializerApplicator"], [1247, "List[List[str]]"], [171, "int"], [251, "str"], [145, "int"], [505, "torch.LongTensor"], [215, "Seq2SeqEncoder"], [513, "Dict[(str, torch.LongTensor)]"], [968, "List[List[str]]"], [170, "int"], [2057, "bool"], [201, "Vocabulary"], [1717, "Dict[(Tuple[(int, int)], str)]"], [509, "List[Dict[(str, Any)]]"], [1244, "List[List[str]]"], [519, "torch.LongTensor"], [1237, "torch.FloatTensor"], [1719, "List[str]"], [500, "Dict[(str, torch.LongTensor)]"], [219, "FeedForward"], [243, "Optional[RegularizerApplicator]"], [1056, "Dict[(str, torch.Tensor)]"], [967, "List[List[str]]"], [504, "torch.LongTensor"], [1310, "List[Tree]"], [227, "Embedding"], [1738, "int"], [740, "torch.LongTensor"], [236, "InitializerApplicator"], [1720, "List[str]"], [200, "Vocabulary"], [210, "SpanExtractor"], [146, "int"], [1238, "torch.FloatTensor"], [205, "TextFieldEmbedder"], [520, "torch.LongTensor"], [151, "int"], [501, "Dict[(str, torch.LongTensor)]"], [1756, "List[str]"], [165, "float"], [211, "SpanExtractor"], [1240, "torch.LongTensor"], [152, "int"], [1740, "int"], [204, "TextFieldEmbedder"], [220, "FeedForward"], [244, "Optional[RegularizerApplicator]"], [164, "float"], [1713, "Tree"], [1757, "List[str]"], [2058, "bool"], [1479, "Dict[(Tuple[(int, int)], str)]"], [250, "str"], [157, "float"], [512, "Dict[(str, torch.LongTensor)]"]]
[[136, "Vocabulary"], [141, "TextFieldEmbedder"], [4142, "bool"], [936, "List[Dict[(str, Any)]]"], [935, "List[Dict[(str, Any)]]"], [183, "Optional[RegularizerApplicator]"], [920, "torch.LongTensor"], [900, "torch.LongTensor"], [140, "TextFieldEmbedder"], [896, "Dict[(str, torch.LongTensor)]"], [928, "torch.LongTensor"], [167, "float"], [905, "torch.LongTensor"], [3496, "Dict[(str, Any)]"], [190, "List[str]"], [3493, "Dict[(str, Any)]"], [913, "torch.LongTensor"], [157, "MatrixAttention"], [163, "Seq2SeqEncoder"], [891, "Dict[(str, torch.LongTensor)]"], [166, "float"], [3497, "Dict[(str, Any)]"], [174, "InitializerApplicator"], [146, "int"], [158, "MatrixAttention"], [904, "torch.LongTensor"], [189, "List[str]"], [899, "torch.LongTensor"], [152, "Seq2SeqEncoder"], [147, "int"], [4143, "bool"], [137, "Vocabulary"], [895, "Dict[(str, torch.LongTensor)]"], [175, "InitializerApplicator"], [182, "Optional[RegularizerApplicator]"], [892, "Dict[(str, torch.LongTensor)]"], [153, "Seq2SeqEncoder"], [919, "torch.LongTensor"], [929, "torch.LongTensor"], [914, "torch.LongTensor"], [162, "Seq2SeqEncoder"]]
[[132, "Dict[(str, torch.LongTensor)]"], [462, "Params"], [415, "bool"], [463, "Params"], [156, "List[Dict[(str, Any)]]"], [148, "torch.IntTensor"], [458, "Vocabulary"], [102, "List[BidirectionalAttentionFlow]"], [133, "Dict[(str, torch.LongTensor)]"], [137, "Dict[(str, torch.LongTensor)]"], [149, "torch.IntTensor"], [169, "List[Dict[(str, torch.Tensor)]]"], [140, "torch.IntTensor"], [136, "Dict[(str, torch.LongTensor)]"], [414, "bool"], [103, "List[BidirectionalAttentionFlow]"], [459, "Vocabulary"], [155, "List[Dict[(str, Any)]]"], [526, "List[Dict[(str, torch.Tensor)]]"], [141, "torch.IntTensor"]]
[[17, "torch.Tensor"], [12, "torch.Tensor"], [13, "torch.Tensor"], [18, "torch.Tensor"]]
[[163, "SimilarityFunction"], [146, "TextFieldEmbedder"], [143, "Vocabulary"], [178, "float"], [202, "Optional[RegularizerApplicator]"], [496, "Dict[(str, torch.LongTensor)]"], [493, "Dict[(str, torch.LongTensor)]"], [1571, "bool"], [147, "TextFieldEmbedder"], [193, "InitializerApplicator"], [497, "Dict[(str, torch.LongTensor)]"], [142, "Vocabulary"], [947, "torch.Tensor"], [1092, "torch.Tensor"], [1648, "torch.Tensor"], [186, "bool"], [168, "Seq2SeqEncoder"], [158, "Seq2SeqEncoder"], [172, "Seq2SeqEncoder"], [159, "Seq2SeqEncoder"], [179, "float"], [194, "InitializerApplicator"], [506, "torch.IntTensor"], [507, "torch.IntTensor"], [501, "torch.IntTensor"], [152, "int"], [201, "Optional[RegularizerApplicator]"], [512, "List[Dict[(str, Any)]]"], [169, "Seq2SeqEncoder"], [1572, "bool"], [164, "SimilarityFunction"], [185, "bool"], [173, "Seq2SeqEncoder"], [500, "torch.IntTensor"], [1650, "torch.Tensor"], [513, "List[Dict[(str, Any)]]"], [492, "Dict[(str, torch.LongTensor)]"], [153, "int"]]
[[1431, "bool"], [433, "List[Dict[(str, Any)]]"], [124, "TextFieldEmbedder"], [158, "InitializerApplicator"], [120, "Vocabulary"], [414, "Dict[(str, torch.LongTensor)]"], [151, "float"], [166, "Optional[RegularizerApplicator]"], [417, "torch.IntTensor"], [136, "Seq2SeqEncoder"], [1432, "bool"], [131, "int"], [150, "float"], [159, "InitializerApplicator"], [142, "MatrixAttention"], [409, "Dict[(str, torch.LongTensor)]"], [137, "Seq2SeqEncoder"], [426, "torch.IntTensor"], [167, "Optional[RegularizerApplicator]"], [147, "Seq2SeqEncoder"], [146, "Seq2SeqEncoder"], [130, "int"], [141, "MatrixAttention"], [413, "Dict[(str, torch.LongTensor)]"], [418, "torch.IntTensor"], [121, "Vocabulary"], [410, "Dict[(str, torch.LongTensor)]"], [432, "List[Dict[(str, Any)]]"], [425, "torch.IntTensor"], [125, "TextFieldEmbedder"]]
[[1854, "Dict[(str, Any)]"], [210, "int"], [1754, "torch.Tensor"], [181, "InitializerApplicator"], [201, "int"], [1677, "torch.Tensor"], [585, "Dict[(str, torch.LongTensor)]"], [191, "int"], [1731, "torch.Tensor"], [155, "TextFieldEmbedder"], [622, "torch.IntTensor"], [3309, "int"], [637, "List[Dict[(str, Any)]]"], [601, "torch.IntTensor"], [631, "torch.IntTensor"], [152, "Vocabulary"], [1855, "Dict[(str, Any)]"], [171, "Seq2SeqEncoder"], [3307, "torch.Tensor"], [176, "Seq2SeqEncoder"], [185, "float"], [600, "torch.IntTensor"], [166, "Seq2SeqEncoder"], [217, "int"], [595, "torch.IntTensor"], [3206, "bool"], [192, "int"], [3303, "torch.Tensor"], [162, "Seq2SeqEncoder"], [167, "Seq2SeqEncoder"], [172, "Seq2SeqEncoder"], [616, "torch.IntTensor"], [184, "float"], [638, "List[Dict[(str, Any)]]"], [209, "int"], [630, "torch.IntTensor"], [615, "torch.IntTensor"], [177, "Seq2SeqEncoder"], [609, "torch.IntTensor"], [594, "torch.IntTensor"], [1777, "torch.Tensor"], [589, "torch.IntTensor"], [3305, "torch.Tensor"], [580, "Dict[(str, torch.LongTensor)]"], [180, "InitializerApplicator"], [161, "Seq2SeqEncoder"], [200, "int"], [218, "int"], [156, "TextFieldEmbedder"], [3108, "Dict[(str, torch.Tensor)]"], [3205, "bool"], [623, "torch.IntTensor"], [608, "torch.IntTensor"], [3301, "torch.Tensor"], [588, "torch.IntTensor"], [584, "Dict[(str, torch.LongTensor)]"], [581, "Dict[(str, torch.LongTensor)]"], [151, "Vocabulary"]]
[[430, "Dict[(str, torch.LongTensor)]"], [170, "FeedForward"], [1239, "int"], [1822, "torch.FloatTensor"], [1339, "bool"], [191, "int"], [1235, "int"], [437, "torch.IntTensor"], [1146, "List[List[Tuple[(int, int)]]]"], [1823, "torch.FloatTensor"], [1697, "torch.IntTensor"], [443, "List[Dict[(str, Any)]]"], [1536, "torch.FloatTensor"], [1825, "torch.FloatTensor"], [149, "Vocabulary"], [150, "Vocabulary"], [1142, "List[List[Tuple[(int, int)]]]"], [164, "FeedForward"], [433, "torch.IntTensor"], [1135, "Dict[(Tuple[(int, int)], int)]"], [436, "torch.IntTensor"], [1406, "int"], [431, "Dict[(str, torch.LongTensor)]"], [1542, "torch.FloatTensor"], [185, "float"], [1826, "torch.FloatTensor"], [1114, "List[List[List[Tuple[(int, int)]]]]"], [1819, "torch.FloatTensor"], [1338, "bool"], [1829, "torch.FloatTensor"], [1543, "torch.FloatTensor"], [1537, "torch.FloatTensor"], [165, "FeedForward"], [210, "Optional[RegularizerApplicator]"], [1145, "List[List[Tuple[(int, int)]]]"], [160, "Seq2SeqEncoder"], [444, "List[Dict[(str, Any)]]"], [154, "TextFieldEmbedder"], [159, "Seq2SeqEncoder"], [184, "float"], [1405, "int"], [1115, "List[List[List[Tuple[(int, int)]]]]"], [1820, "torch.FloatTensor"], [646, "int"], [211, "Optional[RegularizerApplicator]"], [890, "torch.IntTensor"], [169, "FeedForward"], [1136, "Dict[(Tuple[(int, int)], int)]"], [194, "float"], [1828, "torch.FloatTensor"], [1401, "int"], [1700, "torch.IntTensor"], [1243, "int"], [173, "int"], [195, "float"], [1539, "torch.FloatTensor"], [178, "int"], [1038, "Dict[(str, torch.Tensor)]"], [833, "Dict[(str, torch.Tensor)]"], [1242, "int"], [1698, "torch.IntTensor"], [203, "InitializerApplicator"], [190, "int"], [179, "int"], [153, "TextFieldEmbedder"], [1540, "torch.FloatTensor"], [202, "InitializerApplicator"], [434, "torch.IntTensor"], [1403, "int"], [174, "int"]]
[[1182, "torch.Tensor"], [568, "Dict[(str, torch.LongTensor)]"], [171, "int"], [1389, "Dict[(str, torch.Tensor)]"], [201, "str"], [1190, "Dict[(str, torch.Tensor)]"], [569, "Dict[(str, torch.LongTensor)]"], [3439, "List[str]"], [3126, "torch.Tensor"], [557, "torch.Tensor"], [3354, "int"], [575, "torch.Tensor"], [3422, "List[List[str]]"], [2636, "List[torch.Tensor]"], [186, "str"], [820, "torch.Tensor"], [1495, "torch.Tensor"], [1500, "torch.Tensor"], [178, "int"], [1034, "Dict[(str, torch.Tensor)]"], [217, "Metric"], [816, "torch.Tensor"], [3438, "List[str]"], [1493, "torch.Tensor"], [1498, "torch.Tensor"], [556, "torch.Tensor"], [2360, "Dict[(str, torch.Tensor)]"], [1778, "Dict[(str, torch.Tensor)]"], [552, "Dict[(str, torch.LongTensor)]"], [3349, "List[Any]"], [3350, "List[Any]"], [3632, "bool"], [3346, "Union[(torch.Tensor, numpy.ndarray)]"], [1185, "torch.Tensor"], [553, "Dict[(str, torch.LongTensor)]"], [3402, "List[Union[(List[List[str]], List[str])]]"], [177, "int"], [1186, "torch.Tensor"], [1774, "Dict[(str, torch.LongTensor)]"], [158, "Seq2SeqEncoder"], [2605, "Dict[(str, torch.Tensor)]"], [2637, "List[torch.Tensor]"], [208, "Metric"], [1505, "torch.Tensor"], [1366, "Dict[(str, torch.Tensor)]"], [195, "str"], [3345, "Union[(torch.Tensor, numpy.ndarray)]"], [767, "List[Union[(List[List[str]], List[str])]]"], [2244, "Dict[(str, torch.Tensor)]"], [561, "torch.Tensor"], [149, "Vocabulary"], [150, "Vocabulary"], [202, "str"], [818, "torch.Tensor"], [1776, "torch.Tensor"], [1502, "torch.Tensor"], [222, "InitializerApplicator"], [187, "str"], [564, "List[Dict[(str, Any)]]"], [3631, "bool"], [207, "Metric"], [2603, "torch.Tensor"], [560, "torch.Tensor"], [1584, "torch.Tensor"], [1702, "torch.Tensor"], [3353, "int"], [3590, "Dict[(str, torch.Tensor)]"], [194, "str"], [3421, "List[List[str]]"], [3128, "Dict[(str, torch.Tensor)]"], [216, "Metric"], [1444, "torch.Tensor"], [3642, "Dict[(str, float)]"], [1118, "Dict[(str, torch.Tensor)]"], [166, "int"], [162, "Attention"], [2601, "torch.Tensor"], [574, "torch.Tensor"], [167, "int"], [1181, "torch.Tensor"], [172, "int"], [587, "Dict[(str, torch.Tensor)]"], [3641, "Dict[(str, float)]"], [618, "Dict[(str, torch.Tensor)]"], [154, "TextFieldEmbedder"], [1496, "torch.Tensor"], [159, "Seq2SeqEncoder"], [1503, "torch.Tensor"], [3437, "List[str]"], [163, "Attention"], [1492, "torch.Tensor"], [565, "List[Dict[(str, Any)]]"], [223, "InitializerApplicator"], [2358, "torch.LongTensor"], [153, "TextFieldEmbedder"], [1506, "torch.Tensor"]]
[[154, "Seq2SeqEncoder"], [1603, "torch.LongTensor"], [164, "Attention"], [1073, "torch.LongTensor"], [498, "Dict[(str, torch.Tensor)]"], [713, "Dict[(str, torch.Tensor)]"], [194, "int"], [552, "Dict[(str, torch.LongTensor)]"], [203, "float"], [1668, "torch.LongTensor"], [150, "TextFieldEmbedder"], [1312, "torch.LongTensor"], [172, "SimilarityFunction"], [1456, "Dict[(str, torch.Tensor)]"], [1753, "Dict[(str, float)]"], [146, "Vocabulary"], [553, "Dict[(str, torch.LongTensor)]"], [1615, "torch.LongTensor"], [202, "float"], [165, "Attention"], [1454, "torch.Tensor"], [212, "bool"], [186, "str"], [171, "SimilarityFunction"], [1032, "Dict[(str, torch.Tensor)]"], [556, "Dict[(str, torch.LongTensor)]"], [1752, "Dict[(str, float)]"], [1128, "List[torch.Tensor]"], [1743, "bool"], [155, "Seq2SeqEncoder"], [1136, "List[torch.Tensor]"], [592, "Dict[(str, torch.Tensor)]"], [1672, "torch.LongTensor"], [492, "torch.Tensor"], [1670, "torch.LongTensor"], [158, "int"], [149, "TextFieldEmbedder"], [946, "Dict[(str, torch.Tensor)]"], [1614, "torch.LongTensor"], [187, "str"], [1127, "List[torch.Tensor]"], [145, "Vocabulary"], [557, "Dict[(str, torch.LongTensor)]"], [1361, "Dict[(str, torch.Tensor)]"], [1137, "List[torch.Tensor]"], [1604, "torch.LongTensor"], [178, "int"], [211, "bool"], [1609, "torch.LongTensor"], [195, "int"], [1742, "bool"], [493, "torch.Tensor"], [916, "torch.LongTensor"], [159, "int"], [1326, "torch.LongTensor"], [885, "Dict[(str, torch.Tensor)]"], [179, "int"], [497, "Dict[(str, torch.Tensor)]"], [1034, "Dict[(str, torch.LongTensor)]"]]
[[205, "int"], [1843, "Dict[(str, torch.Tensor)]"], [1347, "torch.LongTensor"], [211, "Attention"], [189, "int"], [1415, "str"], [503, "torch.LongTensor"], [561, "torch.Tensor"], [1089, "GrammarBasedState"], [1571, "GrammarStatelet"], [1578, "List[ProductionRule]"], [206, "int"], [239, "Optional[RegularizerApplicator]"], [499, "List[List[ProductionRule]]"], [1344, "List[int]"], [1095, "torch.Tensor"], [200, "BeamSearch"], [1614, "Dict[(str, List[Tuple[(ProductionRule, int)]])]"], [498, "List[List[ProductionRule]]"], [502, "torch.LongTensor"], [231, "InitializerApplicator"], [1345, "List[int]"], [212, "Attention"], [1339, "int"], [1097, "torch.Tensor"], [494, "Dict[(str, torch.LongTensor)]"], [181, "Vocabulary"], [1469, "bool"], [199, "BeamSearch"], [232, "InitializerApplicator"], [1577, "List[ProductionRule]"], [217, "bool"], [1090, "GrammarBasedState"], [225, "float"], [1605, "Dict[(str, Dict[(str, Tuple[(torch.Tensor, torch.Tensor)])])]"], [1842, "Dict[(str, torch.Tensor)]"], [1606, "Dict[(str, Dict[(str, Tuple[(torch.Tensor, torch.Tensor)])])]"], [528, "torch.Tensor"], [1615, "Dict[(str, List[Tuple[(ProductionRule, int)]])]"], [195, "Seq2SeqEncoder"], [185, "TextFieldEmbedder"], [240, "Optional[RegularizerApplicator]"], [959, "torch.LongTensor"], [216, "bool"], [180, "Vocabulary"], [224, "float"], [1099, "List[List[ProductionRule]]"], [1340, "int"], [1572, "GrammarStatelet"], [190, "int"], [639, "Dict[(str, Any)]"], [196, "Seq2SeqEncoder"], [184, "TextFieldEmbedder"], [495, "Dict[(str, torch.LongTensor)]"], [640, "Dict[(str, Any)]"], [1470, "bool"], [1414, "str"], [1100, "List[List[ProductionRule]]"]]
[[136, "Vocabulary"], [279, "List[List[NlvrLanguage]]"], [528, "Dict[(str, torch.Tensor)]"], [155, "Attention"], [141, "TextFieldEmbedder"], [295, "torch.LongTensor"], [280, "List[List[NlvrLanguage]]"], [276, "Dict[(str, torch.LongTensor)]"], [145, "int"], [166, "int"], [165, "int"], [310, "List[Dict[(str, Any)]]"], [529, "Dict[(str, torch.Tensor)]"], [140, "TextFieldEmbedder"], [172, "float"], [857, "List[List[str]]"], [294, "torch.LongTensor"], [277, "Dict[(str, torch.LongTensor)]"], [159, "BeamSearch"], [156, "Attention"], [283, "List[List[ProductionRule]]"], [171, "float"], [287, "List[str]"], [634, "Dict[(int, List[List[int]])]"], [855, "List[List[NlvrLanguage]]"], [146, "int"], [152, "Seq2SeqEncoder"], [284, "List[List[ProductionRule]]"], [303, "torch.LongTensor"], [151, "Seq2SeqEncoder"], [137, "Vocabulary"], [977, "bool"], [852, "List[List[List[str]]]"], [288, "List[str]"], [309, "List[Dict[(str, Any)]]"], [388, "List[List[str]]"], [635, "Dict[(int, List[List[int]])]"], [160, "BeamSearch"], [302, "torch.LongTensor"], [976, "bool"], [853, "List[List[List[str]]]"]]
[[128, "int"], [118, "Vocabulary"], [144, "str"], [863, "List[NlvrLanguage]"], [1436, "GrammarBasedState"], [137, "float"], [536, "List[List[str]]"], [759, "List[List[str]]"], [798, "List[str]"], [624, "List[List[ProductionRule]]"], [984, "Dict[(str, Dict[(str, Tuple[(torch.Tensor, torch.Tensor)])])]"], [731, "List[List[NlvrLanguage]]"], [1118, "Dict[(str, torch.Tensor)]"], [293, "Dict[(str, torch.LongTensor)]"], [134, "Seq2SeqEncoder"], [145, "str"], [1117, "Dict[(str, torch.Tensor)]"], [625, "List[List[ProductionRule]]"], [858, "List[str]"], [1437, "GrammarBasedState"], [630, "Dict[(int, List[List[int]])]"], [758, "List[List[str]]"], [797, "List[str]"], [691, "List[List[List[str]]]"], [940, "NlvrLanguage"], [793, "List[str]"], [123, "TextFieldEmbedder"], [739, "List[List[List[str]]]"], [1439, "List[NlvrLanguage]"], [512, "List[str]"], [294, "Dict[(str, torch.LongTensor)]"], [941, "NlvrLanguage"], [127, "int"], [133, "Seq2SeqEncoder"], [933, "GrammarStatelet"], [934, "GrammarStatelet"], [119, "Vocabulary"], [794, "List[str]"], [537, "List[List[str]]"], [729, "List[List[List[str]]]"], [861, "List[str]"], [122, "TextFieldEmbedder"], [944, "List[ProductionRule]"], [640, "List[List[List[str]]]"], [732, "List[NlvrLanguage]"], [138, "float"], [985, "Dict[(str, Dict[(str, Tuple[(torch.Tensor, torch.Tensor)])])]"], [639, "List[List[List[str]]]"], [857, "List[str]"], [738, "List[List[List[str]]]"], [629, "Dict[(int, List[List[int]])]"]]
[[205, "int"], [810, "List[List[ProductionRule]]"], [1234, "List[List[int]]"], [213, "float"], [812, "torch.LongTensor"], [1526, "List[ProductionRule]"], [2095, "CoverageState"], [190, "Attention"], [1747, "List[List[str]]"], [699, "Vocabulary"], [829, "List[int]"], [2265, "CoverageState"], [185, "Seq2SeqEncoder"], [256, "str"], [2267, "List[List[NlvrLanguage]]"], [194, "int"], [240, "Dict[(str, Union[(int, float)])]"], [2034, "bool"], [2092, "List[List[NlvrLanguage]]"], [1745, "List[List[NlvrLanguage]]"], [247, "bool"], [802, "Dict[(str, torch.LongTensor)]"], [180, "int"], [186, "Seq2SeqEncoder"], [221, "bool"], [830, "List[int]"], [257, "str"], [1057, "List[List[str]]"], [1749, "List[List[ProductionRule]]"], [1525, "List[ProductionRule]"], [1753, "List[List[int]]"], [198, "int"], [189, "Attention"], [1523, "torch.LongTensor"], [230, "float"], [220, "bool"], [578, "List[Tuple[(int, int)]]"], [836, "List[Dict[(str, Any)]]"], [2033, "bool"], [175, "TextFieldEmbedder"], [1742, "List[List[List[str]]]"], [170, "Vocabulary"], [246, "bool"], [2094, "CoverageState"], [803, "Dict[(str, torch.LongTensor)]"], [816, "List[str]"], [823, "torch.LongTensor"], [199, "int"], [171, "Vocabulary"], [837, "List[Dict[(str, Any)]]"], [204, "int"], [806, "List[List[NlvrLanguage]]"], [805, "List[List[NlvrLanguage]]"], [813, "torch.LongTensor"], [193, "int"], [2091, "List[List[NlvrLanguage]]"], [231, "float"], [1743, "List[List[List[str]]]"], [815, "List[str]"], [809, "List[List[ProductionRule]]"], [239, "Dict[(str, Union[(int, float)])]"], [214, "float"], [471, "Archive"], [438, "Archive"], [1750, "List[List[ProductionRule]]"], [179, "int"], [174, "TextFieldEmbedder"], [822, "torch.LongTensor"], [704, "List[Tuple[(int, int)]]"], [698, "Vocabulary"]]
[[2120, "GrammarStatelet"], [2050, "bool"], [2133, "torch.Tensor"], [227, "int"], [1927, "List[int]"], [2524, "Dict[(str, torch.Tensor)]"], [1311, "List[AtisWorld]"], [1312, "List[AtisWorld]"], [214, "Attention"], [251, "str"], [243, "float"], [244, "float"], [570, "List[List[ProductionRule]]"], [562, "Dict[(str, torch.LongTensor)]"], [1722, "List[AtisWorld]"], [203, "BeamSearch"], [183, "Vocabulary"], [756, "Dict[(str, Any)]"], [1726, "torch.Tensor"], [1921, "int"], [1929, "torch.LongTensor"], [1740, "torch.Tensor"], [578, "torch.LongTensor"], [1727, "torch.Tensor"], [566, "List[AtisWorld]"], [208, "int"], [215, "Attention"], [1317, "torch.Tensor"], [228, "int"], [2051, "bool"], [572, "torch.Tensor"], [757, "Dict[(str, Any)]"], [220, "bool"], [1995, "str"], [192, "int"], [1303, "GrammarBasedState"], [563, "Dict[(str, torch.LongTensor)]"], [1364, "int"], [586, "List[List[str]]"], [2119, "GrammarStatelet"], [2131, "torch.Tensor"], [2128, "List[ProductionRule]"], [2125, "AtisWorld"], [235, "int"], [188, "TextFieldEmbedder"], [1315, "List[List[ProductionRule]]"], [184, "Vocabulary"], [1040, "torch.LongTensor"], [1922, "int"], [209, "int"], [1996, "str"], [198, "Seq2SeqEncoder"], [573, "torch.Tensor"], [577, "torch.LongTensor"], [565, "List[AtisWorld]"], [1304, "GrammarBasedState"], [1309, "Dict[(str, torch.LongTensor)]"], [193, "int"], [236, "int"], [199, "Seq2SeqEncoder"], [2127, "List[ProductionRule]"], [202, "BeamSearch"], [219, "bool"], [1724, "int"], [1926, "List[int]"], [2213, "Dict[(str, Dict[(str, Tuple[(torch.Tensor, torch.Tensor)])])]"], [2523, "Dict[(str, torch.Tensor)]"], [2214, "Dict[(str, Dict[(str, Tuple[(torch.Tensor, torch.Tensor)])])]"], [585, "List[List[str]]"], [250, "str"], [569, "List[List[ProductionRule]]"], [187, "TextFieldEmbedder"]]
[[3906, "Dict[(str, torch.Tensor)]"], [260, "bool"], [246, "int"], [3337, "float"], [210, "Attention"], [179, "Vocabulary"], [198, "BeamSearch"], [2750, "torch.Tensor"], [824, "List[Dict[(str, Any)]]"], [187, "int"], [3572, "Dict[(str, Dict[(str, Tuple[(torch.Tensor, torch.Tensor)])])]"], [183, "TextFieldEmbedder"], [801, "List[List[ProductionRule]]"], [277, "Seq2VecEncoder"], [222, "bool"], [2932, "Dict[(int, int)]"], [261, "bool"], [3344, "int"], [811, "torch.Tensor"], [2733, "List[QuarelWorld]"], [236, "int"], [182, "TextFieldEmbedder"], [791, "Dict[(str, torch.LongTensor)]"], [2732, "List[QuarelWorld]"], [817, "torch.LongTensor"], [268, "bool"], [3487, "torch.Tensor"], [3481, "QuarelWorld"], [282, "str"], [798, "List[QuarelWorld]"], [194, "Seq2SeqEncoder"], [237, "int"], [2927, "torch.FloatTensor"], [2739, "torch.Tensor"], [203, "int"], [2737, "int"], [254, "bool"], [868, "torch.LongTensor"], [793, "Dict[(str, torch.LongTensor)]"], [825, "List[Dict[(str, Any)]]"], [2929, "torch.LongTensor"], [3388, "bool"], [818, "torch.LongTensor"], [3245, "torch.LongTensor"], [797, "List[QuarelWorld]"], [2298, "torch.LongTensor"], [802, "List[List[ProductionRule]]"], [197, "BeamSearch"], [3905, "Dict[(str, torch.Tensor)]"], [269, "bool"], [3476, "GrammarStatelet"], [253, "bool"], [193, "Seq2SeqEncoder"], [804, "torch.Tensor"], [229, "float"], [2931, "Dict[(int, int)]"], [3237, "int"], [3336, "float"], [3475, "GrammarStatelet"], [3484, "List[ProductionRule]"], [276, "Seq2VecEncoder"], [3341, "int"], [178, "Vocabulary"], [3389, "bool"], [291, "str"], [790, "Dict[(str, torch.LongTensor)]"], [204, "int"], [213, "FeedForward"], [3343, "int"], [1069, "torch.FloatTensor"], [245, "int"], [2398, "int"], [3243, "List[int]"], [2736, "int"], [3238, "int"], [221, "bool"], [3489, "torch.Tensor"], [283, "str"], [2925, "List[QuarelWorld]"], [805, "torch.Tensor"], [810, "torch.Tensor"], [2740, "torch.Tensor"], [209, "Attention"], [3483, "List[ProductionRule]"], [290, "str"], [188, "int"], [794, "Dict[(str, torch.LongTensor)]"], [214, "FeedForward"], [3571, "Dict[(str, Dict[(str, Tuple[(torch.Tensor, torch.Tensor)])])]"], [3242, "List[int]"], [230, "float"]]
[[205, "int"], [271, "int"], [217, "FeedForward"], [293, "str"], [1761, "CoverageState"], [173, "Vocabulary"], [253, "bool"], [893, "List[str]"], [234, "bool"], [1758, "List[WikiTablesWorld]"], [243, "float"], [649, "List[Tuple[(int, int)]]"], [177, "TextFieldEmbedder"], [877, "Dict[(str, torch.LongTensor)]"], [889, "torch.LongTensor"], [211, "int"], [277, "str"], [775, "List[Tuple[(int, int)]]"], [294, "str"], [252, "bool"], [206, "int"], [264, "float"], [874, "Dict[(str, torch.LongTensor)]"], [226, "bool"], [898, "List[Dict[(str, Any)]]"], [511, "Archive"], [176, "TextFieldEmbedder"], [172, "Vocabulary"], [1525, "Set[str]"], [278, "str"], [1757, "List[WikiTablesWorld]"], [1075, "Dict[(str, Any)]"], [218, "FeedForward"], [770, "Vocabulary"], [884, "List[List[ProductionRule]]"], [888, "torch.LongTensor"], [1528, "int"], [1762, "CoverageState"], [233, "bool"], [2004, "bool"], [195, "Attention"], [1526, "Set[str]"], [263, "float"], [212, "int"], [182, "int"], [181, "int"], [885, "List[List[ProductionRule]]"], [880, "List[WikiTablesWorld]"], [225, "bool"], [899, "List[Dict[(str, Any)]]"], [286, "str"], [544, "Archive"], [199, "int"], [285, "str"], [191, "Seq2VecEncoder"], [270, "int"], [992, "int"], [187, "Seq2SeqEncoder"], [1076, "Dict[(str, Any)]"], [1522, "List[ProductionRule]"], [769, "Vocabulary"], [2003, "bool"], [200, "int"], [196, "Attention"], [873, "Dict[(str, torch.LongTensor)]"], [1520, "torch.LongTensor"], [892, "List[str]"], [881, "List[WikiTablesWorld]"], [192, "Seq2VecEncoder"], [1523, "List[ProductionRule]"], [188, "Seq2SeqEncoder"], [244, "float"], [876, "Dict[(str, torch.LongTensor)]"]]
[[2895, "Dict[(str, Any)]"], [204, "float"], [637, "Dict[(str, torch.LongTensor)]"], [1851, "torch.LongTensor"], [2336, "torch.Tensor"], [2877, "List[List[ProductionRule]]"], [161, "TextFieldEmbedder"], [1665, "torch.Tensor"], [220, "str"], [1435, "torch.Tensor"], [2891, "List[Dict[(str, Any)]]"], [3263, "Dict[(str, torch.Tensor)]"], [2324, "LambdaGrammarStatelet"], [2884, "List[WikiTablesWorld]"], [211, "int"], [166, "int"], [227, "str"], [165, "int"], [160, "TextFieldEmbedder"], [157, "Vocabulary"], [641, "Dict[(str, torch.LongTensor)]"], [1674, "torch.Tensor"], [2169, "torch.LongTensor"], [2333, "List[ProductionRule]"], [2887, "List[str]"], [2421, "Dict[(str, Dict[(str, Tuple[(torch.Tensor, torch.Tensor)])])]"], [176, "Seq2VecEncoder"], [180, "int"], [1430, "int"], [1854, "Dict[(int, int)]"], [2269, "bool"], [2880, "Mapping[(int, Sequence[GrammarBasedState])]"], [2879, "Mapping[(int, Sequence[GrammarBasedState])]"], [2332, "List[ProductionRule]"], [2164, "List[int]"], [228, "str"], [638, "Dict[(str, torch.LongTensor)]"], [171, "Seq2SeqEncoder"], [648, "List[List[ProductionRule]]"], [2325, "LambdaGrammarStatelet"], [2168, "torch.LongTensor"], [2892, "List[Dict[(str, Any)]]"], [651, "Dict[(str, Any)]"], [156, "Vocabulary"], [2268, "bool"], [2338, "torch.Tensor"], [186, "bool"], [992, "torch.FloatTensor"], [1426, "List[WikiTablesWorld]"], [2420, "Dict[(str, Dict[(str, Tuple[(torch.Tensor, torch.Tensor)])])]"], [194, "bool"], [212, "int"], [1434, "torch.Tensor"], [2165, "List[int]"], [172, "Seq2SeqEncoder"], [649, "List[List[ProductionRule]]"], [1431, "int"], [175, "Seq2VecEncoder"], [1661, "List[WikiTablesWorld]"], [2160, "int"], [1663, "int"], [3264, "Dict[(str, torch.Tensor)]"], [645, "List[WikiTablesWorld]"], [644, "List[WikiTablesWorld]"], [1427, "List[WikiTablesWorld]"], [1853, "Dict[(int, int)]"], [685, "torch.LongTensor"], [2159, "int"], [1847, "List[WikiTablesWorld]"], [185, "bool"], [205, "float"], [652, "Dict[(str, Any)]"], [219, "str"], [2886, "List[str]"], [193, "bool"], [179, "int"], [2330, "WikiTablesWorld"], [1849, "torch.FloatTensor"], [640, "Dict[(str, torch.LongTensor)]"]]
[[139, "Seq2VecEncoder"], [184, "bool"], [155, "Attention"], [335, "List[str]"], [201, "int"], [124, "TextFieldEmbedder"], [120, "Vocabulary"], [176, "int"], [168, "bool"], [140, "Seq2VecEncoder"], [136, "Seq2SeqEncoder"], [143, "BeamSearch"], [175, "int"], [365, "Dict[(str, Any)]"], [129, "int"], [135, "Seq2SeqEncoder"], [150, "int"], [149, "int"], [366, "Dict[(str, Any)]"], [323, "Dict[(str, torch.LongTensor)]"], [156, "Attention"], [345, "torch.LongTensor"], [160, "FeedForward"], [202, "int"], [320, "Dict[(str, torch.LongTensor)]"], [352, "List[Dict[(str, Any)]]"], [217, "str"], [130, "int"], [321, "Dict[(str, torch.LongTensor)]"], [353, "List[Dict[(str, Any)]]"], [194, "float"], [344, "torch.LongTensor"], [209, "str"], [327, "List[WikiTablesWorld]"], [218, "str"], [144, "BeamSearch"], [183, "bool"], [195, "float"], [324, "Dict[(str, torch.LongTensor)]"], [159, "FeedForward"], [331, "List[List[ProductionRule]]"], [328, "List[WikiTablesWorld]"], [121, "Vocabulary"], [336, "List[str]"], [167, "bool"], [210, "str"], [125, "TextFieldEmbedder"], [332, "List[List[ProductionRule]]"]]
[[717, "JsonDict"], [834, "str"], [428, "Instance"], [831, "str"], [447, "JsonDict"], [718, "JsonDict"], [361, "JsonDict"], [774, "List[Instance]"], [454, "JsonDict"], [453, "JsonDict"], [448, "JsonDict"], [722, "Instance"], [187, "Model"], [354, "Instance"], [362, "JsonDict"], [192, "DatasetReader"], [188, "Model"], [833, "str"], [773, "List[Instance]"], [353, "Instance"], [830, "str"], [191, "DatasetReader"]]
[[59, "DatasetReader"], [58, "DatasetReader"], [55, "Model"], [54, "Model"]]
[[480, "JsonDict"], [498, "JsonDict"], [475, "Instance"], [503, "JsonDict"], [90, "JsonDict"], [476, "Instance"], [497, "JsonDict"], [504, "JsonDict"], [89, "JsonDict"]]
[[44, "Instance"], [54, "JsonDict"], [55, "JsonDict"], [45, "Instance"], [191, "str"], [190, "str"], [198, "JsonDict"], [197, "JsonDict"]]
[[73, "Instance"], [51, "str"], [43, "JsonDict"], [50, "str"], [80, "JsonDict"], [81, "JsonDict"], [42, "JsonDict"], [72, "Instance"]]
[[713, "Dict[(str, List[str])]"], [940, "Instance"], [443, "List[str]"], [165, "str"], [908, "DatasetReader"], [448, "List[str]"], [1018, "JsonDict"], [705, "List[Token]"], [402, "List[Token]"], [552, "List[str]"], [438, "bool"], [702, "List[List[str]]"], [714, "Dict[(str, List[str])]"], [909, "DatasetReader"], [71, "List[str]"], [948, "JsonDict"], [367, "List[str]"], [397, "str"], [444, "List[str]"], [821, "str"], [1011, "JsonDict"], [174, "List[str]"], [817, "str"], [904, "Model"], [401, "List[Token]"], [171, "List[Token]"], [494, "str"], [822, "str"], [550, "List[str]"], [818, "str"], [905, "Model"], [447, "List[str]"], [1017, "JsonDict"], [495, "str"], [500, "str"], [701, "List[List[str]]"], [405, "List[str]"], [505, "str"], [439, "bool"], [398, "str"], [170, "List[Token]"], [1012, "JsonDict"], [941, "Instance"], [164, "str"], [70, "List[str]"], [947, "JsonDict"], [501, "str"], [506, "str"]]
[[75, "str"], [66, "Model"], [143, "JsonDict"], [112, "str"], [135, "Instance"], [74, "str"], [65, "Model"], [70, "DatasetReader"], [107, "JsonDict"], [69, "DatasetReader"], [113, "str"], [106, "JsonDict"], [134, "Instance"], [142, "JsonDict"]]
[[461, "JsonDict"], [973, "JsonDict"], [272, "str"], [498, "List[Instance]"], [156, "List[str]"], [1092, "JsonDict"], [226, "List[Instance]"], [462, "JsonDict"], [974, "JsonDict"], [150, "JsonDict"], [83, "Model"], [149, "JsonDict"], [119, "JsonDict"], [978, "List[Instance]"], [126, "str"], [281, "List[str]"], [802, "List[JsonDict]"], [120, "JsonDict"], [88, "DatasetReader"], [125, "str"], [84, "Model"], [623, "List[JsonDict]"], [87, "DatasetReader"], [278, "List[str]"], [277, "List[str]"], [155, "List[str]"], [577, "JsonDict"], [801, "List[JsonDict]"], [1091, "JsonDict"], [282, "List[str]"], [1096, "JsonDict"], [622, "List[JsonDict]"], [271, "str"]]
[[76, "Instance"], [84, "JsonDict"], [51, "str"], [43, "JsonDict"], [50, "str"], [83, "JsonDict"], [75, "Instance"], [42, "JsonDict"]]
[[55, "str"], [51, "str"], [54, "str"], [43, "JsonDict"], [92, "JsonDict"], [50, "str"], [83, "Instance"], [84, "Instance"], [42, "JsonDict"], [91, "JsonDict"]]
[[333, "int"], [210, "JsonDict"], [599, "str"], [470, "Instance"], [476, "JsonDict"], [524, "List[Instance]"], [211, "JsonDict"], [263, "JsonDict"], [553, "List[JsonDict]"], [334, "int"], [477, "JsonDict"], [637, "str"], [196, "DatasetReader"], [269, "JsonDict"], [552, "List[JsonDict]"], [217, "str"], [443, "JsonDict"], [234, "str"], [442, "JsonDict"], [240, "JsonDict"], [192, "Model"], [197, "DatasetReader"], [602, "str"], [218, "str"], [270, "JsonDict"], [235, "str"], [277, "Instance"], [500, "List[Instance]"], [494, "List[JsonDict]"], [193, "Model"], [447, "Instance"], [598, "str"], [634, "Archive"], [603, "str"], [241, "JsonDict"], [471, "Instance"], [262, "JsonDict"], [635, "Archive"]]
[[53, "JsonDict"], [43, "Instance"], [44, "Instance"], [54, "JsonDict"]]
[[55, "str"], [51, "str"], [54, "str"], [43, "JsonDict"], [92, "JsonDict"], [50, "str"], [83, "Instance"], [84, "Instance"], [42, "JsonDict"], [91, "JsonDict"]]
[[75, "str"], [66, "Model"], [143, "JsonDict"], [71, "DatasetReader"], [110, "str"], [135, "Instance"], [104, "JsonDict"], [70, "DatasetReader"], [109, "str"], [76, "str"], [67, "Model"], [103, "JsonDict"], [134, "Instance"], [142, "JsonDict"]]
[[475, "DatasetReader"], [512, "JsonDict"], [839, "Dict[(int, Tuple[(int, int)])]"], [471, "Model"], [675, "List[str]"], [741, "List[Instance]"], [550, "JsonDict"], [696, "List[int]"], [897, "int"], [648, "JsonDict"], [830, "List[str]"], [479, "str"], [707, "List[str]"], [838, "Dict[(int, Tuple[(int, int)])]"], [828, "List[str]"], [686, "List[str]"], [551, "JsonDict"], [824, "List[str]"], [826, "List[int]"], [653, "Instance"], [649, "JsonDict"], [543, "Instance"], [511, "JsonDict"], [898, "int"], [654, "Instance"], [542, "Instance"], [517, "str"], [474, "DatasetReader"], [470, "Model"], [480, "str"], [740, "List[Instance]"], [518, "str"]]
[[87, "str"], [81, "DatasetReader"], [198, "List[List[List[int]]]"], [191, "str"], [391, "str"], [550, "JsonDict"], [155, "JsonDict"], [455, "List[str]"], [82, "DatasetReader"], [78, "Model"], [385, "str"], [162, "List[str]"], [126, "JsonDict"], [456, "List[str]"], [545, "Instance"], [131, "str"], [551, "JsonDict"], [386, "str"], [544, "Instance"], [156, "JsonDict"], [132, "str"], [125, "JsonDict"], [192, "str"], [196, "Doc"], [448, "Instance"], [199, "List[List[List[int]]]"], [86, "str"], [77, "Model"], [447, "Instance"], [161, "List[str]"]]
[[570, "List[Instance]"], [343, "str"], [652, "bool"], [647, "int"], [495, "Instance"], [338, "DatasetReader"], [334, "Model"], [645, "Tree"], [648, "int"], [375, "JsonDict"], [344, "str"], [489, "JsonDict"], [638, "JsonDict"], [494, "Instance"], [382, "str"], [407, "Instance"], [376, "JsonDict"], [335, "Model"], [651, "bool"], [381, "str"], [516, "Tree"], [406, "Instance"], [414, "JsonDict"], [639, "JsonDict"], [490, "JsonDict"], [569, "List[Instance]"], [415, "JsonDict"], [339, "DatasetReader"]]
[[73, "Instance"], [51, "str"], [43, "JsonDict"], [50, "str"], [80, "JsonDict"], [81, "JsonDict"], [42, "JsonDict"], [72, "Instance"]]
[[159, "Dict[(int, List[State])]"], [125, "Dict[(int, List[State])]"], [62, "torch.Tensor"], [339, "Dict[(int, List[State])]"], [114, "TransitionFunction"], [72, "int"], [124, "Dict[(int, List[State])]"], [57, "Optional[int]"], [113, "TransitionFunction"], [158, "Dict[(int, List[State])]"], [67, "torch.Tensor"], [340, "Dict[(int, List[State])]"], [109, "State"], [108, "State"], [56, "Optional[int]"], [71, "int"], [61, "torch.Tensor"], [66, "torch.Tensor"]]
[[237, "StateType"], [232, "int"], [87, "int"], [92, "int"], [241, "TransitionFunction"], [109, "bool"], [88, "int"], [198, "torch.Tensor"], [236, "StateType"], [315, "Dict[(int, List[StateType])]"], [108, "bool"], [93, "int"], [240, "TransitionFunction"], [711, "Dict[(int, List[StateType])]"], [710, "Dict[(int, List[StateType])]"], [246, "bool"], [100, "torch.Tensor"], [261, "Dict[(int, List[StateType])]"], [314, "Dict[(int, List[StateType])]"], [200, "bool"], [101, "torch.Tensor"], [260, "Dict[(int, List[StateType])]"], [231, "int"], [245, "bool"]]
[[201, "Tuple[(int, Any)]"], [39, "Union[(torch.Tensor, List[List[List[int]]])]"], [44, "Optional[torch.Tensor]"], [57, "List[Dict[(Tuple[(int, Any)], Set[int])]]"], [183, "Dict[(Tuple[(int, Any)], Set[int])]"], [203, "Tuple[(int, Any)]"], [43, "Optional[torch.Tensor]"], [184, "Dict[(Tuple[(int, Any)], Set[int])]"], [202, "Tuple[(int, Any)]"], [40, "Union[(torch.Tensor, List[List[List[int]]])]"], [58, "List[Dict[(Tuple[(int, Any)], Set[int])]]"]]
[[897, "Dict[(int, List[StateType])]"], [99, "int"], [156, "State"], [174, "Callable[([StateType], torch.Tensor)]"], [537, "bool"], [369, "TransitionFunction"], [551, "Dict[(int, List[State])]"], [839, "Dict[(int, List[torch.Tensor])]"], [109, "int"], [124, "int"], [833, "Callable[([StateType], torch.Tensor)]"], [831, "List[StateType]"], [103, "bool"], [98, "int"], [367, "State"], [115, "int"], [748, "Dict[(int, List[torch.Tensor])]"], [110, "int"], [166, "Callable[([StateType], torch.Tensor)]"], [382, "List[StateType]"], [928, "Dict[(int, List[StateType])]"], [743, "List[StateType]"], [535, "int"], [162, "TransitionFunction"], [889, "List[StateType]"], [125, "int"], [104, "bool"], [749, "Dict[(int, List[torch.Tensor])]"], [927, "Dict[(int, List[StateType])]"], [538, "bool"], [161, "TransitionFunction"], [180, "List[StateType]"], [116, "int"], [157, "State"], [550, "Dict[(int, List[State])]"], [838, "Dict[(int, List[torch.Tensor])]"], [898, "Dict[(int, List[StateType])]"], [167, "Callable[([StateType], torch.Tensor)]"], [533, "List[State]"]]
[[96, "int"], [115, "State"], [149, "Dict[(int, List[State])]"], [125, "Tuple[(torch.Tensor, torch.Tensor)]"], [150, "Dict[(int, List[State])]"], [116, "State"], [95, "int"], [126, "Tuple[(torch.Tensor, torch.Tensor)]"], [121, "TransitionFunction"], [120, "TransitionFunction"]]
[[65, "TransitionFunction"], [61, "State"], [71, "SupervisionType"], [60, "State"], [66, "TransitionFunction"], [70, "SupervisionType"]]
[[50, "Dict[(int, int)]"], [32, "torch.Tensor"], [154, "torch.Tensor"], [33, "torch.Tensor"], [153, "torch.Tensor"], [43, "torch.Tensor"], [49, "Dict[(int, int)]"], [46, "torch.Tensor"], [37, "torch.Tensor"], [42, "torch.Tensor"], [38, "torch.Tensor"], [47, "torch.Tensor"]]
[[46, "Dict[(Tuple[(str, str)], List[str])]"], [61, "Callable[([str], bool)]"], [336, "str"], [52, "Dict[(str, Dict[(str, Tuple[(torch.Tensor, torch.Tensor)])])]"], [56, "Dict[(str, Tuple[(torch.Tensor, torch.Tensor)])]"], [41, "List[str]"], [83, "bool"], [57, "Dict[(str, Tuple[(torch.Tensor, torch.Tensor)])]"], [176, "str"], [47, "Dict[(Tuple[(str, str)], List[str])]"], [51, "Dict[(str, Dict[(str, Tuple[(torch.Tensor, torch.Tensor)])])]"], [82, "bool"], [42, "List[str]"], [716, "str"], [337, "str"], [60, "Callable[([str], bool)]"]]
[[109, "List"], [97, "List[List[ProductionRule]]"], [69, "List[int]"], [160, "int"], [108, "List"], [84, "List[RnnStatelet]"], [182, "torch.Tensor"], [70, "List[int]"], [183, "torch.Tensor"], [74, "List[List[int]]"], [299, "Sequence[CoverageState]"], [162, "torch.Tensor"], [176, "List[float]"], [168, "List[int]"], [89, "List[GrammarStatelet]"], [156, "int"], [75, "List[List[int]]"], [83, "List[RnnStatelet]"], [79, "List[torch.Tensor]"], [93, "List[ChecklistStatelet]"], [88, "List[GrammarStatelet]"], [80, "List[torch.Tensor]"], [169, "List[int]"], [102, "List[Any]"], [101, "List[Any]"], [298, "Sequence[CoverageState]"], [157, "int"], [159, "int"], [92, "List[ChecklistStatelet]"], [165, "RnnStatelet"], [166, "RnnStatelet"], [163, "torch.Tensor"], [96, "List[List[ProductionRule]]"], [175, "List[float]"]]
[[70, "bool"], [153, "str"], [66, "Callable[([str], bool)]"], [304, "str"], [61, "Dict[(str, ActionRepresentation)]"], [114, "ActionRepresentation"], [93, "bool"], [62, "Dict[(str, ActionRepresentation)]"], [71, "bool"], [115, "ActionRepresentation"], [57, "List[str]"], [67, "Callable[([str], bool)]"], [94, "bool"], [154, "str"], [303, "str"], [56, "List[str]"]]
[[160, "RnnStatelet"], [374, "int"], [163, "List[int]"], [92, "List[List[ProductionRule]]"], [159, "RnnStatelet"], [69, "List[int]"], [614, "Sequence[GrammarBasedState]"], [156, "torch.Tensor"], [104, "List"], [177, "torch.Tensor"], [73, "List[List[int]]"], [170, "List[float]"], [150, "int"], [154, "int"], [74, "List[List[int]]"], [157, "torch.Tensor"], [87, "List[GrammarStatelet]"], [82, "List[RnnStatelet]"], [78, "List[torch.Tensor]"], [151, "int"], [96, "List[Any]"], [169, "List[float]"], [83, "List[RnnStatelet]"], [557, "bool"], [79, "List[torch.Tensor]"], [88, "List[GrammarStatelet]"], [103, "List"], [615, "Sequence[GrammarBasedState]"], [556, "bool"], [162, "List[int]"], [97, "List[Any]"], [176, "torch.Tensor"], [91, "List[List[ProductionRule]]"], [153, "int"], [68, "List[int]"]]
[[94, "T"], [78, "bool"], [102, "List[T]"], [52, "List[int]"], [93, "T"], [57, "List[List[int]]"], [62, "List[torch.Tensor]"], [103, "List[T]"], [77, "bool"], [51, "List[int]"], [56, "List[List[int]]"], [61, "List[torch.Tensor]"]]
[[32, "torch.Tensor"], [33, "torch.Tensor"], [54, "List[torch.Tensor]"], [59, "List[torch.Tensor]"], [43, "torch.Tensor"], [37, "torch.Tensor"], [48, "torch.Tensor"], [53, "List[torch.Tensor]"], [42, "torch.Tensor"], [49, "torch.Tensor"], [58, "List[torch.Tensor]"], [38, "torch.Tensor"]]
[[500, "torch.Tensor"], [158, "float"], [334, "List[Set[int]]"], [99, "int"], [1006, "GrammarBasedState"], [132, "bool"], [909, "torch.Tensor"], [1549, "List[torch.Tensor]"], [1194, "Dict[(int, List[Tuple[(int, Any)]])]"], [2059, "Dict[(int, List[Tuple[(int, int)]])]"], [2251, "torch.Tensor"], [1804, "GrammarBasedState"], [1325, "GrammarBasedState"], [165, "int"], [1195, "Dict[(int, List[Tuple[(int, Any)]])]"], [2058, "Dict[(int, List[Tuple[(int, int)]])]"], [1551, "List[torch.Tensor]"], [1190, "Dict[(str, torch.Tensor)]"], [335, "List[Set[int]]"], [1339, "torch.Tensor"], [1552, "List[torch.Tensor]"], [1332, "int"], [105, "int"], [1336, "torch.Tensor"], [150, "bool"], [115, "Activation"], [1329, "int"], [131, "bool"], [1008, "torch.Tensor"], [326, "int"], [110, "Attention"], [1335, "torch.Tensor"], [100, "int"], [1191, "Dict[(str, torch.Tensor)]"], [1199, "List[Set[int]]"], [1188, "GrammarBasedState"], [1340, "torch.Tensor"], [141, "int"], [1806, "List[Set[int]]"], [1326, "GrammarBasedState"], [1333, "int"], [116, "Activation"], [388, "Dict[(int, List[Tuple[(int, Any)]])]"], [322, "GrammarBasedState"], [2253, "torch.Tensor"], [723, "torch.Tensor"], [2250, "torch.Tensor"], [111, "Attention"], [106, "int"], [327, "int"], [2255, "torch.Tensor"], [149, "bool"], [1197, "int"], [142, "int"], [1330, "int"], [444, "GrammarBasedState"], [1011, "torch.Tensor"], [1014, "torch.Tensor"], [758, "torch.Tensor"], [323, "GrammarBasedState"], [1010, "torch.Tensor"], [164, "int"], [157, "float"], [1040, "Dict[(int, List[Tuple[(int, Any)]])]"]]
[[97, "int"], [269, "torch.Tensor"], [140, "bool"], [829, "List[int]"], [156, "float"], [148, "FeedForward"], [102, "Attention"], [276, "torch.Tensor"], [264, "CoverageState"], [831, "torch.Tensor"], [149, "FeedForward"], [826, "ChecklistStatelet"], [309, "Dict[(int, List[Tuple[(int, Any)]])]"], [265, "CoverageState"], [277, "torch.Tensor"], [123, "bool"], [310, "Dict[(int, List[Tuple[(int, Any)]])]"], [132, "int"], [272, "torch.Tensor"], [91, "int"], [106, "Activation"], [96, "int"], [425, "List[int]"], [825, "ChecklistStatelet"], [268, "torch.Tensor"], [107, "Activation"], [90, "int"], [101, "Attention"], [273, "torch.Tensor"], [683, "torch.Tensor"], [141, "bool"], [133, "int"], [157, "float"], [122, "bool"]]
[[72, "int"], [79, "List[Set]"], [67, "StateType"], [80, "List[Set]"], [71, "int"], [68, "StateType"]]
[[97, "Activation"], [434, "List[int]"], [430, "ChecklistStatelet"], [82, "int"], [132, "bool"], [199, "CoverageState"], [87, "int"], [203, "torch.Tensor"], [114, "bool"], [208, "torch.Tensor"], [98, "Activation"], [93, "Attention"], [88, "int"], [204, "torch.Tensor"], [438, "torch.Tensor"], [124, "int"], [131, "bool"], [439, "torch.Tensor"], [140, "float"], [113, "bool"], [211, "torch.Tensor"], [81, "int"], [435, "List[int]"], [244, "Dict[(int, List[Tuple[(int, Any)]])]"], [139, "float"], [207, "torch.Tensor"], [431, "ChecklistStatelet"], [212, "torch.Tensor"], [200, "CoverageState"], [92, "Attention"], [245, "Dict[(int, List[Tuple[(int, Any)]])]"], [123, "int"]]
[[97, "Activation"], [248, "GrammarBasedState"], [82, "int"], [132, "bool"], [87, "int"], [293, "Dict[(int, List[Tuple[(int, Any)]])]"], [114, "bool"], [98, "Activation"], [93, "Attention"], [88, "int"], [155, "int"], [139, "FeedForward"], [154, "int"], [326, "List[int]"], [124, "int"], [131, "bool"], [113, "bool"], [327, "List[int]"], [140, "FeedForward"], [81, "int"], [259, "torch.Tensor"], [148, "float"], [247, "GrammarBasedState"], [251, "torch.Tensor"], [256, "torch.Tensor"], [323, "List[int]"], [292, "Dict[(int, List[Tuple[(int, Any)]])]"], [255, "torch.Tensor"], [147, "float"], [260, "torch.Tensor"], [92, "Attention"], [252, "torch.Tensor"], [123, "int"]]
[[87, "bool"], [79, "int"], [88, "bool"], [84, "int"], [69, "str"], [60, "str"], [74, "str"], [65, "str"], [59, "str"], [73, "str"], [64, "str"], [83, "int"], [70, "str"], [78, "int"]]
[[1675, "str"], [66, "str"], [588, "float"], [184, "str"], [597, "Set[str]"], [725, "Set[str]"], [1161, "Dict[(str, List[float])]"], [1671, "str"], [222, "str"], [61, "str"], [145, "str"], [304, "bool"], [388, "List[str]"], [221, "str"], [308, "str"], [226, "str"], [1133, "Dict[(str, Any)]"], [185, "str"], [598, "Set[str]"], [325, "str"], [812, "Union[(str, List[str])]"], [1171, "Dict[(str, List[float])]"], [1130, "Dict[(str, Any)]"], [141, "str"], [593, "Set[str]"], [356, "Union[(str, List[str])]"], [1134, "Dict[(str, Any)]"], [1678, "Optional[str]"], [717, "bool"], [450, "List[Set[str]]"], [326, "str"], [451, "List[Set[str]]"], [355, "Union[(str, List[str])]"], [594, "Set[str]"], [455, "List[Set[str]]"], [810, "Union[(str, List[str])]"], [716, "bool"], [723, "Set[str]"], [1160, "Dict[(str, List[float])]"], [303, "bool"], [102, "str"], [1677, "Optional[str]"], [142, "str"], [60, "str"], [188, "str"], [1674, "str"], [65, "str"], [589, "float"], [387, "List[str]"], [205, "str"], [1170, "Dict[(str, List[float])]"], [103, "str"], [108, "str"], [454, "List[Set[str]]"], [949, "Dict[(str, Any)]"], [328, "str"], [1670, "str"], [1129, "Dict[(str, Any)]"]]
[[325, "Optional[Tuple[(torch.Tensor, torch.Tensor)]]"], [64, "int"], [93, "Optional[float]"], [320, "List[int]"], [76, "float"], [68, "bool"], [54, "int"], [55, "int"], [60, "int"], [326, "Optional[Tuple[(torch.Tensor, torch.Tensor)]]"], [316, "torch.FloatTensor"], [63, "int"], [317, "torch.FloatTensor"], [67, "bool"], [85, "Optional[float]"], [94, "Optional[float]"], [75, "float"], [321, "List[int]"], [59, "int"], [84, "Optional[float]"]]
[[173, "int"], [748, "RnnStateStorage"], [155, "torch.Tensor"], [146, "Callable[([PackedSequence, Optional[RnnState]], Tuple[(Union[(PackedSequence, torch.Tensor)], RnnState)])]"], [749, "RnnStateStorage"], [154, "torch.Tensor"], [150, "torch.Tensor"], [188, "int"], [108, "bool"], [418, "torch.LongTensor"], [413, "int"], [752, "torch.LongTensor"], [415, "int"], [753, "torch.LongTensor"], [147, "Callable[([PackedSequence, Optional[RnnState]], Tuple[(Union[(PackedSequence, torch.Tensor)], RnnState)])]"], [158, "Optional[RnnState]"], [151, "torch.Tensor"], [159, "Optional[RnnState]"], [109, "bool"], [417, "torch.LongTensor"]]
[[1040, "str"], [147, "Optional[float]"], [595, "List[Optional[Tuple[(torch.Tensor, torch.Tensor)]]]"], [980, "torch.FloatTensor"], [323, "torch.LongTensor"], [138, "Optional[float]"], [146, "Optional[float]"], [1041, "str"], [320, "torch.Tensor"], [121, "bool"], [981, "torch.FloatTensor"], [319, "torch.Tensor"], [129, "float"], [115, "int"], [120, "bool"], [128, "float"], [571, "PackedSequence"], [573, "Optional[Tuple[(torch.Tensor, torch.Tensor)]]"], [999, "Tuple[(torch.FloatTensor, torch.FloatTensor)]"], [107, "int"], [112, "int"], [1000, "Tuple[(torch.FloatTensor, torch.FloatTensor)]"], [102, "int"], [324, "torch.LongTensor"], [111, "int"], [116, "int"], [137, "Optional[float]"], [596, "List[Optional[Tuple[(torch.Tensor, torch.Tensor)]]]"], [574, "Optional[Tuple[(torch.Tensor, torch.Tensor)]]"], [103, "int"], [108, "int"]]
[[194, "str"], [2739, "bool"], [261, "torch.nn.Module"], [242, "bool"], [234, "List[str]"], [451, "torch.Tensor"], [2735, "str"], [218, "bool"], [456, "torch.Tensor"], [3008, "torch.Tensor"], [455, "torch.Tensor"], [927, "Params"], [1240, "str"], [203, "int"], [452, "torch.Tensor"], [210, "bool"], [226, "float"], [2737, "str"], [1244, "bool"], [2744, "List[str]"], [227, "float"], [252, "List[float]"], [243, "bool"], [1098, "List[List[str]]"], [217, "bool"], [3266, "List[str]"], [1375, "torch.Tensor"], [199, "str"], [1242, "str"], [204, "int"], [3010, "torch.Tensor"], [209, "bool"], [233, "List[str]"], [1129, "List[str]"], [251, "List[float]"], [928, "Params"], [1097, "List[List[str]]"], [260, "torch.nn.Module"], [195, "str"], [200, "str"]]
[[37, "int"], [707, "torch.Tensor"], [263, "int"], [268, "int"], [99, "Set[int]"], [294, "bool"], [32, "int"], [1146, "torch.Tensor"], [270, "bool"], [277, "int"], [264, "int"], [278, "int"], [703, "torch.Tensor"], [616, "torch.Tensor"], [156, "Set[int]"], [705, "torch.Tensor"], [620, "torch.Tensor"], [293, "bool"], [612, "torch.Tensor"], [617, "torch.Tensor"], [271, "bool"], [285, "bool"], [621, "torch.Tensor"], [31, "int"], [613, "torch.Tensor"], [36, "int"], [261, "int"], [1148, "torch.Tensor"], [284, "bool"]]
[[47, "int"], [158, "torch.Tensor"], [56, "Callable[([torch.Tensor], torch.Tensor)]"], [43, "int"], [159, "torch.Tensor"], [48, "int"], [42, "int"], [55, "Callable[([torch.Tensor], torch.Tensor)]"]]
[[96, "torch.Tensor"], [32, "float"], [97, "torch.Tensor"], [28, "int"], [31, "float"], [27, "int"]]
[[125, "torch.Tensor"], [39, "float"], [32, "float"], [120, "torch.Tensor"], [31, "float"], [28, "int"], [121, "torch.Tensor"], [124, "torch.Tensor"], [38, "float"], [27, "int"]]
[[63, "List[float]"], [54, "bool"], [71, "bool"], [48, "int"], [62, "List[float]"], [49, "int"], [72, "bool"], [199, "List[torch.Tensor]"], [202, "torch.Tensor"], [203, "torch.Tensor"], [198, "List[torch.Tensor]"], [53, "bool"]]
[[90, "float"], [263, "PackedSequence"], [266, "Optional[Tuple[(torch.Tensor, torch.Tensor)]]"], [67, "int"], [267, "Optional[Tuple[(torch.Tensor, torch.Tensor)]]"], [72, "int"], [96, "bool"], [81, "float"], [75, "int"], [66, "int"], [97, "bool"], [80, "float"], [89, "float"], [71, "int"], [76, "int"], [262, "PackedSequence"]]
[[84, "torch.Tensor"], [85, "torch.Tensor"], [90, "torch.Tensor"], [27, "float"], [94, "int"], [89, "torch.Tensor"], [93, "int"], [28, "float"], [100, "int"], [101, "int"]]
[[514, "bool"], [502, "int"], [501, "int"], [812, "torch.Tensor"], [524, "bool"], [547, "bool"], [817, "torch.Tensor"], [67, "torch.Tensor"], [72, "torch.Tensor"], [555, "bool"], [64, "torch.Tensor"], [71, "torch.Tensor"], [824, "torch.Tensor"], [63, "torch.Tensor"], [955, "List[torch.Tensor]"], [68, "torch.Tensor"], [515, "bool"], [820, "torch.Tensor"], [231, "torch.Tensor"], [965, "List[torch.Tensor]"], [956, "List[torch.Tensor]"], [554, "bool"], [509, "int"], [825, "torch.Tensor"], [792, "int"], [249, "int"], [966, "List[torch.Tensor]"], [533, "bool"], [233, "torch.Tensor"], [236, "float"], [821, "torch.Tensor"], [548, "bool"], [541, "bool"], [811, "torch.Tensor"], [229, "torch.Tensor"], [816, "torch.Tensor"], [532, "bool"], [525, "bool"], [235, "float"], [793, "int"], [540, "bool"]]
[[155, "torch.Tensor"], [1822, "torch.Tensor"], [1121, "int"], [655, "int"], [2017, "int"], [2038, "int"], [690, "float"], [1281, "torch.Tensor"], [1751, "int"], [1879, "int"], [2073, "bool"], [1944, "torch.Tensor"], [1130, "bool"], [673, "float"], [2365, "int"], [2508, "List[np.ndarray]"], [1273, "torch.Tensor"], [2391, "int"], [1753, "TransformerConfig"], [1881, "TransformerConfig"], [2060, "str"], [2050, "float"], [728, "int"], [2065, "str"], [2045, "float"], [1277, "torch.Tensor"], [689, "float"], [697, "str"], [2361, "str"], [672, "float"], [1402, "torch.Tensor"], [2039, "int"], [2066, "str"], [1119, "int"], [1122, "int"], [2384, "int"], [2374, "int"], [698, "str"], [2362, "str"], [1129, "bool"], [909, "int"], [2383, "int"], [3118, "int"], [2081, "int"], [96, "torch.Tensor"], [2055, "float"], [2398, "List[str]"], [663, "int"], [905, "int"], [1125, "TransformerConfig"], [996, "torch.Tensor"], [682, "float"], [1507, "bool"], [664, "int"], [3112, "str"], [2074, "bool"], [654, "int"], [3117, "int"], [1620, "torch.Tensor"], [2016, "int"], [910, "int"], [1280, "torch.Tensor"], [681, "float"], [1505, "torch.Tensor"], [2390, "int"], [2397, "List[str]"], [2294, "torch.Tensor"], [97, "torch.Tensor"], [1272, "torch.Tensor"], [1883, "bool"], [2509, "List[np.ndarray]"], [3113, "str"], [2082, "int"], [2033, "int"], [902, "int"], [901, "int"], [1276, "torch.Tensor"], [2023, "int"], [906, "int"], [2028, "int"], [1126, "TransformerConfig"]]
[[393, "torch.Tensor"], [67, "Union[(int, Sequence[int])]"], [52, "int"], [73, "Union[(float, Sequence[float])]"], [53, "int"], [62, "Union[(int, Sequence[int])]"], [58, "int"], [72, "Union[(float, Sequence[float])]"], [63, "Union[(int, Sequence[int])]"], [394, "torch.Tensor"], [68, "Union[(int, Sequence[int])]"], [57, "int"]]
[[346, "PackedSequence"], [78, "bool"], [95, "bool"], [349, "Optional[Tuple[(torch.Tensor, torch.Tensor)]]"], [96, "bool"], [86, "float"], [350, "Optional[Tuple[(torch.Tensor, torch.Tensor)]]"], [75, "int"], [103, "bool"], [104, "bool"], [345, "PackedSequence"], [87, "float"], [70, "int"], [69, "int"], [79, "bool"], [74, "int"]]
[[76, "torch.FloatTensor"], [83, "Union[(int, torch.LongTensor)]"], [75, "torch.FloatTensor"], [79, "torch.LongTensor"], [80, "torch.LongTensor"], [49, "torch.nn.Module"], [84, "Union[(int, torch.LongTensor)]"], [48, "torch.nn.Module"]]
[[393, "torch.Tensor"], [64, "int"], [77, "Union[(float, List[float])]"], [68, "Union[(int, List[int])]"], [58, "int"], [69, "Union[(int, List[int])]"], [74, "Union[(Activation, List[Activation])]"], [63, "int"], [78, "Union[(float, List[float])]"], [59, "int"], [392, "torch.Tensor"], [73, "Union[(Activation, List[Activation])]"]]
[[272, "str"], [829, "List[Tuple[(int, int)]]"], [1370, "torch.Tensor"], [1792, "torch.ByteTensor"], [268, "str"], [145, "str"], [1094, "torch.Tensor"], [825, "int"], [38, "str"], [837, "bool"], [39, "str"], [264, "str"], [1375, "torch.LongTensor"], [1097, "torch.Tensor"], [203, "str"], [43, "Dict[(int, str)]"], [151, "str"], [836, "bool"], [826, "int"], [1093, "torch.Tensor"], [1879, "torch.Tensor"], [1098, "torch.Tensor"], [1372, "torch.Tensor"], [44, "Dict[(int, str)]"], [209, "str"], [1787, "torch.Tensor"], [1790, "torch.Tensor"], [270, "str"], [266, "str"], [830, "List[Tuple[(int, int)]]"], [1881, "torch.Tensor"], [1788, "torch.Tensor"], [1373, "torch.Tensor"]]
[[65, "int"], [83, "bool"], [219, "PackedSequence"], [224, "Optional[Tuple[(torch.Tensor, torch.Tensor)]]"], [60, "int"], [91, "bool"], [74, "float"], [61, "int"], [66, "int"], [220, "PackedSequence"], [84, "bool"], [70, "int"], [69, "int"], [75, "float"], [223, "Optional[Tuple[(torch.Tensor, torch.Tensor)]]"], [92, "bool"]]
[[65, "Activation"], [54, "int"], [186, "torch.Tensor"], [55, "int"], [60, "int"], [185, "torch.Tensor"], [61, "int"], [188, "torch.Tensor"], [189, "torch.Tensor"], [64, "Activation"]]
[[49, "torch.Tensor"], [44, "torch.Tensor"], [43, "torch.Tensor"], [48, "torch.Tensor"]]
[[49, "torch.Tensor"], [44, "torch.Tensor"], [43, "torch.Tensor"], [48, "torch.Tensor"]]
[[251, "torch.Tensor"], [254, "torch.Tensor"], [72, "str"], [67, "int"], [79, "Activation"], [255, "torch.Tensor"], [62, "int"], [61, "int"], [71, "str"], [68, "int"], [252, "torch.Tensor"], [78, "Activation"]]
[[84, "torch.Tensor"], [46, "bool"], [83, "torch.Tensor"], [78, "torch.Tensor"], [47, "bool"], [79, "torch.Tensor"]]
[[79, "int"], [65, "int"], [277, "torch.Tensor"], [86, "int"], [85, "int"], [91, "SimilarityFunction"], [72, "int"], [275, "torch.Tensor"], [278, "torch.Tensor"], [60, "int"], [274, "torch.Tensor"], [61, "int"], [92, "SimilarityFunction"], [66, "int"], [71, "int"], [78, "int"]]
[[49, "torch.Tensor"], [44, "torch.Tensor"], [43, "torch.Tensor"], [48, "torch.Tensor"]]
[[49, "torch.Tensor"], [44, "torch.Tensor"], [43, "torch.Tensor"], [48, "torch.Tensor"]]
[[75, "str"], [64, "int"], [254, "torch.Tensor"], [65, "int"], [82, "Activation"], [257, "torch.Tensor"], [74, "str"], [81, "Activation"], [70, "int"], [71, "int"], [253, "torch.Tensor"], [258, "torch.Tensor"]]
[[35, "torch.Tensor"], [40, "torch.Tensor"], [39, "torch.Tensor"], [34, "torch.Tensor"]]
[[65, "Activation"], [54, "int"], [55, "int"], [60, "int"], [242, "torch.Tensor"], [61, "int"], [71, "bool"], [80, "int"], [238, "torch.Tensor"], [72, "bool"], [81, "int"], [241, "torch.Tensor"], [64, "Activation"], [239, "torch.Tensor"]]
[[97, "torch.Tensor"], [54, "SimilarityFunction"], [55, "SimilarityFunction"], [92, "torch.Tensor"], [93, "torch.Tensor"], [98, "torch.Tensor"]]
[[40, "int"], [23, "int"], [41, "int"], [22, "int"]]
[[33, "torch.nn.modules.RNNBase"], [79, "int"], [158, "torch.Tensor"], [149, "torch.Tensor"], [99, "int"], [154, "torch.Tensor"], [34, "torch.nn.modules.RNNBase"], [150, "torch.Tensor"], [153, "torch.Tensor"], [80, "int"], [98, "int"], [157, "torch.Tensor"]]
[[169, "torch.Tensor"], [128, "int"], [146, "int"], [66, "bool"], [129, "int"], [65, "bool"], [145, "int"], [165, "torch.Tensor"], [170, "torch.Tensor"], [60, "Union[(str, BertModel)]"], [166, "torch.Tensor"], [61, "Union[(str, BertModel)]"]]
[[126, "torch.Tensor"], [63, "bool"], [90, "int"], [58, "int"], [107, "int"], [127, "torch.Tensor"], [62, "bool"], [131, "torch.Tensor"], [106, "int"], [57, "int"], [91, "int"], [130, "torch.Tensor"]]
[[97, "Activation"], [269, "int"], [288, "torch.Tensor"], [67, "int"], [76, "Tuple[(int, Any)]"], [72, "int"], [252, "int"], [287, "torch.Tensor"], [291, "torch.Tensor"], [107, "Optional[int]"], [253, "int"], [292, "torch.Tensor"], [66, "int"], [98, "Activation"], [71, "int"], [106, "Optional[int]"], [268, "int"], [77, "Tuple[(int, Any)]"]]
[[137, "PytorchSeq2VecWrapper"], [157, "PytorchSeq2VecWrapper"], [164, "Params"], [125, "Type[torch.nn.modules.RNNBase]"], [126, "Type[torch.nn.modules.RNNBase]"], [136, "PytorchSeq2VecWrapper"], [156, "PytorchSeq2VecWrapper"], [163, "Params"]]
[[758, "int"], [757, "int"], [99, "Sequence[Sequence[int]]"], [104, "int"], [127, "bool"], [94, "int"], [553, "torch.Tensor"], [109, "int"], [119, "str"], [103, "int"], [95, "int"], [549, "torch.Tensor"], [554, "torch.Tensor"], [126, "bool"], [120, "str"], [742, "int"], [112, "str"], [100, "Sequence[Sequence[int]]"], [743, "int"], [113, "str"], [550, "torch.Tensor"], [108, "int"]]
[[527, "int"], [641, "torch.nn.Module"], [1336, "bool"], [1459, "bool"], [1843, "bool"], [884, "torch.nn.Module"], [79, "Callable"], [1453, "float"], [242, "str"], [796, "float"], [529, "int"], [80, "float"], [1318, "int"], [1446, "int"], [1830, "int"], [1091, "torch.Tensor"], [642, "torch.nn.Module"], [1661, "torch.Tensor"], [72, "torch.Tensor"], [1307, "int"], [1666, "torch.Tensor"], [237, "int"], [1312, "int"], [1577, "torch.Tensor"], [1005, "int"], [64, "torch.Tensor"], [794, "int"], [1818, "int"], [1004, "int"], [1087, "torch.Tensor"], [68, "torch.Tensor"], [593, "torch.Tensor"], [60, "torch.Tensor"], [1319, "int"], [1831, "int"], [651, "bool"], [315, "int"], [238, "int"], [73, "torch.Tensor"], [533, "float"], [1441, "int"], [480, "torch.Tensor"], [1443, "int"], [310, "int"], [309, "int"], [833, "torch.Tensor"], [1010, "float"], [314, "int"], [1089, "torch.Tensor"], [65, "torch.Tensor"], [479, "torch.Tensor"], [1008, "int"], [835, "Callable[([torch.Tensor], torch.Tensor)]"], [1331, "float"], [69, "torch.Tensor"], [530, "int"], [1454, "float"], [1844, "bool"], [1448, "float"], [1085, "torch.Tensor"], [61, "torch.Tensor"], [890, "float"], [1325, "int"], [1662, "torch.Tensor"], [886, "torch.nn.Module"], [836, "Callable[([torch.Tensor], torch.Tensor)]"], [1313, "int"], [650, "bool"], [883, "torch.nn.Module"], [887, "torch.nn.Module"], [1303, "TransformerEncoder"], [881, "int"], [1444, "int"], [646, "int"], [645, "int"], [241, "str"], [934, "torch.Tensor"], [1817, "int"], [936, "torch.Tensor"], [1302, "TransformerEncoder"], [1326, "int"]]
[[201, "torch.Tensor"], [128, "int"], [49, "bool"], [192, "torch.Tensor"], [45, "torch.nn.Module"], [148, "int"], [171, "bool"], [193, "torch.Tensor"], [170, "bool"], [46, "torch.nn.Module"], [196, "torch.Tensor"], [127, "int"], [50, "bool"], [197, "torch.Tensor"], [147, "int"], [200, "torch.Tensor"]]
[[79, "int"], [65, "int"], [263, "torch.LongTensor"], [262, "torch.LongTensor"], [86, "float"], [60, "int"], [258, "torch.Tensor"], [75, "int"], [61, "int"], [66, "int"], [87, "float"], [70, "int"], [259, "torch.Tensor"], [71, "int"], [74, "int"], [78, "int"]]
[[113, "bool"], [135, "torch.Tensor"], [48, "FeedForward"], [92, "int"], [93, "int"], [139, "torch.LongTensor"], [114, "bool"], [138, "torch.LongTensor"], [70, "int"], [69, "int"], [134, "torch.Tensor"], [49, "FeedForward"]]
[[340, "torch.Tensor"], [82, "int"], [94, "SimilarityFunction"], [112, "str"], [291, "int"], [86, "int"], [118, "int"], [306, "int"], [87, "int"], [119, "int"], [341, "torch.Tensor"], [344, "torch.Tensor"], [345, "torch.Tensor"], [290, "int"], [81, "int"], [305, "int"], [102, "int"], [103, "int"], [93, "SimilarityFunction"], [111, "str"]]
[[1026, "bool"], [71, "float"], [1013, "int"], [761, "torch.Tensor"], [650, "Sequence[Sequence[Sequence[int]]]"], [657, "bool"], [762, "torch.Tensor"], [648, "int"], [429, "torch.Tensor"], [55, "Sequence[Sequence[int]]"], [430, "torch.Tensor"], [49, "int"], [1027, "bool"], [58, "str"], [823, "List[List[torch.Tensor]]"], [652, "float"], [54, "Sequence[Sequence[int]]"], [63, "bool"], [59, "str"], [822, "List[List[torch.Tensor]]"], [998, "int"], [840, "List[torch.Tensor]"], [72, "float"], [766, "torch.Tensor"], [50, "int"], [1012, "int"], [767, "torch.Tensor"], [841, "List[torch.Tensor]"], [658, "bool"], [62, "bool"], [999, "int"]]
[[55, "bool"], [22, "int"], [40, "int"], [23, "int"], [41, "int"], [54, "bool"]]
[[97, "int"], [161, "float"], [135, "bool"], [296, "bool"], [391, "int"], [396, "int"], [114, "int"], [385, "int"], [318, "torch.Tensor"], [131, "int"], [160, "float"], [387, "int"], [398, "bool"], [119, "int"], [282, "int"], [105, "int"], [392, "int"], [126, "int"], [136, "bool"], [115, "int"], [120, "int"], [110, "int"], [145, "float"], [321, "torch.Tensor"], [698, "int"], [125, "int"], [383, "int"], [132, "int"], [144, "float"], [727, "torch.Tensor"], [101, "int"], [102, "int"], [153, "float"], [106, "int"], [317, "torch.Tensor"], [394, "int"], [685, "int"], [96, "int"], [111, "int"], [322, "torch.Tensor"], [413, "float"], [152, "float"], [408, "float"], [729, "torch.Tensor"], [403, "float"], [267, "int"], [297, "bool"], [389, "int"], [266, "int"], [281, "int"]]
[[97, "int"], [120, "float"], [94, "int"], [421, "int"], [111, "bool"], [456, "torch.Tensor"], [136, "float"], [406, "int"], [405, "int"], [460, "torch.Tensor"], [129, "float"], [93, "int"], [98, "int"], [89, "int"], [457, "torch.Tensor"], [84, "int"], [128, "float"], [135, "float"], [461, "torch.Tensor"], [107, "int"], [102, "int"], [101, "int"], [112, "bool"], [106, "int"], [85, "int"], [90, "int"], [420, "int"], [121, "float"]]
[[116, "torch.Tensor"], [65, "int"], [117, "torch.Tensor"], [43, "int"], [80, "int"], [66, "int"], [81, "int"], [121, "torch.LongTensor"], [120, "torch.LongTensor"], [42, "int"]]
[[197, "PytorchSeq2SeqWrapper"], [165, "Type[torch.nn.modules.RNNBase]"], [176, "PytorchSeq2SeqWrapper"], [203, "Params"], [166, "Type[torch.nn.modules.RNNBase]"], [177, "PytorchSeq2SeqWrapper"], [204, "Params"], [196, "PytorchSeq2SeqWrapper"]]
[[72, "int"], [55, "int"], [73, "int"], [50, "Dict[(str, torch.Tensor)]"], [56, "int"], [49, "Dict[(str, torch.Tensor)]"]]
[[224, "int"], [585, "Params"], [225, "int"], [414, "Union[(List[Any], Dict[(str, Any)])]"], [106, "bool"], [171, "int"], [91, "Dict[(str, TokenEmbedder)]"], [219, "Dict[(str, torch.Tensor)]"], [96, "Dict[(str, Union[(List[str], Dict[(str, str)])])]"], [412, "Union[(List[Any], Dict[(str, Any)])]"], [581, "Vocabulary"], [580, "Vocabulary"], [97, "Dict[(str, Union[(List[str], Dict[(str, str)])])]"], [92, "Dict[(str, TokenEmbedder)]"], [218, "Dict[(str, torch.Tensor)]"], [413, "Union[(List[Any], Dict[(str, Any)])]"], [584, "Params"], [107, "bool"], [172, "int"]]
[[428, "torch.LongTensor"], [87, "int"], [66, "int"], [111, "bool"], [416, "torch.LongTensor"], [103, "bool"], [95, "int"], [427, "torch.LongTensor"], [411, "torch.FloatTensor"], [79, "str"], [80, "str"], [310, "int"], [296, "int"], [412, "torch.FloatTensor"], [104, "bool"], [71, "str"], [421, "torch.LongTensor"], [112, "bool"], [96, "int"], [67, "int"], [86, "int"], [311, "int"], [297, "int"], [72, "str"], [420, "torch.LongTensor"], [417, "torch.LongTensor"]]
[[320, "torch.LongTensor"], [246, "int"], [232, "int"], [87, "int"], [323, "torch.LongTensor"], [66, "int"], [331, "torch.LongTensor"], [88, "int"], [315, "torch.FloatTensor"], [78, "int"], [95, "bool"], [247, "int"], [233, "int"], [103, "bool"], [316, "torch.FloatTensor"], [330, "torch.LongTensor"], [79, "int"], [104, "bool"], [71, "str"], [324, "torch.LongTensor"], [321, "torch.LongTensor"], [67, "int"], [96, "bool"], [72, "str"]]
[[59, "torch.LongTensor"], [58, "torch.LongTensor"], [41, "torch.FloatTensor"], [72, "int"], [52, "torch.LongTensor"], [73, "int"], [47, "torch.LongTensor"], [46, "torch.LongTensor"], [88, "int"], [51, "torch.LongTensor"], [89, "int"], [42, "torch.FloatTensor"]]
[[129, "torch.FloatTensor"], [54, "int"], [108, "int"], [55, "int"], [134, "torch.LongTensor"], [145, "torch.LongTensor"], [107, "int"], [94, "int"], [93, "int"], [139, "torch.LongTensor"], [138, "torch.LongTensor"], [133, "torch.LongTensor"], [128, "torch.FloatTensor"], [146, "torch.LongTensor"]]
[[49, "torch.Tensor"], [44, "torch.Tensor"], [45, "torch.Tensor"], [48, "torch.Tensor"]]
[[265, "torch.Tensor"], [64, "int"], [88, "bool"], [75, "str"], [65, "int"], [82, "Activation"], [74, "str"], [89, "bool"], [81, "Activation"], [266, "torch.Tensor"], [261, "torch.Tensor"], [70, "int"], [71, "int"], [262, "torch.Tensor"]]
[[70, "bool"], [192, "torch.Tensor"], [54, "int"], [55, "int"], [60, "int"], [191, "torch.Tensor"], [71, "bool"], [63, "Activation"], [195, "torch.Tensor"], [64, "Activation"], [59, "int"], [194, "torch.Tensor"]]
[[84, "torch.Tensor"], [49, "bool"], [83, "torch.Tensor"], [88, "torch.Tensor"], [133, "torch.Tensor"], [50, "bool"], [87, "torch.Tensor"], [80, "torch.Tensor"], [131, "torch.Tensor"], [79, "torch.Tensor"]]
[[49, "torch.Tensor"], [44, "torch.Tensor"], [45, "torch.Tensor"], [48, "torch.Tensor"]]
[[97, "torch.Tensor"], [59, "bool"], [51, "SimilarityFunction"], [101, "torch.Tensor"], [52, "SimilarityFunction"], [102, "torch.Tensor"], [60, "bool"], [98, "torch.Tensor"]]
[[78, "BertModel"], [969, "str"], [165, "int"], [278, "torch.LongTensor"], [77, "BertModel"], [90, "bool"], [286, "torch.LongTensor"], [68, "Dict[(str, BertModel)]"], [155, "bool"], [273, "torch.LongTensor"], [156, "bool"], [252, "int"], [980, "bool"], [973, "bool"], [172, "int"], [152, "BertModel"], [67, "Dict[(str, BertModel)]"], [182, "int"], [181, "int"], [972, "bool"], [285, "torch.LongTensor"], [85, "str"], [274, "torch.LongTensor"], [173, "int"], [151, "BertModel"], [86, "str"], [91, "bool"], [164, "int"], [279, "torch.LongTensor"], [968, "str"], [251, "int"]]
[[402, "Vocabulary"], [218, "torch.Tensor"], [65, "str"], [76, "bool"], [217, "torch.Tensor"], [64, "str"], [68, "int"], [405, "Params"], [77, "bool"], [404, "Params"], [61, "Vocabulary"], [60, "Vocabulary"], [69, "int"]]
[[61, "bool"], [140, "torch.Tensor"], [58, "OpenaiTransformer"], [141, "torch.Tensor"], [145, "torch.Tensor"], [144, "torch.Tensor"], [62, "bool"], [57, "OpenaiTransformer"]]
[[205, "int"], [66, "str"], [85, "float"], [99, "int"], [107, "List[str]"], [84, "float"], [329, "Vocabulary"], [206, "int"], [333, "Params"], [100, "int"], [227, "torch.Tensor"], [230, "torch.Tensor"], [92, "bool"], [108, "List[str]"], [231, "torch.Tensor"], [76, "bool"], [332, "Params"], [71, "str"], [117, "List[float]"], [91, "bool"], [330, "Vocabulary"], [67, "str"], [72, "str"], [116, "List[float]"], [75, "bool"], [226, "torch.Tensor"]]
[[681, "torch.Tensor"], [99, "float"], [393, "TokenIndexer"], [128, "bool"], [121, "bool"], [95, "str"], [100, "float"], [394, "TokenIndexer"], [651, "int"], [107, "Tuple[(str, str)]"], [129, "bool"], [94, "str"], [106, "Tuple[(str, str)]"], [650, "int"], [122, "bool"], [680, "torch.Tensor"]]
[[66, "Embedding"], [75, "float"], [227, "Vocabulary"], [238, "Params"], [232, "Params"], [297, "Params"], [70, "Seq2VecEncoder"], [237, "Params"], [139, "int"], [74, "float"], [171, "torch.Tensor"], [231, "Params"], [228, "Vocabulary"], [71, "Seq2VecEncoder"], [170, "torch.Tensor"], [67, "Embedding"], [296, "Params"], [140, "int"]]
[[1220, "str"], [1763, "str"], [1768, "str"], [1911, "str"], [228, "float"], [2177, "str"], [2537, "str"], [1283, "str"], [2180, "Optional[str]"], [206, "torch.FloatTensor"], [1227, "str"], [2434, "str"], [222, "bool"], [965, "Params"], [261, "str"], [213, "int"], [1767, "str"], [2585, "str"], [466, "int"], [964, "Params"], [467, "int"], [268, "str"], [1804, "str"], [1774, "Optional[str]"], [2295, "str"], [2592, "str"], [254, "bool"], [1773, "Optional[str]"], [1820, "str"], [1656, "str"], [632, "str"], [1287, "Vocabulary"], [1223, "int"], [199, "int"], [1903, "str"], [236, "float"], [214, "int"], [190, "int"], [2642, "str"], [962, "Vocabulary"], [1219, "str"], [625, "str"], [253, "bool"], [1910, "str"], [2413, "str"], [189, "int"], [1906, "str"], [194, "int"], [1664, "str"], [2176, "str"], [2590, "Sequence[str]"], [229, "float"], [244, "bool"], [2536, "str"], [631, "str"], [961, "Vocabulary"], [1660, "int"], [615, "Vocabulary"], [1764, "str"], [207, "torch.FloatTensor"], [260, "str"], [2179, "Optional[str]"], [1289, "str"], [1228, "str"], [195, "int"], [2584, "str"], [2297, "Optional[str]"], [1662, "Vocabulary"], [2227, "Sequence[str]"], [1225, "Vocabulary"], [221, "bool"], [269, "str"], [1805, "str"], [1819, "str"], [1809, "Optional[str]"], [2435, "str"], [243, "bool"], [2414, "str"], [237, "float"], [2641, "str"], [619, "str"], [616, "Vocabulary"], [1657, "str"], [624, "str"], [200, "int"], [1285, "int"], [1905, "str"]]
[[78, "bool"], [50, "float"], [56, "Tuple[(str, str)]"], [45, "str"], [57, "Tuple[(str, str)]"], [71, "bool"], [72, "bool"], [44, "str"], [79, "bool"], [49, "float"]]
[[36, "int"], [35, "int"]]
[[98, "str"], [89, "str"], [113, "bool"], [106, "str"], [88, "str"], [105, "str"], [94, "str"], [99, "str"], [112, "bool"], [93, "str"]]
[[67, "MatchTuple"], [195, "MatchTuple"], [57, "str"], [51, "str"], [63, "bool"], [56, "str"], [68, "MatchTuple"], [45, "str"], [50, "str"], [120, "MatchTuple"], [116, "bool"], [44, "str"], [62, "bool"], [117, "bool"]]
[[98, "str"], [101, "str"], [630, "int"], [110, "bool"], [97, "str"], [631, "int"], [645, "bool"], [635, "str"], [640, "str"], [109, "bool"], [634, "str"], [102, "str"]]
[[110, "str"], [107, "JsonDict"], [272, "int"], [273, "int"], [277, "str"], [106, "JsonDict"], [111, "str"]]
[[46, "str"], [51, "str"], [184, "str"], [310, "PackagesType"], [326, "Set[str]"], [317, "PackagesType"], [327, "Set[str]"], [52, "str"], [163, "Set[str]"], [185, "str"], [515, "int"], [155, "PackagesType"], [164, "Set[str]"], [145, "PackagesType"], [45, "str"], [516, "int"], [318, "PackagesType"], [81, "str"], [334, "Set[str]"], [144, "PackagesType"], [335, "Set[str]"], [154, "PackagesType"]]
[[256, "str"], [119, "str"], [118, "str"]]
[[194, "str"], [1177, "str"], [1715, "str"], [1529, "List[Extraction]"], [191, "str"], [1174, "Element"], [1287, "str"], [313, "int"], [1204, "str"], [1716, "str"], [185, "str"], [856, "str"], [351, "str"], [1179, "str"], [1205, "str"], [186, "str"], [418, "Extraction"], [424, "Extraction"], [857, "str"], [1180, "str"], [314, "int"], [342, "Element"], [1182, "str"], [348, "List[int]"], [1530, "List[Extraction]"], [663, "Extraction"], [306, "int"], [343, "Element"], [1176, "str"], [349, "List[int]"], [423, "Extraction"], [352, "str"], [190, "str"], [1173, "Element"], [307, "int"], [195, "str"], [318, "str"], [419, "Extraction"], [1286, "str"], [317, "str"]]
[[114, "Set[str]"], [188, "str"], [52, "Set[str]"], [84, "Set[str]"], [106, "str"], [53, "Set[str]"], [85, "Set[str]"], [100, "str"], [105, "str"], [115, "Set[str]"], [99, "str"], [196, "Set[str]"], [189, "str"]]
[[114, "int"], [124, "str"], [119, "int"], [127, "str"], [132, "str"], [123, "str"], [128, "str"], [115, "int"], [131, "str"], [120, "int"]]
[[114, "int"], [110, "str"], [101, "str"], [106, "str"], [109, "str"], [100, "str"], [105, "str"], [115, "int"]]
[[25, "str"], [24, "str"], [30, "str"], [29, "str"]]
[[274, "JsonDict"], [258, "bool"], [238, "str"], [246, "int"], [243, "str"], [247, "int"], [252, "int"], [237, "str"], [109, "str"], [253, "int"], [242, "str"], [263, "bool"], [264, "bool"], [259, "bool"], [275, "JsonDict"], [108, "str"]]
[[109, "int"], [89, "str"], [88, "str"], [95, "str"], [100, "str"], [105, "str"], [94, "str"], [99, "str"], [104, "str"], [110, "int"]]
[[100, "Params"], [103, "str"], [208, "Instance"], [104, "str"], [207, "Instance"], [99, "Params"]]
[[107, "str"], [128, "int"], [134, "bool"], [112, "str"], [119, "str"], [129, "int"], [118, "str"], [124, "int"], [140, "bool"], [135, "bool"], [108, "str"], [113, "str"], [139, "bool"], [123, "int"]]
[[124, "argparse.Namespace"], [120, "str"], [119, "str"], [125, "argparse.Namespace"]]
[[178, "Mapping[(str, int)]"], [213, "Dict[(str, int)]"], [174, "Iterable[str]"], [214, "Dict[(str, int)]"], [321, "int"], [308, "int"], [63, "str"], [316, "int"], [317, "int"], [173, "Iterable[str]"], [64, "str"], [322, "int"], [432, "torch.Tensor"], [307, "int"], [177, "Mapping[(str, int)]"], [312, "int"], [222, "Dict[(str, int)]"], [223, "Dict[(str, int)]"], [313, "int"], [431, "torch.Tensor"]]
[[372, "TextFieldEmbedder"], [216, "List[Token]"], [380, "Vocabulary"], [550, "bool"], [448, "torch.Tensor"], [376, "Seq2SeqEncoder"], [447, "torch.Tensor"], [168, "Dict[(str, TokenIndexer)]"], [371, "TextFieldEmbedder"], [169, "Dict[(str, TokenIndexer)]"], [377, "Seq2SeqEncoder"], [220, "List[str]"], [286, "str"], [285, "str"], [209, "Instance"], [217, "List[Token]"], [444, "Dict[(str, torch.Tensor)]"], [221, "List[str]"], [551, "bool"], [208, "Instance"], [381, "Vocabulary"], [445, "Dict[(str, torch.Tensor)]"]]
[[392, "Vocabulary"], [561, "bool"], [216, "List[Token]"], [459, "torch.Tensor"], [383, "TextFieldEmbedder"], [387, "Seq2SeqEncoder"], [219, "List[str]"], [215, "List[Token]"], [388, "Seq2SeqEncoder"], [168, "Dict[(str, TokenIndexer)]"], [284, "str"], [382, "TextFieldEmbedder"], [391, "Vocabulary"], [220, "List[str]"], [455, "Dict[(str, torch.Tensor)]"], [562, "bool"], [458, "torch.Tensor"], [285, "str"], [208, "Instance"], [456, "Dict[(str, torch.Tensor)]"], [167, "Dict[(str, TokenIndexer)]"], [207, "Instance"]]
[[67, "int"], [60, "str"], [63, "str"], [59, "str"], [66, "int"], [62, "str"], [57, "List[str]"], [56, "List[str]"]]
[[269, "Dict[(str, Any)]"], [264, "Flask"], [275, "str"], [268, "Dict[(str, Any)]"], [286, "Flask"], [529, "Flask"], [263, "Flask"], [276, "str"]]
[[473, "Dict[str, str]"], [768, "Dict[str, Any]"], [332, "List[str]"], [1051, "List[str]"], [464, "Dict[str, str]"], [465, "Dict[str, str]"], [742, "Dict[str, Any]"], [456, "Dict[str, str]"], [457, "Dict[str, str]"], [997, "List[str]"], [1052, "List[str]"], [331, "List[str]"], [1093, "List[str]"], [474, "Dict[str, str]"], [741, "Dict[str, Any]"], [996, "List[str]"], [1092, "List[str]"], [767, "Dict[str, Any]"]]
[[530, "Exception"], [454, "BasicAuthError"], [298, "HTTPException"], [299, "HTTPException"], [374, "ApiError"]]
[[60, "JSON"], [59, "JSON"]]
[[256, "str"], [261, "str"], [260, "str"]]
[[77, "Dict[(str, Any)]"], [76, "Dict[(str, Any)]"], [67, "Alert"], [81, "ImmutableMultiDict"], [72, "JSON"], [73, "JSON"], [80, "ImmutableMultiDict"], [68, "Alert"]]
[[263, "ImmutableMultiDict"], [153, "str"], [112, "str"], [252, "JSON"], [261, "str"], [256, "Alert"], [87, "ImmutableMultiDict"], [251, "JSON"], [259, "str"], [257, "Alert"], [88, "ImmutableMultiDict"]]
[[67, "Alert"], [77, "str"], [72, "JSON"], [73, "JSON"], [76, "str"], [68, "Alert"]]
[[88, "JSON"], [76, "Alert"], [80, "str"], [89, "JSON"], [81, "str"], [85, "str"], [77, "Alert"], [84, "str"]]
[[227, "ImmutableMultiDict"], [226, "ImmutableMultiDict"], [173, "str"], [231, "Any"], [172, "str"], [232, "Any"]]
[[62, "str"], [55, "str"], [54, "str"], [61, "str"]]
[[373, "str"], [372, "str"]]
[[343, "str"], [549, "str"], [348, "str"], [682, "str"], [170, "str"], [374, "str"], [109, "str"], [547, "User"], [367, "bool"], [360, "str"], [550, "str"], [349, "str"], [213, "bool"], [166, "bool"], [352, "List[str]"], [822, "Dict[(str, Any)]"], [728, "str"], [115, "Any"], [114, "Any"], [290, "List[str]"], [620, "User"], [735, "int"], [679, "str"], [212, "bool"], [684, "str"], [826, "Dict[(str, Any)]"], [353, "List[str]"], [724, "str"], [217, "str"], [622, "str"], [366, "bool"], [222, "List[str]"], [355, "List[str]"], [685, "str"], [165, "bool"], [286, "str"], [725, "str"], [823, "Dict[(str, Any)]"], [346, "str"], [337, "str"], [730, "str"], [218, "str"], [680, "str"], [736, "int"], [546, "User"], [173, "Any"], [287, "str"], [342, "str"], [827, "Dict[(str, Any)]"], [338, "str"], [169, "str"], [359, "str"], [373, "str"], [108, "str"], [223, "List[str]"], [356, "List[str]"]]
[[80, "List[Switch]"], [79, "List[Switch]"]]
[[3855, "int"], [3633, "bool"], [2529, "int"], [1720, "bool"], [3374, "str"], [3460, "bool"], [2611, "str"], [2536, "int"], [3586, "bool"], [3737, "bool"], [4000, "Query"], [3669, "str"], [4501, "str"], [4364, "str"], [3493, "int"], [4177, "Query"], [964, "JSON"], [4041, "Query"], [3736, "bool"], [4198, "int"], [4136, "Query"], [3848, "int"], [1793, "str"], [4065, "Query"], [4506, "int"], [2537, "int"], [141, "str"], [3402, "bool"], [1686, "bool"], [3611, "bool"], [3488, "str"], [3585, "bool"], [3459, "bool"], [4157, "Query"], [3661, "bool"], [2530, "int"], [2855, "str"], [4090, "Query"], [2524, "bool"], [3668, "str"], [4206, "int"], [1794, "str"], [335, "int"], [3843, "Query"], [3978, "Query"], [2435, "Union[(Dict, Tuple)]"], [3849, "int"], [3373, "str"], [137, "str"], [3640, "Dict[(str, Any)]"], [3634, "bool"], [3486, "str"], [4371, "int"], [3376, "List[str]"], [1847, "Dict[(str, Any)]"], [3639, "Dict[(str, Any)]"], [4115, "Query"], [3401, "bool"], [2887, "Optional[History]"], [3610, "bool"], [3485, "str"], [1685, "bool"], [3591, "List[str]"], [1719, "bool"], [3934, "Query"], [4020, "Query"], [3762, "Query"], [1678, "str"], [4366, "str"], [3616, "List[str]"], [4499, "str"], [138, "str"], [142, "str"], [3662, "bool"], [4207, "int"], [2523, "bool"], [963, "JSON"], [2434, "Union[(Dict, Tuple)]"], [3377, "List[str]"], [3592, "List[str]"], [3856, "int"], [1848, "Dict[(str, Any)]"], [4199, "int"], [1679, "str"]]
[[1547, "str"], [1421, "Dict[(str, Any)]"], [409, "JSON"], [118, "str"], [708, "str"], [1147, "str"], [1253, "bool"], [1415, "bool"], [1443, "bool"], [1173, "str"], [1548, "str"], [99, "str"], [1199, "str"], [1579, "bool"], [1501, "str"], [380, "bool"], [555, "bool"], [98, "str"], [119, "str"], [709, "str"], [1082, "Union[(Dict, Tuple)]"], [1148, "str"], [1678, "bool"], [1223, "Query"], [1503, "str"], [410, "JSON"], [1585, "str"], [1748, "str"], [1414, "bool"], [766, "Dict[(str, Any)]"], [1602, "bool"], [110, "str"], [1224, "Query"], [106, "str"], [554, "bool"], [379, "bool"], [1545, "str"], [1081, "Union[(Dict, Tuple)]"], [111, "str"], [102, "str"], [114, "List[str]"], [107, "str"], [1254, "bool"], [1442, "bool"], [1420, "Dict[(str, Any)]"], [1580, "bool"], [767, "Dict[(str, Any)]"], [103, "str"], [1603, "bool"], [1677, "bool"], [115, "List[str]"], [1172, "str"]]
[[272, "str"], [92, "str"], [79, "dt"], [63, "str"], [68, "str"], [867, "str"], [283, "bool"], [909, "str"], [868, "str"], [88, "dt"], [75, "str"], [84, "dt"], [289, "str"], [87, "dt"], [64, "str"], [71, "str"], [76, "str"], [282, "bool"], [290, "str"], [910, "str"], [275, "str"], [80, "dt"], [91, "str"], [83, "dt"], [67, "str"], [72, "str"], [271, "str"], [276, "str"]]
[[226, "str"], [288, "str"], [286, "str"], [253, "str"]]
[[1090, "str"], [1154, "bool"], [430, "str"], [128, "datetime"], [360, "int"], [1124, "Query"], [488, "JSON"], [114, "str"], [121, "List[str]"], [135, "int"], [393, "timedelta"], [1025, "Union[(Dict, Tuple)]"], [1123, "Query"], [136, "int"], [361, "int"], [832, "Dict[(str, Any)]"], [786, "str"], [394, "timedelta"], [1153, "bool"], [489, "JSON"], [833, "Dict[(str, Any)]"], [429, "str"], [127, "datetime"], [142, "str"], [787, "str"], [1026, "Union[(Dict, Tuple)]"], [1094, "List[str]"], [1093, "List[str]"], [1091, "str"], [113, "str"], [143, "str"], [120, "List[str]"]]
[[1094, "bool"], [537, "str"], [963, "Query"], [584, "Dict[(str, Any)]"], [1121, "str"], [861, "Union[(Dict, Tuple)]"], [99, "str"], [538, "str"], [1000, "str"], [114, "datetime"], [278, "JSON"], [98, "str"], [250, "str"], [1093, "bool"], [860, "Union[(Dict, Tuple)]"], [279, "JSON"], [103, "List[Scope]"], [106, "str"], [929, "str"], [107, "str"], [930, "str"], [121, "str"], [249, "str"], [583, "Dict[(str, Any)]"], [102, "List[Scope]"], [113, "datetime"], [932, "str"], [964, "Query"], [122, "str"]]
[[809, "Query"], [919, "bool"], [784, "str"], [400, "str"], [598, "Dict[(str, Any)]"], [468, "JSON"], [344, "List[GroupUser]"], [559, "str"], [560, "str"], [808, "Query"], [168, "Dict[(str, Any)]"], [83, "str"], [724, "Union[(Dict, Tuple)]"], [397, "str"], [918, "bool"], [469, "JSON"], [299, "Union[(Dict, Tuple)]"], [79, "str"], [169, "Dict[(str, Any)]"], [84, "str"], [75, "str"], [80, "str"], [362, "str"], [71, "str"], [341, "str"], [76, "str"], [343, "List[GroupUser]"], [72, "str"], [399, "str"]]
[[521, "List[str]"], [341, "Union[(Dict, Tuple)]"], [490, "bool"], [201, "str"], [432, "Query"], [240, "Dict[(str, Any)]"], [202, "str"], [522, "List[str]"], [115, "JSON"], [75, "str"], [407, "str"], [71, "str"], [76, "str"], [342, "Union[(Dict, Tuple)]"], [491, "bool"], [239, "Dict[(str, Any)]"], [517, "str"], [408, "str"], [116, "JSON"], [433, "Query"], [72, "str"], [518, "str"]]
[[1670, "bool"], [1150, "Dict[(str, Any)]"], [1529, "str"], [604, "JSON"], [997, "str"], [92, "str"], [605, "JSON"], [1533, "List[str]"], [996, "str"], [1563, "Query"], [1671, "bool"], [1149, "Dict[(str, Any)]"], [1532, "List[str]"], [1463, "Union[(Dict, Tuple)]"], [1464, "Union[(Dict, Tuple)]"], [1530, "str"], [1562, "Query"], [93, "str"]]
[[563, "bool"], [724, "List[str]"], [292, "Dict[(str, Any)]"], [414, "Union[(Dict, Tuple)]"], [725, "List[str]"], [78, "str"], [293, "Dict[(str, Any)]"], [479, "str"], [596, "List[Scope]"], [254, "str"], [128, "JSON"], [591, "str"], [82, "List[Scope]"], [720, "str"], [592, "str"], [255, "str"], [413, "Union[(Dict, Tuple)]"], [583, "bool"], [505, "Query"], [562, "bool"], [721, "str"], [595, "List[Scope]"], [129, "JSON"], [81, "List[Scope]"], [77, "str"], [584, "bool"], [480, "str"], [504, "Query"]]
[[98, "str"], [89, "str"], [80, "str"], [97, "str"], [71, "str"], [90, "str"], [81, "str"], [72, "str"]]
[[111, "MultiDict"], [112, "MultiDict"], [185, "Dict[str, Any]"], [186, "Dict[str, Any]"]]
[[108, "MultiDict"], [109, "MultiDict"]]
[[651, "str"], [442, "List[str]"], [394, "Any"], [545, "Flask"], [671, "Any"], [381, "List[str]"], [440, "str"], [432, "Flask"], [365, "str"], [663, "List[str]"], [384, "str"], [661, "str"], [377, "List[str]"], [652, "str"], [657, "str"], [360, "str"], [436, "str"], [633, "Flask"], [450, "Any"], [390, "str"], [385, "str"], [667, "str"], [523, "Flask"], [361, "str"], [444, "List[str]"], [134, "Flask"], [665, "List[str]"], [589, "Flask"], [611, "Flask"], [438, "str"], [434, "str"], [448, "str"], [358, "Flask"], [393, "Any"], [669, "str"], [372, "str"], [368, "str"], [389, "str"], [659, "str"], [567, "Flask"], [380, "List[str]"], [446, "str"], [373, "str"], [364, "str"], [369, "str"], [133, "Flask"], [655, "str"], [167, "Flask"], [376, "List[str]"]]
[[162, "str"], [161, "str"], [157, "str"], [156, "str"]]
[[138, "Flask"], [104, "Flask"], [105, "Flask"]]
[[66, "str"], [539, "Alert"], [73, "Scope"], [65, "str"], [189, "Alert"], [72, "Scope"], [194, "Alert"], [190, "Alert"], [195, "Alert"], [545, "str"], [713, "str"], [544, "str"], [711, "str"], [542, "str"], [708, "Alert"], [710, "str"], [541, "str"]]
[[45, "int"], [32, "int"], [192, "int"], [128, "MultiDict"], [219, "bool"], [31, "int"], [130, "int"], [191, "int"], [38, "int"], [127, "MultiDict"], [39, "int"], [220, "bool"], [46, "int"]]
[[139, "str"], [47, "Flask"], [293, "str"], [289, "str"], [241, "List[Scope]"], [48, "Flask"], [292, "str"], [240, "List[Scope]"], [233, "str"], [288, "str"], [81, "Flask"], [232, "str"], [140, "str"]]
[[130, "Flask"], [318, "Alert"], [317, "Alert"], [129, "Flask"]]
[[61, "Flask"], [30, "Flask"]]
[[53, "Flask"], [23, "Flask"], [24, "Flask"]]
[[51, "Flask"], [52, "Flask"], [83, "Flask"]]
[[91, "Flask"], [330, "SMTP"], [54, "Flask"], [220, "str"], [223, "str"], [55, "Flask"], [228, "str"], [224, "str"], [227, "str"], [329, "SMTP"], [221, "str"]]
[[267, "str"], [226, "str"], [60, "Any"], [179, "str"], [227, "str"], [51, "Any"], [274, "object"], [230, "dt"], [178, "str"], [59, "Any"], [36, "dt"], [268, "str"], [273, "object"], [52, "Any"]]
[[95, "Flask"], [96, "Flask"]]
[[150, "Alert"], [165, "Any"], [176, "str"], [188, "Any"], [174, "str"], [197, "str"], [128, "Alert"], [164, "Any"], [195, "Alert"], [173, "str"], [189, "Any"], [171, "Alert"], [177, "str"], [200, "str"], [198, "str"], [129, "Alert"]]
